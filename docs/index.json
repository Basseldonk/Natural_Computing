[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Canvas.js",
    "content": "\n\"use strict\"\n\nimport GridBasedModel from \"./models/GridBasedModel.js\"\nimport Grid2D from \"./grid/Grid2D.js\"\nimport CoarseGrid from \"./grid/CoarseGrid.js\"\nimport PixelsByCell from \"./stats/PixelsByCell.js\"\nimport ActivityConstraint from \"./hamiltonian/ActivityConstraint.js\"\nimport ActivityMultiBackground from \"./hamiltonian/ActivityMultiBackground.js\"\n\n/** \n * Class for taking a CPM grid and displaying it in either browser or with nodejs.\n * Note: when using this class from outside the module, you don't need to import it\n * separately but can access it from CPM.Canvas. */\nclass Canvas {\n\t/** The Canvas constructor accepts a CPM object C or a Grid2D object.\n\t@param {GridBasedModel/Grid2D/CoarseGrid} C the object to draw, which is\n\teither an object of class GridBasedModel (either CPM or CA), or a grid (Grid2D or\n\tCoarseGrid).\n\t@param {object} options Configuration settings, containing: \"zoom\" (positive number specifying\n\tthe zoom level to draw with.) */\n\tconstructor( C, options ){\n\t\tif( C instanceof GridBasedModel ){\n\t\t\t/**\n\t\t\t * The underlying model that is drawn on the canvas.\n\t\t\t * @type {GridBasedModel}\n\t\t\t */\n\t\t\tthis.C = C\n\t\t\t/** @private\n\t\t\t * @ignore */\n\t\t\tthis.extents = C.extents\n\t\t} else if( C instanceof Grid2D  ||  C instanceof CoarseGrid ){\n\t\t\t/**\n\t\t\t * The underlying grid that is drawn on the canvas.\n\t\t\t * @type {Grid2D/CoarseGrid}\n\t\t\t */\n\t\t\tthis.grid = C\n\t\t\tthis.extents = C.extents\n\t\t}\n\t\t/** Zoom level to draw the canvas with, set to options.zoom or its default value 1.\n\t\t* @type {number}*/\n\t\tthis.zoom = (options && options.zoom) || 1\n\t\t/** @ignore*/\n\t\tthis.wrap = (options && options.wrap) || [0,0,0]\n\t\t\n\t\t/** Width of the canvas in pixels (in its unzoomed state)\n\t\t* @type {number}*/\n\t\tthis.width = this.wrap[0]\n\t\t/** Height of the canvas in pixels (in its unzoomed state)\n\t\t* @type {number}*/\n\t\tthis.height = this.wrap[1]\n\n\t\tif( this.width == 0 || this.extents[0] < this.width ){\n\t\t\tthis.width = this.extents[0]\n\t\t}\n\t\tif( this.height == 0 || this.extents[1] < this.height ){\n\t\t\tthis.height = this.extents[1]\n\t\t}\n\n\t\tif( typeof document !== \"undefined\" ){\n\t\t\t/** @ignore */\n\t\t\tthis.el = document.createElement(\"canvas\")\n\t\t\tthis.el.width = this.width*this.zoom\n\t\t\tthis.el.height = this.height*this.zoom//extents[1]*this.zoom\n\t\t\tvar parent_element = (options && options.parentElement) || document.body\n\t\t\tparent_element.appendChild( this.el )\n\t\t} else {\n\t\t\tconst {createCanvas} = require(\"canvas\")\n\t\t\t/** @ignore */\n\t\t\tthis.el = createCanvas( this.width*this.zoom,\n\t\t\t\tthis.height*this.zoom )\n\t\t\t/** @ignore */\n\t\t\tthis.fs = require(\"fs\")\n\t\t}\n\n\t\t/** @ignore */\n\t\tthis.ctx = this.el.getContext(\"2d\")\n\t\tthis.ctx.lineWidth = .2\n\t\tthis.ctx.lineCap=\"butt\"\n\t}\n\n\n\t/* Several internal helper functions (used by drawing functions below) : */\n\t\n\t/** @private \n\t@ignore*/\n\tpxf( p ){\n\t\tthis.ctx.fillRect( this.zoom*p[0], this.zoom*p[1], this.zoom, this.zoom )\n\t}\n\n\t/** @private\n\t@ignore */\n\tpxfi( p ){\n\t\tconst dy = this.zoom*this.width\n\t\tconst off = (this.zoom*p[1]*dy + this.zoom*p[0])*4\n\t\tfor( let i = 0 ; i < this.zoom*4 ; i += 4 ){\n\t\t\tfor( let j = 0 ; j < this.zoom*dy*4 ; j += dy*4 ){\n\t\t\t\tthis.px[i+j+off] = this.col_r\n\t\t\t\tthis.px[i+j+off + 1] = this.col_g\n\t\t\t\tthis.px[i+j+off + 2] = this.col_b\n\t\t\t\tthis.px[i+j+off + 3] = 255\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @private\n\t@ignore */\n\tpxfir( p ){\n\t\tconst dy = this.zoom*this.width\n\t\tconst off = (p[1]*dy + p[0])*4\n\t\tthis.px[off] = this.col_r\n\t\tthis.px[off + 1] = this.col_g\n\t\tthis.px[off + 2] = this.col_b\n\t\tthis.px[off + 3] = 255\n\t}\n\n\t/** @private \n\t@ignore*/\n\tgetImageData(){\n\t\t/** @ignore */\n\t\tthis.image_data = this.ctx.getImageData(0, 0, this.width*this.zoom, this.height*this.zoom)\n\t\t/** @ignore */\n\t\tthis.px = this.image_data.data\n\t}\n\n\t/** @private \n\t@ignore*/\n\tputImageData(){\n\t\tthis.ctx.putImageData(this.image_data, 0, 0)\n\t}\n\n\t/** @private \n\t@ignore*/\n\tpxfnozoom( p ){\n\t\tthis.ctx.fillRect( this.zoom*p[0], this.zoom*p[1], 1, 1 )\n\t}\n\n\t/** draw a line left (l), right (r), down (d), or up (u) of pixel p \n\t@private \n\t@ignore */\n\tpxdrawl( p ){\n\t\tfor( let i = this.zoom*p[1] ; i < this.zoom*(p[1]+1) ; i ++ ){\n\t\t\tthis.pxfir( [this.zoom*p[0],i] )\n\t\t}\n\t}\n\n\t/** @private \n\t@ignore */\n\tpxdrawr( p ){\n\t\tfor( let i = this.zoom*p[1] ; i < this.zoom*(p[1]+1) ; i ++ ){\n\t\t\tthis.pxfir( [this.zoom*(p[0]+1),i] )\n\t\t}\n\t}\n\t/** @private \n\t@ignore */\n\tpxdrawd( p ){\n\t\tfor( let i = this.zoom*p[0] ; i < this.zoom*(p[0]+1) ; i ++ ){\n\t\t\tthis.pxfir( [i,this.zoom*(p[1]+1)] )\n\t\t}\n\t}\n\t/** @private \n\t@ignore */\n\tpxdrawu( p ){\n\t\tfor( let i = this.zoom*p[0] ; i < this.zoom*(p[0]+1) ; i ++ ){\n\t\t\tthis.pxfir( [i,this.zoom*p[1]] )\n\t\t}\n\t}\n\t\n\t/** For easier color naming \n\t@private\n\t@ignore */\n\tcol( hex ){\n\t\tthis.ctx.fillStyle=\"#\"+hex\n\t\t/** @ignore */\n\t\tthis.col_r = parseInt( hex.substr(0,2), 16 )\n\t\t/** @ignore */\n\t\tthis.col_g = parseInt( hex.substr(2,2), 16 )\n\t\t/** @ignore */\n\t\tthis.col_b = parseInt( hex.substr(4,2), 16 )\n\t}\n\n\t/** Color the whole grid in color [col], or in black if no argument is given.\n\t   * @param {string} col - Optional: hex code for the color to use. If left unspecified,\n\t   * it gets the default value of black (\"000000\").\n\t*/\n\tclear( col ){\n\t\tcol = col || \"000000\"\n\t\tthis.ctx.fillStyle=\"#\"+col\n\t\tthis.ctx.fillRect( 0,0, this.el.width, this.el.height )\n\t}\n\n\t/** Return the current drawing context.\n\t@return {RenderingContext} current drawing context on the canvas.\n\t*/\n\tcontext(){\n\t\treturn this.ctx\n\t}\n\t/** @private \n\t@ignore */\n\tp2pdraw( p ){\n\t\tvar dim\n\t\tfor( dim = 0; dim < p.length; dim++ ){\n\t\t\tif( this.wrap[dim] != 0 ){\n\t\t\t\tp[dim] = p[dim] % this.wrap[dim]\n\t\t\t}\n\t\t}\n\t\treturn p\n\t}\n\n\t/* DRAWING FUNCTIONS ---------------------- */\n\n\t/** Use to color a grid according to its values. High values are colored in a brighter\n\tred. \n   * @param {Grid2D or CoarseGrid} cc - Optional: the grid to draw values for. If left \n   * unspecified, the grid that was originally supplied to the constructor is used. \n   */\n\tdrawField( cc ){\n\t\tif( !cc ){\n\t\t\tcc = this.grid\n\t\t}\n\t\tlet maxval = 0\n\t\tfor( let i = 0 ; i < cc.extents[0] ; i ++ ){\n\t\t\tfor( let j = 0 ; j < cc.extents[1] ; j ++ ){\n\t\t\t\tlet p = Math.log(.1+cc.pixt([i,j]))\n\t\t\t\tif( maxval < p ){\n\t\t\t\t\tmaxval = p\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.getImageData()\n\t\tthis.col_g = 0\n\t\tthis.col_b = 0\n\t\tfor( let i = 0 ; i < cc.extents[0] ; i ++ ){\n\t\t\tfor( let j = 0 ; j < cc.extents[1] ; j ++ ){\n\t\t\t\tthis.col_r =  255*(Math.log(.1+cc.pixt( [i,j] ))/maxval)\n\t\t\t\tthis.pxfi([i,j])\n\t\t\t}\n\t\t}\n\t\tthis.putImageData()\n\t}\n\t/** Method for drawing the cell borders for a given cellkind in the color specified in \"col\"\n\t(hex format). This function draws a line around the cell (rather than coloring the\n\touter pixels). If [kind] is negative, simply draw all borders.\n   * @param {integer} kind - Integer specifying the cellkind to color. Should be a \n   * positive integer as 0 is reserved for the background.\n   * @param {string} col - Optional: hex code for the color to use. If left unspecified,\n   * it gets the default value of black (\"000000\").\n   * @see drawOnCellBorders to color the outer pixels of the cell.\n   */\n\tdrawCellBorders( kind, col ){\n\t\tcol = col || \"000000\"\n\t\tlet pc, pu, pd, pl, pr, pdraw\n\t\tthis.col( col )\n\t\tthis.getImageData()\n\t\t// cst contains indices of pixels at the border of cells\n\t\tfor( let x of this.C.cellBorderPixels() ){\n\t\t\tlet p = x[0]\n\t\t\tif( kind < 0 || this.C.cellKind(x[1]) == kind ){\n\t\t\t\tpdraw = this.p2pdraw( p )\n\n\t\t\t\tpc = this.C.pixt( [p[0],p[1]] )\n\t\t\t\tpr = this.C.pixt( [p[0]+1,p[1]] )\n\t\t\t\tpl = this.C.pixt( [p[0]-1,p[1]] )\t\t\n\t\t\t\tpd = this.C.pixt( [p[0],p[1]+1] )\n\t\t\t\tpu = this.C.pixt( [p[0],p[1]-1] )\n\n\t\t\t\tif( pc != pl  ){\n\t\t\t\t\tthis.pxdrawl( pdraw )\n\t\t\t\t}\n\t\t\t\tif( pc != pr ){\n\t\t\t\t\tthis.pxdrawr( pdraw )\n\t\t\t\t}\n\t\t\t\tif( pc != pd ){\n\t\t\t\t\tthis.pxdrawd( pdraw )\n\t\t\t\t}\n\t\t\t\tif( pc != pu ){\n\t\t\t\t\tthis.pxdrawu( pdraw )\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\tthis.putImageData()\n\t}\n\t\t\n\t/** Use to show activity values of the act model using a color gradient, for\n\t\tcells in the grid of cellkind \"kind\". \n\t\tThe constraint holding the activity values can be supplied as an \n\t\targument. Otherwise, the current CPM is searched for the first \n\t\tregistered activity constraint and that is then used.\n   @param {integer} kind - Integer specifying the cellkind to color. Should be a \n   positive integer as 0 is reserved for the background.\n   @param {ActivityConstraint or ActivityMultiBackground} A - the constraint object to use.\n   By default this is the first instance of an ActivityConstraint or ActivityMultiBackground\n   object found in the soft_constraints of the attached CPM.\n   */\n\tdrawActivityValues( kind, A ){\n\t\tif( !A ){\n\t\t\tfor( let c of this.C.soft_constraints ){\n\t\t\t\tif( c instanceof ActivityConstraint | c instanceof ActivityMultiBackground ){\n\t\t\t\t\tA = c; break\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif( !A ){\n\t\t\tthrow(\"Cannot find activity values to draw!\")\n\t\t}\n\t\t// cst contains the pixel ids of all non-background/non-stroma cells in\n\t\t// the grid. \n\t\tlet ii, sigma, a\n\t\t// loop over all pixels belonging to non-background, non-stroma\n\t\tthis.col(\"FF0000\")\n\t\tthis.getImageData()\n\t\tthis.col_b = 0\n\t\t//this.col_g = 0\n\t\tfor( let x of this.C.cellPixels() ){\n\t\t\tii = x[0]\n\t\t\tsigma = x[1]\n\n\t\t\t// For all pixels that belong to the current kind, compute\n\t\t\t// color based on activity values, convert to hex, and draw.\n\t\t\tif( this.C.cellKind(sigma) == kind ){\n\t\t\t\ta = A.pxact( this.C.grid.p2i( ii ) )/A.conf[\"MAX_ACT\"][kind]\n\t\t\t\tif( a > 0 ){\n\t\t\t\t\tif( a > 0.5 ){\n\t\t\t\t\t\tthis.col_r = 255\n\t\t\t\t\t\tthis.col_g = (2-2*a)*255\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.col_r = (2*a)*255\n\t\t\t\t\t\tthis.col_g = 255\n\t\t\t\t\t}\n\t\t\t\t\tthis.pxfi( ii )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.putImageData()\n\t}\n\t\t\t\n\t/** Color outer pixel of all cells of kind [kind] in col [col].\n   @param {integer} kind - Integer specifying the cellkind to color. Should be a \n   positive integer as 0 is reserved for the background.\n   @param {string} col - Optional: hex code for the color to use. If left unspecified,\n   it gets the default value of black (\"000000\").\n   @see drawCellBorders to actually draw around the cell rather than coloring the\n   outer pixels.\n   */\n\tdrawOnCellBorders( kind, col ){\n\t\tcol = col || \"000000\"\n\t\tthis.getImageData()\n\t\tthis.col( col )\n\t\tfor( let p of this.C.cellBorderPixels() ){\n\t\t\tif( kind < 0 || this.C.cellKind(p[1]) == kind ){\n\t\t\t\tif( typeof col == \"function\" ){\n\t\t\t\t\tthis.col( col(p[1]) )\n\t\t\t\t}\n\t\t\t\tthis.pxfi( p[0] )\n\t\t\t}\n\t\t}\n\t\tthis.putImageData()\n\t}\n\n\n\t/** Draw all cells of cellkind \"kind\" in color col (hex). \n   @param {integer} kind - Integer specifying the cellkind to color. Should be a \n   positive integer as 0 is reserved for the background.\n   @param {string/function} col - Optional: hex code for the color to use. If left unspecified,\n   it gets the default value of black (\"000000\"). col can also be a function that\n\treturns a hex value for a cell id.\n   */\n\tdrawCells( kind, col ){\n\t\tif( ! col ){\n\t\t\tcol = \"000000\"\n\t\t}\n\t\tif( typeof col == \"string\" ){\n\t\t\tthis.col(col)\n\t\t}\n\t\t// Object cst contains pixel index of all pixels belonging to non-background,\n\t\t// non-stroma cells.\n\n\t\tlet cellpixelsbyid = this.C.getStat( PixelsByCell )\n\n\t\t/*for( let x of this.C.pixels() ){\n\t\t\tif( kind < 0 || this.C.cellKind(x[1]) == kind ){\n\t\t\t\tif( !cellpixelsbyid[x[1]] ){\n\t\t\t\t\tcellpixelsbyid[x[1]] = []\n\t\t\t\t}\n\t\t\t\tcellpixelsbyid[x[1]].push( x[0] )\n\t\t\t}\n\t\t}*/\n\n\t\tthis.getImageData()\n\t\tfor( let cid of Object.keys( cellpixelsbyid ) ){\n\t\t\tif( kind < 0 || this.C.cellKind(cid) == kind ){\n\t\t\t\tif( typeof col == \"function\" ){\n\t\t\t\t\tthis.col( col(cid) )\n\t\t\t\t}\n\t\t\t\tfor( let cp of cellpixelsbyid[cid] ){\n\t\t\t\t\tthis.pxfi( cp )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.putImageData()\n\t}\n\n\t/** Draw grid to the png file \"fname\". \n\t@param {string} fname Path to the file to write. Any parent folders in this path must\n\talready exist.*/\n\twritePNG( fname ){\n\t\n\t\ttry {\n\t\t\tthis.fs.writeFileSync(fname, this.el.toBuffer())\n\t\t}\n\t\tcatch (err) {\n\t\t\tif (err.code === \"ENOENT\") {\n\t\t\t\tlet message = \"Canvas.writePNG: cannot write to file \" + fname + \n\t\t\t\t\t\", are you sure the directory exists?\"\n\t\t\t\tthrow(message)\n\t\t\t}\n\t\t}\n\t\n\t}\n}\n\nexport default Canvas\n\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/Canvas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Canvas",
    "memberof": "src/Canvas.js",
    "static": true,
    "longname": "src/Canvas.js~Canvas",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/Canvas.js",
    "importStyle": "Canvas",
    "description": "Class for taking a CPM grid and displaying it in either browser or with nodejs.\nNote: when using this class from outside the module, you don't need to import it\nseparately but can access it from CPM.Canvas.",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#constructor",
    "access": "public",
    "description": "The Canvas constructor accepts a CPM object C or a Grid2D object.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "GridBasedModel/Grid2D/CoarseGrid"
        ],
        "spread": false,
        "optional": false,
        "name": "C",
        "description": "the object to draw, which is\neither an object of class GridBasedModel (either CPM or CA), or a grid (Grid2D or\nCoarseGrid)."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Configuration settings, containing: \"zoom\" (positive number specifying\nthe zoom level to draw with.)"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "C",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#C",
    "access": "public",
    "description": "The underlying model that is drawn on the canvas.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "GridBasedModel"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "extents",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#extents",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "grid",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#grid",
    "access": "public",
    "description": "The underlying grid that is drawn on the canvas.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Grid2D/CoarseGrid"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "zoom",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#zoom",
    "access": "public",
    "description": "Zoom level to draw the canvas with, set to options.zoom or its default value 1.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "wrap",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#wrap",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "width",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#width",
    "access": "public",
    "description": "Width of the canvas in pixels (in its unzoomed state)",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "height",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#height",
    "access": "public",
    "description": "Height of the canvas in pixels (in its unzoomed state)",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "el",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#el",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "fs",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#fs",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "ctx",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#ctx",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "pxf",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#pxf",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "ignore": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "pxfi",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#pxfi",
    "access": "private",
    "description": null,
    "lineNumber": 93,
    "ignore": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "pxfir",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#pxfir",
    "access": "private",
    "description": null,
    "lineNumber": 108,
    "ignore": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "getImageData",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#getImageData",
    "access": "private",
    "description": null,
    "lineNumber": 119,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "image_data",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#image_data",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "px",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#px",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "putImageData",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#putImageData",
    "access": "private",
    "description": null,
    "lineNumber": 128,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "pxfnozoom",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#pxfnozoom",
    "access": "private",
    "description": null,
    "lineNumber": 134,
    "ignore": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "pxdrawl",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#pxdrawl",
    "access": "private",
    "description": "draw a line left (l), right (r), down (d), or up (u) of pixel p ",
    "lineNumber": 141,
    "ignore": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "pxdrawr",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#pxdrawr",
    "access": "private",
    "description": null,
    "lineNumber": 149,
    "ignore": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "pxdrawd",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#pxdrawd",
    "access": "private",
    "description": null,
    "lineNumber": 156,
    "ignore": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "pxdrawu",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#pxdrawu",
    "access": "private",
    "description": null,
    "lineNumber": 163,
    "ignore": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "col",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#col",
    "access": "private",
    "description": "For easier color naming ",
    "lineNumber": 172,
    "ignore": true,
    "params": [
      {
        "name": "hex",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "col_r",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#col_r",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "col_g",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#col_g",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "col_b",
    "memberof": "src/Canvas.js~Canvas",
    "static": false,
    "longname": "src/Canvas.js~Canvas#col_b",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "clear",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#clear",
    "access": "public",
    "description": "Color the whole grid in color [col], or in black if no argument is given.",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "Optional: hex code for the color to use. If left unspecified,\nit gets the default value of black (\"000000\")."
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "context",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#context",
    "access": "public",
    "description": "Return the current drawing context.",
    "lineNumber": 195,
    "return": {
      "nullable": null,
      "types": [
        "RenderingContext"
      ],
      "spread": false,
      "description": "current drawing context on the canvas."
    },
    "params": []
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "p2pdraw",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#p2pdraw",
    "access": "private",
    "description": null,
    "lineNumber": 200,
    "ignore": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "drawField",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#drawField",
    "access": "public",
    "description": "Use to color a grid according to its values. High values are colored in a brighter\nred. ",
    "lineNumber": 217,
    "params": [
      {
        "nullable": null,
        "types": [
          "Grid2D or CoarseGrid"
        ],
        "spread": false,
        "optional": false,
        "name": "cc",
        "description": "Optional: the grid to draw values for. If left \nunspecified, the grid that was originally supplied to the constructor is used."
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "drawCellBorders",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#drawCellBorders",
    "access": "public",
    "description": "Method for drawing the cell borders for a given cellkind in the color specified in \"col\"\n(hex format). This function draws a line around the cell (rather than coloring the\nouter pixels). If [kind] is negative, simply draw all borders.",
    "see": [
      "drawOnCellBorders to color the outer pixels of the cell."
    ],
    "lineNumber": 250,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "kind",
        "description": "Integer specifying the cellkind to color. Should be a \npositive integer as 0 is reserved for the background."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "Optional: hex code for the color to use. If left unspecified,\nit gets the default value of black (\"000000\")."
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "drawActivityValues",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#drawActivityValues",
    "access": "public",
    "description": "Use to show activity values of the act model using a color gradient, for\ncells in the grid of cellkind \"kind\". \nThe constraint holding the activity values can be supplied as an \nargument. Otherwise, the current CPM is searched for the first \nregistered activity constraint and that is then used.",
    "lineNumber": 296,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "kind",
        "description": "Integer specifying the cellkind to color. Should be a \npositive integer as 0 is reserved for the background."
      },
      {
        "nullable": null,
        "types": [
          "ActivityConstraint or ActivityMultiBackground"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": "the constraint object to use.\nBy default this is the first instance of an ActivityConstraint or ActivityMultiBackground\nobject found in the soft_constraints of the attached CPM."
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "drawOnCellBorders",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#drawOnCellBorders",
    "access": "public",
    "description": "Color outer pixel of all cells of kind [kind] in col [col].",
    "see": [
      "drawCellBorders to actually draw around the cell rather than coloring the\nouter pixels."
    ],
    "lineNumber": 346,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "kind",
        "description": "Integer specifying the cellkind to color. Should be a \npositive integer as 0 is reserved for the background."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "Optional: hex code for the color to use. If left unspecified,\nit gets the default value of black (\"000000\")."
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "drawCells",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#drawCells",
    "access": "public",
    "description": "Draw all cells of cellkind \"kind\" in color col (hex). ",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "kind",
        "description": "Integer specifying the cellkind to color. Should be a \npositive integer as 0 is reserved for the background."
      },
      {
        "nullable": null,
        "types": [
          "string/function"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "Optional: hex code for the color to use. If left unspecified,\nit gets the default value of black (\"000000\"). col can also be a function that\nreturns a hex value for a cell id."
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "writePNG",
    "memberof": "src/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Canvas.js~Canvas#writePNG",
    "access": "public",
    "description": "Draw grid to the png file \"fname\". ",
    "lineNumber": 407,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fname",
        "description": "Path to the file to write. Any parent folders in this path must\nalready exist."
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/DiceSet.js",
    "content": "\n\n\"use strict\"\n\n// pass in RNG\n\n/** This class implements a data structure with constant-time insertion, deletion, and random\n    sampling. That's crucial for the CPM metropolis algorithm, which repeatedly needs to sample\n    pixels at cell borders. */\nclass DiceSet{\n\n\t/** The constructor of class DiceSet takes a MersenneTwister object as input, to allow\n\tseeding of the random number generator used for random sampling.\n\t@param {MersenneTwister} mt MersenneTwister object used for random numbers.*/\n\tconstructor( mt ) {\n\n\t\t/** Object or hash map used to check in constant time whether a pixel is at the\n\t\tcell border. Keys are the actual values stored in the DiceSet, numbers are their\n\t\tlocation in the elements arrray.\n\t\tCurrently (Mar 6, 2019), it seems that vanilla objects perform BETTER than ES6 maps,\n\t\tat least in nodejs. This is weird given that in vanilla objects, all keys are \n\t\tconverted to strings, which does not happen for Maps.\n\t\t@type {object}\n\t\t*/\n\t\tthis.indices = {} //new Map() // {}\n\t\t//this.indices = {}\n\n\t\t/** Use an array for constant time random sampling of pixels at the border of cells.\n\t\t@type {array} */\n\t\tthis.elements = []\n\n\t\t/** The number of elements currently present in the DiceSet. \n\t\t@type {number}\n\t\t*/\n\t\tthis.length = 0\n\n\t\t/** @ignore */\n\t\tthis.mt = mt\n\t}\n\n\t/** Insert a new element. It is added as an index in the indices, and pushed\n\tto the end of the elements array.\n\t@param {unique ID} v The element to add. Can be a number or a string, but it must be\n\tunique as it should also be a unique identifier in the indices object.\n\t*/\n\tinsert( v ){\n\t\tif( this.indices[v] ){\n\t\t\treturn\n\t\t}\n\t\t// Add element to both the hash map and the array.\n\t\t//this.indices.set( v, this.length )\n\t\tthis.indices[v] = this.length\n\t\n\t\tthis.elements.push( v )\n\t\tthis.length ++ \n\t}\n\n\t/** Remove element v.\n\t@param {unique ID} v The element to remove. Can be a number or a string, but it must be\n\tunique as it should also be a unique identifier in the indices object (which is used\n\tto remove it).\n\t*/\n\tremove( v ){\n\t\t// Check whether element is present before it can be removed.\n\t\tif( !this.indices[v] ){\n\t\t\treturn\n\t\t}\n\t\t/* The hash map gives the index in the array of the value to be removed.\n\t\tThe value is removed directly from the hash map, but from the array we\n\t\tinitially remove the last element, which we then substitute for the \n\t\telement that should be removed.*/\n\t\t//const i = this.indices.get(v)\n\t\tconst i = this.indices[v]\n\n\t\t//this.indices.delete(v)\n\t\tdelete this.indices[v]\n\n\t\tconst e = this.elements.pop()\n\t\tthis.length --\n\t\tif( e == v ){\n\t\t\treturn\n\t\t}\n\t\tthis.elements[i] = e\n\n\t\t//this.indices.set(e,i)\n\t\tthis.indices[e] = i\n\t}\n\t/** Check if the DiceSet already contains element v. \n\t@param {unique ID} v The element to check presence of. Can be a number or a string, but it must be\n\tunique as it should also be a unique identifier in the indices object.\n\t@return {boolean} true or false depending on whether the element is present or not.\n\t*/\n\tcontains( v ){\n\t\t//return this.indices.has(v)\n\t\treturn (v in this.indices)\n\t}\n\t\n\t/** Sample a random element from v.\n\t@return {unique ID} the element sampled.\n\t*/\n\tsample(){\n\t\treturn this.elements[Math.floor(this.mt.rnd()*this.length)]\n\t}\n}\n\nexport default DiceSet\n\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/DiceSet.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "class",
    "name": "DiceSet",
    "memberof": "src/DiceSet.js",
    "static": true,
    "longname": "src/DiceSet.js~DiceSet",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/DiceSet.js",
    "importStyle": "DiceSet",
    "description": "This class implements a data structure with constant-time insertion, deletion, and random\nsampling. That's crucial for the CPM metropolis algorithm, which repeatedly needs to sample\npixels at cell borders.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 100,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/DiceSet.js~DiceSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DiceSet.js~DiceSet#constructor",
    "access": "public",
    "description": "The constructor of class DiceSet takes a MersenneTwister object as input, to allow\nseeding of the random number generator used for random sampling.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "MersenneTwister"
        ],
        "spread": false,
        "optional": false,
        "name": "mt",
        "description": "MersenneTwister object used for random numbers."
      }
    ]
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "indices",
    "memberof": "src/DiceSet.js~DiceSet",
    "static": false,
    "longname": "src/DiceSet.js~DiceSet#indices",
    "access": "public",
    "description": "Object or hash map used to check in constant time whether a pixel is at the\ncell border. Keys are the actual values stored in the DiceSet, numbers are their\nlocation in the elements arrray.\nCurrently (Mar 6, 2019), it seems that vanilla objects perform BETTER than ES6 maps,\nat least in nodejs. This is weird given that in vanilla objects, all keys are \nconverted to strings, which does not happen for Maps.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "elements",
    "memberof": "src/DiceSet.js~DiceSet",
    "static": false,
    "longname": "src/DiceSet.js~DiceSet#elements",
    "access": "public",
    "description": "Use an array for constant time random sampling of pixels at the border of cells.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "length",
    "memberof": "src/DiceSet.js~DiceSet",
    "static": false,
    "longname": "src/DiceSet.js~DiceSet#length",
    "access": "public",
    "description": "The number of elements currently present in the DiceSet. ",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "mt",
    "memberof": "src/DiceSet.js~DiceSet",
    "static": false,
    "longname": "src/DiceSet.js~DiceSet#mt",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "insert",
    "memberof": "src/DiceSet.js~DiceSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DiceSet.js~DiceSet#insert",
    "access": "public",
    "description": "Insert a new element. It is added as an index in the indices, and pushed\nto the end of the elements array.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "unique ID"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The element to add. Can be a number or a string, but it must be\nunique as it should also be a unique identifier in the indices object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "remove",
    "memberof": "src/DiceSet.js~DiceSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DiceSet.js~DiceSet#remove",
    "access": "public",
    "description": "Remove element v.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "unique ID"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The element to remove. Can be a number or a string, but it must be\nunique as it should also be a unique identifier in the indices object (which is used\nto remove it)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "contains",
    "memberof": "src/DiceSet.js~DiceSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DiceSet.js~DiceSet#contains",
    "access": "public",
    "description": "Check if the DiceSet already contains element v. ",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "unique ID"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The element to check presence of. Can be a number or a string, but it must be\nunique as it should also be a unique identifier in the indices object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true or false depending on whether the element is present or not."
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "sample",
    "memberof": "src/DiceSet.js~DiceSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DiceSet.js~DiceSet#sample",
    "access": "public",
    "description": "Sample a random element from v.",
    "lineNumber": 101,
    "return": {
      "nullable": null,
      "types": [
        "unique ID"
      ],
      "spread": false,
      "description": "the element sampled."
    },
    "params": []
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "src/Stats.js",
    "content": "/** Class for outputting various statistics from a CPM simulation, as for instance\n    the centroids of all cells (which is actually the only thing that's implemented\n    so far) */\n\nclass Stats {\n\tconstructor( C ){\n\t\tthis.C = C\n\t\tthis.ndim = this.C.ndim\n\t}\n\n\t// ------------  FRC NETWORK \n\n\t// for simulation on FRC network. Returns all cells that are in contact with\n\t// a stroma cell.\n\tcellsOnNetwork(){\n\t\tvar px = this.C.cellborderpixels.elements, i,j, N, r = {}, t\n\t\tfor( i = 0 ; i < px.length ; i ++ ){\n\t\t\tt = this.C.pixti( px[i] )\n\t\t\tif( r[t] ) continue\n\t\t\tN = this.C.neighi(  px[i] )\n\t\t\tfor( j = 0 ; j < N.length ; j ++ ){\n\t\t\t\tif( this.C.pixti( N[j] ) < 0 ){\n\t\t\t\t\tr[t]=1; break\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn r\n\t}\n\t\n\t\n\t// ------------  CELL LENGTH IN ONE DIMENSION\n\t// (this does not work with a grid torus).\n\t\t\n\t// For computing mean and variance with online algorithm\n\tupdateOnline( aggregate, value ){\n\t\t\n\t\tvar delta, delta2\n\n\t\taggregate.count ++\n\t\tdelta = value - aggregate.mean\n\t\taggregate.mean += delta/aggregate.count\n\t\tdelta2 = value - aggregate.mean\n\t\taggregate.sqd += delta*delta2\n\n\t\treturn aggregate\n\t}\n\n\tnewOnline(){\n\t\treturn( { count : 0, mean : 0, sqd : 0 } ) \n\t}\n\t// return mean and variance of coordinates in a given dimension for cell t\n\t// (dimension as 0,1, or 2)\n\tcellStats( t, dim ){\n\n\t\tvar aggregate, cpt, j, stats\n\n\t\t// the cellpixels object can be given as the third argument\n\t\tif( arguments.length == 3){\n\t\t\tcpt = arguments[2][t]\n\t\t} else {\n\t\t\tcpt = this.cellpixels()[t]\n\t\t}\n\n\t\t// compute using online algorithm\n\t\taggregate = this.newOnline()\n\n\t\t// loop over pixels to update the aggregate\n\t\tfor( j = 0; j < cpt.length; j++ ){\n\t\t\taggregate = this.updateOnline( aggregate, cpt[j][dim] )\n\t\t}\n\n\t\t// get mean and variance\n\t\tstats = { mean : aggregate.mean, variance : aggregate.sqd / ( aggregate.count - 1 ) }\n\t\treturn stats\n\t}\n\n\t// get the length (variance) of cell in a given dimension\n\t// does not work with torus!\n\tgetLengthOf( t, dim ){\n\t\t\n\t\t// get mean and sd in x direction\n\t\tvar stats = this.cellStats( t, dim )\n\t\treturn stats.variance\n\n\t}\n\n\t// get the range of coordinates in dim for cell t\n\t// does not work with torus!\n\tgetRangeOf( t, dim ){\n\n\t\tvar minc, maxc, cpt, j\n\n\t\t// the cellpixels object can be given as the third argument\n\t\tif( arguments.length == 3){\n\t\t\tcpt = arguments[2][t]\n\t\t} else {\n\t\t\tcpt = this.cellpixels()[t]\n\t\t}\n\n\t\t// loop over pixels to find min and max\n\t\tminc = cpt[0][dim]\n\t\tmaxc = cpt[0][dim]\n\t\tfor( j = 1; j < cpt.length; j++ ){\n\t\t\tif( cpt[j][dim] < minc ) minc = cpt[j][dim]\n\t\t\tif( cpt[j][dim] > maxc ) maxc = cpt[j][dim]\n\t\t}\n\t\t\n\t\treturn( maxc - minc )\t\t\n\n\t}\n\t\n\t// ------------  CONNECTEDNESS OF CELLS\n\t// ( compatible with torus )\n\t\n\t// Compute connected components of the cell ( to check connectivity )\n\tgetConnectedComponentOfCell( t, cellindices ){\n\t\tif( cellindices.length == 0 ){ return }\n\n\t\tvar visited = {}, k=1, volume = {}, myself = this\n\n\t\tvar labelComponent = function(seed, k){\n\t\t\tvar q = [parseInt(seed)]\n\t\t\tvisited[q[0]] = 1\n\t\t\tvolume[k] = 0\n\t\t\twhile( q.length > 0 ){\n\t\t\t\tvar e = parseInt(q.pop())\n\t\t\t\tvolume[k] ++\n\t\t\t\tvar ne = myself.C.neighi( e )\n\t\t\t\tfor( var i = 0 ; i < ne.length ; i ++ ){\n\t\t\t\t\tif( myself.C.pixti( ne[i] ) == t &&\n\t\t\t\t\t\t!visited.hasOwnProperty(ne[i]) ){\n\t\t\t\t\t\tq.push(ne[i])\n\t\t\t\t\t\tvisited[ne[i]]=1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor( var i = 0 ; i < cellindices.length ; i ++ ){\n\t\t\tif( !visited.hasOwnProperty( cellindices[i] ) ){\n\t\t\t\tlabelComponent( cellindices[i], k )\n\t\t\t\tk++\n\t\t\t}\n\t\t}\n\n\t\treturn volume\n\t}\n\n\tgetConnectedComponents(){\n\t\n\t\tlet cpi\n\t\n\t\tif( arguments.length == 1 ){\n\t\t\tcpi = arguments[0]\n\t\t} else {\n\t\t\tcpi = this.cellpixelsi()\n\t\t}\n\n\t\tconst tx = Object.keys( cpi )\n\t\tlet i, volumes = {}\n\t\tfor( i = 0 ; i < tx.length ; i ++ ){\n\t\t\tvolumes[tx[i]] = this.getConnectedComponentOfCell( tx[i], cpi[tx[i]] )\n\t\t}\n\t\treturn volumes\n\t}\n\t\n\t// Compute probabilities that two pixels taken at random come from the same cell.\n\tgetConnectedness(){\n\t\n\t\tlet cpi\n\t\n\t\tif( arguments.length == 1 ){\n\t\t\tcpi = arguments[0]\n\t\t} else {\n\t\t\tcpi = this.cellpixelsi()\n\t\t}\n\t\n\t\tconst v = this.getConnectedComponents( cpi )\n\t\tlet s = {}, r = {}, i, j\n\t\tfor( i in v ){\n\t\t\ts[i] = 0\n\t\t\tr[i] = 0\n\t\t\tfor( j in v[i] ){\n\t\t\t\ts[i] += v[i][j]\n\t\t\t}\n\t\t\tfor( j in v[i] ){\n\t\t\t\tr[i] += (v[i][j]/s[i]) * (v[i][j]/s[i])\n\t\t\t}\n\t\t}\n\t\treturn r\n\t}\t\n\t\n\t// ------------  PROTRUSION ANALYSIS: PERCENTAGE ACTIVE / ORDER INDEX \n\t// ( compatible with torus )\n\t\n\t// Compute percentage of pixels with activity > threshold\n\tgetPercentageActOfCell( t, cellindices, threshold ){\n\t\tif( cellindices.length == 0 ){ return }\n\t\tvar i, count = 0\n\n\t\tfor( i = 0 ; i < cellindices.length ; i ++ ){\n\t\t\tif( this.C.pxact( cellindices[i] ) > threshold ){\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t\treturn 100*(count/cellindices.length)\n\t\n\t}\n\n\tgetPercentageAct( threshold ){\n\t\n\t\tlet cpi\n\t\n\t\tif( arguments.length == 2 ){\n\t\t\tcpi = arguments[1]\n\t\t} else {\n\t\t\tcpi = this.cellpixelsi()\n\t\t}\n\t\n\t\tconst tx = Object.keys( cpi )\n\t\tlet i, activities = {}\n\t\tfor( i = 0 ; i < tx.length ; i ++ ){\n\t\t\tactivities[tx[i]] = this.getPercentageActOfCell( tx[i], cpi[tx[i]], threshold )\n\t\t}\n\t\treturn activities\n\t\n\t}\n\n\t// Computing an order index of the activity gradients within the cell.\n\tgetGradientAt( t, i ){\n\t\n\t\tvar gradient = []\n\t\t\n\t\t// for computing index of neighbors in x,y,z dimension:\n\t\tvar diff = [1, this.C.dy, this.C.dz ] \n\t\t\n\t\tvar d, neigh1, neigh2, t1, t2, ai = this.C.pxact( i ), terms = 0\n\t\t\n\t\tfor( d = 0; d < this.C.ndim; d++ ){\n\t\t\t// get the two neighbors and their types\n\t\t\tneigh1 = i - diff[d]\n\t\t\tneigh2 = i + diff[d]\n\t\t\tt1 = this.C.cellpixelstype[ neigh1 ]\n\t\t\tt2 = this.C.cellpixelstype[ neigh2 ]\n\t\t\t\n\t\t\t// start with a zero gradient\n\t\t\tgradient[d] = 0.00\n\t\t\t\n\t\t\t// we will average the difference with the left and right neighbor only if both\n\t\t\t// belong to the same cell. If only one neighbor belongs to the same cell, we\n\t\t\t// use that difference. If neither belongs to the same cell, the gradient\n\t\t\t// stays zero.\n\t\t\tif( t == t1 ){\n\t\t\t\tgradient[d] += ( ai - this.C.pxact( neigh1 ) )\n\t\t\t\tterms++\n\t\t\t}\n\t\t\tif( t == t2 ){\n\t\t\t\tgradient[d] += ( this.C.pxact( neigh2 ) - ai )\n\t\t\t\tterms++\n\t\t\t}\n\t\t\tif( terms != 0 ){\n\t\t\t\tgradient[d] = gradient[d] / terms\n\t\t\t}\t\t\n\t\t\t\t\t\t\n\t\t}\n\t\t\n\t\treturn gradient\n\t\t\n\t}\n\n\t// compute the norm of a vector (in array form)\n\tnorm( v ){\n\t\tvar i\n\t\tvar norm = 0\n\t\tfor( i = 0; i < v.length; i++ ){\n\t\t\tnorm += v[i]*v[i]\n\t\t}\n\t\tnorm = Math.sqrt( norm )\n\t\treturn norm\n\t}\n\n\tgetOrderIndexOfCell( t, cellindices ){\n\t\n\t\tif( cellindices.length == 0 ){ return }\n\t\t\n\t\t// create an array to store the gradient in. Fill it with zeros for all dimensions.\n\t\tvar gradientsum = [], d\n\t\tfor( d = 0; d < this.C.ndim; d++ ){\n\t\t\tgradientsum.push(0.0)\n\t\t}\n\t\t\n\t\t// now loop over the cellindices and add gi/norm(gi) to the gradientsum for each\n\t\t// non-zero local gradient:\n\t\tvar j\n\t\tfor( j = 0; j < cellindices.length; j++ ){\n\t\t\tvar g = this.getGradientAt( t, cellindices[j] )\n\t\t\tvar gn = this.norm( g )\n\t\t\t// we only consider non-zero gradients for the order index\n\t\t\tif( gn != 0 ){\n\t\t\t\tfor( d = 0; d < this.C.ndim; d++ ){\n\t\t\t\t\tgradientsum[d] += 100*g[d]/gn/cellindices.length\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t// finally, return the norm of this summed vector\n\t\tvar orderindex = this.norm( gradientsum )\n\t\treturn orderindex\t\n\t}\n\n\tgetOrderIndices( ){\n\t\tvar cpi = this.cellborderpixelsi()\n\t\tvar tx = Object.keys( cpi ), i, orderindices = {}\n\t\tfor( i = 0 ; i < tx.length ; i ++ ){\n\t\t\torderindices[tx[i]] = this.getOrderIndexOfCell( tx[i], cpi[tx[i]] )\n\t\t}\n\t\treturn orderindices\n\t\n\t}\n\t\n\n\t// returns a list of all cell ids of the cells that border to \"cell\" and are of a different type\n\t// a dictionairy with keys = neighbor cell ids, and \n\t// values = number of \"cell\"-pixels the neighbor cell borders to\n\tcellNeighborsList( cell, cbpi ) {\n\t\tif (!cbpi) {\n\t\t\tcbpi = this.cellborderpixelsi()[cell]\n\t\t} else {\n\t\t\tcbpi = cbpi[cell]\n\t\t}\n\t\tlet neigh_cell_amountborder = {}\n\t\t//loop over border pixels of cell\n\t\tfor ( let cellpix = 0; cellpix < cbpi.length; cellpix++ ) {\n\t\t\t//get neighbouring pixels of borderpixel of cell\n\t\t\tlet neighbours_of_borderpixel_cell = this.C.neighi(cbpi[cellpix])\n\t\t\t//don't add a pixel in cell more than twice\n\t\t\t//loop over neighbouring pixels and store the parent cell if it is different from\n\t\t\t//cell, add or increment the key corresponding to the neighbor in the dictionairy\n\t\t\tfor ( let neighborpix = 0; neighborpix < neighbours_of_borderpixel_cell.length;\n\t\t\t\tneighborpix ++ ) {\n\t\t\t\tlet cell_id = this.C.pixti(neighbours_of_borderpixel_cell[neighborpix])\n\t\t\t\tif (cell_id != cell) {\n\t\t\t\t\tneigh_cell_amountborder[cell_id] = neigh_cell_amountborder[cell_id]+1 || 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn neigh_cell_amountborder\n\t}\n\n\t// ------------ HELPER FUNCTIONS\n\t\n\t// TODO all helper functions have been removed from this class.\n\t// We should only access cellpixels through the \"official\" interface\n\t// in the CPM class.\n\t\n}\n\n\nexport default Stats\n\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/Stats.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "Stats",
    "memberof": "src/Stats.js",
    "static": true,
    "longname": "src/Stats.js~Stats",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/Stats.js",
    "importStyle": "Stats",
    "description": "Class for outputting various statistics from a CPM simulation, as for instance\nthe centroids of all cells (which is actually the only thing that's implemented\nso far)",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 111,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "C",
    "memberof": "src/Stats.js~Stats",
    "static": false,
    "longname": "src/Stats.js~Stats#C",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "ndim",
    "memberof": "src/Stats.js~Stats",
    "static": false,
    "longname": "src/Stats.js~Stats#ndim",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "cellsOnNetwork",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#cellsOnNetwork",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "updateOnline",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#updateOnline",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "aggregate",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "newOnline",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#newOnline",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"count\": *, \"mean\": *, \"sqd\": *}"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "cellStats",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#cellStats",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "dim",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "getLengthOf",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#getLengthOf",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "dim",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "getRangeOf",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#getRangeOf",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "dim",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "getConnectedComponentOfCell",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#getConnectedComponentOfCell",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "cellindices",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "getConnectedComponents",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#getConnectedComponents",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "getConnectedness",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#getConnectedness",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "getPercentageActOfCell",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#getPercentageActOfCell",
    "access": "public",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "cellindices",
        "types": [
          "*"
        ]
      },
      {
        "name": "threshold",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "getPercentageAct",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#getPercentageAct",
    "access": "public",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [
      {
        "name": "threshold",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "getGradientAt",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#getGradientAt",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "norm",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#norm",
    "access": "public",
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "params": [
      {
        "name": "v",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "getOrderIndexOfCell",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#getOrderIndexOfCell",
    "access": "public",
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "cellindices",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "getOrderIndices",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#getOrderIndices",
    "access": "public",
    "description": null,
    "lineNumber": 312,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "cellNeighborsList",
    "memberof": "src/Stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Stats.js~Stats#cellNeighborsList",
    "access": "public",
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "params": [
      {
        "name": "cell",
        "types": [
          "*"
        ]
      },
      {
        "name": "cbpi",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/grid/CoarseGrid.js",
    "content": "/* This class encapsulates a lower-resolution grid and makes it\n   visible as a higher-resolution grid. Only exact subsampling by\n   a constant factor per dimension is supported. \n\t*/\n\nclass CoarseGrid {\n\tconstructor( grid, upscale = 3 ){\n\t\tthis.extents = new Array( grid.extents.length )\n\t\tfor( let i = 0 ; i < grid.extents.length ; i++ ){\n\t\t\tthis.extents[i] = upscale * grid.extents[i]\n\t\t}\n\t\tthis.grid = grid\n\t\tthis.upscale = upscale\n\t}\n\n\tpixt( p ){\n\t\t// 2D bilinear interpolation\n\t\tlet l = ~~(p[0] / this.upscale)\n\t\tlet r = l+1\n\t\tif( r > this.grid.extents[0] ){\n\t\t\tr = this.grid.extents[0]\n\t\t}\n\t\tlet t = ~~(p[1] / this.upscale)\n\t\tlet b = t+1\n\t\tif( b > this.grid.extents[1] ){\n\t\t\tb = this.grid.extents[1]\n\t\t}\n\n\t\tlet f_lt = this.grid.pixt([l,t])\n\t\tlet f_rt = this.grid.pixt([r,t])\n\t\tlet f_lb = this.grid.pixt([l,b])\n\t\tlet f_rb = this.grid.pixt([r,b])\n\n\t\tlet h = (p[0] % this.upscale) / this.upscale\n\t\tlet f_x_b = f_lb * (1-h) + f_rb * h \n\t\tlet f_x_t = f_lt * (1-h) + f_rt * h\n\n\t\tlet v = (p[1] % this.upscale) / this.upscale\n\t\treturn f_x_t*(1-v) + f_x_b * v\n\t}\n\n\t/*gradient( p ){\n\t\tlet ps = new Array( p.length )\n\t\tfor( let i = 0 ; i < p.length ; i ++ ){\n\t\t\tps[i] = ~~(p[i]/this.upscale)\n\t\t}\n\t\treturn this.grid.gradient( ps )\n\t}*/\n}\n\nexport default CoarseGrid\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/grid/CoarseGrid.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "class",
    "name": "CoarseGrid",
    "memberof": "src/grid/CoarseGrid.js",
    "static": true,
    "longname": "src/grid/CoarseGrid.js~CoarseGrid",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/grid/CoarseGrid.js",
    "importStyle": "CoarseGrid",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 132,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/grid/CoarseGrid.js~CoarseGrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/CoarseGrid.js~CoarseGrid#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "extents",
    "memberof": "src/grid/CoarseGrid.js~CoarseGrid",
    "static": false,
    "longname": "src/grid/CoarseGrid.js~CoarseGrid#extents",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "grid",
    "memberof": "src/grid/CoarseGrid.js~CoarseGrid",
    "static": false,
    "longname": "src/grid/CoarseGrid.js~CoarseGrid#grid",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "upscale",
    "memberof": "src/grid/CoarseGrid.js~CoarseGrid",
    "static": false,
    "longname": "src/grid/CoarseGrid.js~CoarseGrid#upscale",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "pixt",
    "memberof": "src/grid/CoarseGrid.js~CoarseGrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/CoarseGrid.js~CoarseGrid#pixt",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/grid/Grid.js",
    "content": "\nclass Grid {\n\tconstructor( field_size, torus = true ){\n\t\tthis.extents = field_size\n\t\tthis.torus = torus\n\t\tthis.X_BITS = 1+Math.floor( Math.log2( this.extents[0] - 1 ) )\n\t\tthis.Y_BITS = 1+Math.floor( Math.log2( this.extents[1] - 1 ) )\n\t\tthis.Y_MASK = (1 << this.Y_BITS)-1\n\t\tthis.midpoint = this.extents.map( i => Math.round((i-1)/2) )\n\t}\n\n\tneigh(p, torus = this.torus){\n\t\tlet g = this\n\t\treturn g.neighi( this.p2i(p), torus ).map( function(i){ return g.i2p(i) } )\n\t}\n\n\tsetpix( p, t ){\n\t\tthis._pixels[this.p2i(p)] = t\n\t}\n\n\tsetpixi( i, t ){\n\t\tthis._pixels[i] = t\n\t}\n\n\tpixt( p ){\n\t\treturn this._pixels[this.p2i(p)]\n\t}\n\n\tpixti( i ){\n\t\treturn this._pixels[i]\n\t}\n\n\t/* Return locations of all non-zero pixels.\n\n\t\tThis method isn't actually called because the subclasses implement\n\t\tit themselves due to efficiency reasons. It serves as a template to\n\t\tdocument the functionality. */\n\t* pixels() {\n\t\tfor( let i of this.pixelsi() ){\n\t\t\tif( this._pixels[i] > 0 ){\n\t\t\t\tyield [this.i2p(i),this._pixels[i]] \n\t\t\t}\n\t\t}\n\t}\n\n\t* pixelsi() {\n\t\t//throw(\"Iterator 'pixelsi' not implemented!\")\n\t\tyield undefined\n\t}\n\n\tpixelsbuffer() {\n\t\tif( this._pixels instanceof Uint16Array ){\n\t\t\tthis._pixelsbuffer = new Uint16Array(this._pixels.length)\n\t\t} else if( this._pixels instanceof Float32Array ){\n\t\t\tthis._pixelsbuffer = new Float32Array(this._pixels.length)\n\t\t} else {\n\t\t\tthrow(\"unsupported datatype: \" + (typeof this._pixels))\n\t\t}\n\t}\n\n\tgradienti( i ){\n\t\tthrow(\"method 'gradienti' not implemented! \"+i)\n\t}\n\n\tgradient( p ){\n\t\treturn this.gradienti( this.p2i( p ) )\n\t}\n\n\tlaplacian( p ){\n\t\treturn this.laplaciani( this.p2i( p ) )\n\t}\n\n\tlaplaciani( i ){\n\t\tlet L = 0, n = 0\n\t\tfor( let x of this.neighNeumanni(i) ){\n\t\t\tL += this.pixti( x ); n ++\n\t\t} \n\t\treturn L - n * this.pixti( i )\n\t}\n\n\tdiffusion( D ){\n\t\tif( ! this._pixelsbuffer ) this.pixelsbuffer()\n\t\tfor( let i of this.pixelsi() ){\n\t\t\tthis._pixelsbuffer[i] = this.pixti( i ) + D * this.laplaciani( i )\n\t\t}\n\t\t[this._pixelsbuffer, this._pixels] = [this._pixels, this._pixelsbuffer]\n\t}\n\n\tapplyLocally( f ){\n\t\tif( ! this._pixelsbuffer ) this.pixelsbuffer()\n\t\tfor( let i of this.pixelsi() ){\n\t\t\tlet p = this.i2p(i)\n\t\t\tthis._pixelsbuffer[i] = f( p, this.neigh(p) ) \n\t\t}\n\t\t[this._pixelsbuffer, this._pixels] = [this._pixels, this._pixelsbuffer]\t\t\n\t}\n\n\tmultiplyBy( r ){\n\t\tfor( let i of this.pixelsi() ){\n\t\t\tthis._pixels[i] *= r \n\t\t}\n\t}\n\n}\n\nexport default Grid\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/grid/Grid.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "class",
    "name": "Grid",
    "memberof": "src/grid/Grid.js",
    "static": true,
    "longname": "src/grid/Grid.js~Grid",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/grid/Grid.js",
    "importStyle": "Grid",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 139,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "extents",
    "memberof": "src/grid/Grid.js~Grid",
    "static": false,
    "longname": "src/grid/Grid.js~Grid#extents",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "torus",
    "memberof": "src/grid/Grid.js~Grid",
    "static": false,
    "longname": "src/grid/Grid.js~Grid#torus",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "X_BITS",
    "memberof": "src/grid/Grid.js~Grid",
    "static": false,
    "longname": "src/grid/Grid.js~Grid#X_BITS",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "Y_BITS",
    "memberof": "src/grid/Grid.js~Grid",
    "static": false,
    "longname": "src/grid/Grid.js~Grid#Y_BITS",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "Y_MASK",
    "memberof": "src/grid/Grid.js~Grid",
    "static": false,
    "longname": "src/grid/Grid.js~Grid#Y_MASK",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "midpoint",
    "memberof": "src/grid/Grid.js~Grid",
    "static": false,
    "longname": "src/grid/Grid.js~Grid#midpoint",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "neigh",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#neigh",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "torus",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "setpix",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#setpix",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "setpixi",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#setpixi",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "pixt",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#pixt",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "pixti",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#pixti",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "pixels",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#pixels",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "pixelsi",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#pixelsi",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "pixelsbuffer",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#pixelsbuffer",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "_pixelsbuffer",
    "memberof": "src/grid/Grid.js~Grid",
    "static": false,
    "longname": "src/grid/Grid.js~Grid#_pixelsbuffer",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "gradienti",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#gradienti",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "gradient",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#gradient",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "laplacian",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#laplacian",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "laplaciani",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#laplaciani",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "diffusion",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#diffusion",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "D",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "applyLocally",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#applyLocally",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "multiplyBy",
    "memberof": "src/grid/Grid.js~Grid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid.js~Grid#multiplyBy",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "r",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/grid/Grid2D.js",
    "content": "/** A class containing (mostly static) utility functions for dealing with 2D \n *  and 3D grids. */\n\nimport Grid from \"./Grid.js\"\n\nclass Grid2D extends Grid {\n\tconstructor( extents, torus=true, datatype=\"Uint16\" ){\n\t\tsuper( extents, torus )\n\t\tthis.X_STEP = 1 << this.Y_BITS // for neighborhoods based on pixel index\n\t\tthis.Y_MASK = this.X_STEP-1\n\t\t// Check that the grid size is not too big to store pixel ID in 32-bit number,\n\t\t// and allow fast conversion of coordinates to unique ID numbers.\n\t\tif( this.X_BITS + this.Y_BITS > 32 ){\n\t\t\tthrow(\"Field size too large -- field cannot be represented as 32-bit number\")\n\t\t}\n\t\t// Attributes per pixel:\n\t\t// celltype (identity) of the current pixel.\n\t\tif( datatype == \"Uint16\" ){\n\t\t\tthis._pixels = new Uint16Array(this.p2i(this.extents))\n\t\t} else if( datatype == \"Float32\" ){\n\t\t\tthis._pixels = new Float32Array(this.p2i(this.extents))\n\t\t} else {\n\t\t\tthrow(\"unsupported datatype: \" + datatype)\n\t\t}\n\t}\n\n\t* pixelsi() {\n\t\tlet ii = 0, c = 0\n\t\tfor( let i = 0 ; i < this.extents[0] ; i ++ ){\n\t\t\tfor( let j = 0 ; j < this.extents[1] ; j ++ ){\n\t\t\t\tyield ii\n\t\t\t\tii ++\n\t\t\t}\n\t\t\tc += this.X_STEP\n\t\t\tii = c\n\t\t}\n\t}\n\n\t* pixels() {\n\t\tlet ii = 0, c = 0\n\t\t// Loop over coordinates [i,j] on the grid\n\t\t// For each pixel with cellid != 0 (so non-background pixels), \n\t\t// return an array with in the first element the pixel \n\t\t// coordinates p = [i,j], and in the second element the cellid of this pixel.\n\t\tfor( let i = 0 ; i < this.extents[0] ; i ++ ){\n\t\t\tfor( let j = 0 ; j < this.extents[1] ; j ++ ){\n\t\t\t\tif( this._pixels[ii] > 0 ){\n\t\t\t\t\tyield [[i,j], this._pixels[ii]]\n\t\t\t\t}\n\t\t\t\tii ++\n\t\t\t}\n\t\t\tc += this.X_STEP\n\t\t\tii = c\n\t\t}\n\t}\n\n\t/*\tReturn array of indices of neighbor pixels of the pixel at \n\t\tindex i. The separate 2D and 3D functions are called by\n\t\tthe wrapper function neighi, depending on this.ndim.\n\n\t*/\n\tneighisimple( i ){\n\t\tlet p = this.i2p(i)\n\t\tlet xx = []\n\t\tfor( let d = 0 ; d <= 1 ; d ++ ){\n\t\t\tif( p[d] == 0 ){\n\t\t\t\tif( this.torus[d] ){\n\t\t\t\t\txx[d] = [p[d],this.extents[d]-1,p[d]+1]\n\t\t\t\t} else {\n\t\t\t\t\txx[d] = [p[d],p[d]+1]\n\t\t\t\t}\n\t\t\t} else if( p[d] == this.extents[d]-1 ){\n\t\t\t\tif( this.torus[d] ){\n\t\t\t\t\txx[d] = [p[d],p[d]-1,0]\n\t\t\t\t} else {\n\t\t\t\t\txx[d] = [p[d],p[d]-1]\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\txx[d] = [p[d],p[d]-1,p[d]+1]\n\t\t\t}\n\t\t}\n\n\t\tlet r = [], first=true\n\t\tfor( let x of xx[0] ){\n\t\t\tfor( let y of xx[1] ){\n\t\t\t\tif( first ){\n\t\t\t\t\tfirst = false \n\t\t\t\t} else {\n\t\t\t\t\tr.push( this.p2i( [x,y] ) )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn r\n\t}\n\n\t* neighNeumanni( i, torus = this.torus ){\n\t\t// normal computation of neighbor indices (top left-middle-right, \n\t\t// left, right, bottom left-middle-right)\n\t\tlet t = i-1, l = i-this.X_STEP, r = i+this.X_STEP, b = i+1\n\t\t\n\t\t// if pixel is part of one of the borders, adjust the \n\t\t// indices accordingly\n\t\t// if torus is false, return NaN for all neighbors that cross\n\t\t// the border.\n\n\t\t// left border\n\t\tif( i < this.extents[1] ){\n\t\t\tif( torus ){\n\t\t\t\tl += this.extents[0] * this.X_STEP\n\t\t\t\tyield l\n\t\t\t} \n\t\t} else {\n\t\t\tyield l\n\t\t}\n\t\t// right border\n\t\tif( i >= this.X_STEP*( this.extents[0] - 1 ) ){\n\t\t\tif( torus ){\n\t\t\t\tr -= this.extents[0] * this.X_STEP\n\t\t\t\tyield r\n\t\t\t}\n\t\t} else {\n\t\t\tyield r\n\t\t}\n\t\t// top border\n\t\tif( i % this.X_STEP == 0 ){\n\t\t\tif( torus ){\n\t\t\t\tt += this.extents[1]\n\t\t\t\tyield t\n\t\t\t} \n\t\t} else {\n\t\t\tyield t\n\t\t}\n\t\t// bottom border\n\t\tif( (i+1-this.extents[1]) % this.X_STEP == 0 ){\n\t\t\tif( torus ){\n\t\t\t\tb -= this.extents[1]\n\t\t\t\tyield b\n\t\t\t} \n\t\t} else {\n\t\t\tyield b\n\t\t}\n\t}\n\n\tneighi( i, torus = this.torus ){\t\n\t\t// normal computation of neighbor indices (top left-middle-right, \n\t\t// left, right, bottom left-middle-right)\n\t\tlet tl, tm, tr, l, r, bl, bm, br\n\t\t\n\t\ttl = i-1-this.X_STEP; tm = i-1; tr = i-1+this.X_STEP\n\t\tl = i-this.X_STEP; r = i+this.X_STEP\n\t\tbl = i+1-this.X_STEP; bm = i+1; br = i+1+this.X_STEP\n\t\t\n\t\t// if pixel is part of one of the borders, adjust the \n\t\t// indices accordingly\n\t\tlet add = NaN // if torus is false, return NaN for all neighbors that cross\n\t\t// the border.\n\t\t// \n\t\t// left border\n\t\tif( i < this.extents[1] ){\n\t\t\tif( torus ){\n\t\t\t\tadd = this.extents[0] * this.X_STEP\n\t\t\t}\n\t\t\ttl += add; l += add; bl += add \t\n\t\t}\n\t\t\n\t\t// right border\n\t\tif( i >= this.X_STEP*( this.extents[0] - 1 ) ){\n\t\t\tif( torus ){\n\t\t\t\tadd = -this.extents[0] * this.X_STEP\n\t\t\t}\n\t\t\ttr += add; r += add; br += add\n\t\t}\n\n\t\t// top border\n\t\tif( i % this.X_STEP == 0 ){\n\t\t\tif( torus ){\n\t\t\t\tadd = this.extents[1]\n\t\t\t}\n\t\t\ttl += add; tm += add; tr += add\t\n\t\t}\n\t\t\n\t\t// bottom border\n\t\tif( (i+1-this.extents[1]) % this.X_STEP == 0 ){\n\t\t\tif( torus ){\n\t\t\t\tadd = -this.extents[1]\n\t\t\t}\n\t\t\tbl += add; bm += add; br += add\n\t\t}\n\t\tif( !torus ){\n\t\t\treturn [ tl, l, bl, tm, bm, tr, r, br ].filter( isFinite )\n\t\t} else {\n\t\t\treturn [ tl, l, bl, tm, bm, tr, r, br ]\n\t\t}\n\t}\n\tp2i ( p ){\n\t\treturn ( p[0] << this.Y_BITS ) + p[1]\n\t}\n\ti2p ( i ){\n\t\treturn [i >> this.Y_BITS, i & this.Y_MASK]\n\t}\n\tgradienti( i ){\n\t\tlet t = i-1, b = i+1, l = i-this.X_STEP, r = i+this.X_STEP, torus = this.torus\n\t\t\n\t\tlet dx=0\n\t\tif( i < this.extents[1] ){ // left border\n\t\t\tif( torus ){\n\t\t\t\tl += this.extents[0] * this.X_STEP\n\t\t\t\tdx = ((this._pixels[r]-this._pixels[i])+\n\t\t\t\t\t(this._pixels[i]-this._pixels[l]))/2\n\t\t\t} else {\n\t\t\t\tdx = this._pixels[r]-this._pixels[i]\n\t\t\t}\n\t\t} else { \n\t\t\tif( i >= this.X_STEP*( this.extents[0] - 1 ) ){ // right border\n\t\t\t\tif( torus ){\n\t\t\t\t\tr -= this.extents[0] * this.X_STEP\n\t\t\t\t\tdx = ((this._pixels[r]-this._pixels[i])+\n\t\t\t\t\t\t(this._pixels[i]-this._pixels[l]))/2\n\t\t\t\t} else {\n\t\t\t\t\tdx = this._pixels[i]-this._pixels[l]\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdx = ((this._pixels[r]-this._pixels[i])+\n\t\t\t\t\t(this._pixels[i]-this._pixels[l]))/2\n\t\t\t}\n\t\t}\n\n\t\tlet dy=0\n\t\tif( i % this.X_STEP == 0 ){ // top border\n\t\t\tif( torus ){\n\t\t\t\tt += this.extents[1]\n\t\t\t\tdy = ((this._pixels[b]-this._pixels[i])+\n\t\t\t\t\t(this._pixels[i]-this._pixels[t]))/2\n\t\t\t}\telse {\n\t\t\t\tdy = this._pixels[b]-this._pixels[i]\n\t\t\t}\n\t\t} else { \n\t\t\tif( (i+1-this.extents[1]) % this.X_STEP == 0 ){ // bottom border\n\t\t\t\tif( torus ){\n\t\t\t\t\tb -= this.extents[1]\n\t\t\t\t\tdy = ((this._pixels[b]-this._pixels[i])+\n\t\t\t\t\t\t(this._pixels[i]-this._pixels[t]))/2\n\t\t\t\t} else {\n\t\t\t\t\tdy = this._pixels[i]-this._pixels[t]\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdy = ((this._pixels[b]-this._pixels[i])+\n\t\t\t\t\t(this._pixels[i]-this._pixels[t]))/2\n\t\t\t}\n\t\t}\n\t\treturn [\n\t\t\tdx, dy\n\t\t]\n\t}\n}\n\nexport default Grid2D \n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/grid/Grid2D.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "class",
    "name": "Grid2D",
    "memberof": "src/grid/Grid2D.js",
    "static": true,
    "longname": "src/grid/Grid2D.js~Grid2D",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/grid/Grid2D.js",
    "importStyle": "Grid2D",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/grid/Grid.js~Grid"
    ]
  },
  {
    "__docId__": 165,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/grid/Grid2D.js~Grid2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid2D.js~Grid2D#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "X_STEP",
    "memberof": "src/grid/Grid2D.js~Grid2D",
    "static": false,
    "longname": "src/grid/Grid2D.js~Grid2D#X_STEP",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "Y_MASK",
    "memberof": "src/grid/Grid2D.js~Grid2D",
    "static": false,
    "longname": "src/grid/Grid2D.js~Grid2D#Y_MASK",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "_pixels",
    "memberof": "src/grid/Grid2D.js~Grid2D",
    "static": false,
    "longname": "src/grid/Grid2D.js~Grid2D#_pixels",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "pixelsi",
    "memberof": "src/grid/Grid2D.js~Grid2D",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid2D.js~Grid2D#pixelsi",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "pixels",
    "memberof": "src/grid/Grid2D.js~Grid2D",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid2D.js~Grid2D#pixels",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "neighisimple",
    "memberof": "src/grid/Grid2D.js~Grid2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid2D.js~Grid2D#neighisimple",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "neighNeumanni",
    "memberof": "src/grid/Grid2D.js~Grid2D",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid2D.js~Grid2D#neighNeumanni",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "torus",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "neighi",
    "memberof": "src/grid/Grid2D.js~Grid2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid2D.js~Grid2D#neighi",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "torus",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "p2i",
    "memberof": "src/grid/Grid2D.js~Grid2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid2D.js~Grid2D#p2i",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "i2p",
    "memberof": "src/grid/Grid2D.js~Grid2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid2D.js~Grid2D#i2p",
    "access": "public",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "gradienti",
    "memberof": "src/grid/Grid2D.js~Grid2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid2D.js~Grid2D#gradienti",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/grid/Grid3D.js",
    "content": "/** A class containing (mostly static) utility functions for dealing with 2D \n *  and 3D grids. */\n\nimport Grid from \"./Grid.js\"\n\nclass Grid3D extends Grid {\n\tconstructor( extents, torus = true ){\n\t\tsuper( extents, torus )\n\t\t// Check that the grid size is not too big to store pixel ID in 32-bit number,\n\t\t// and allow fast conversion of coordinates to unique ID numbers.\n\t\tthis.Z_BITS = 1+Math.floor( Math.log2( this.extents[2] - 1 ) )\n\t\tif( this.X_BITS + this.Y_BITS + this.Z_BITS > 32 ){\n\t\t\tthrow(\"Field size too large -- field cannot be represented as 32-bit number\")\n\t\t}\n\t\tthis.Z_MASK = (1 << this.Z_BITS)-1\n\t\tthis.Z_STEP = 1\n\t\tthis.Y_STEP = 1 << (this.Z_BITS)\n\t\tthis.X_STEP = 1 << (this.Z_BITS +this.Y_BITS)\n\t\tthis._pixels = new Uint16Array(this.p2i(extents))\n\t}\n\t/* \tConvert pixel coordinates to unique pixel ID numbers and back.\n\t\tDepending on this.ndim, the 2D or 3D version will be used by the \n\t\twrapper functions p2i and i2p. Use binary encoding for speed. */\n\tp2i( p ){\n\t\treturn ( p[0] << ( this.Z_BITS + this.Y_BITS ) ) + \n\t\t\t( p[1] << this.Z_BITS ) + \n\t\t\tp[2]\n\t}\n\ti2p( i ){\n\t\treturn [i >> (this.Y_BITS + this.Z_BITS), \n\t\t\t( i >> this.Z_BITS ) & this.Y_MASK, i & this.Z_MASK ]\n\t}\n\n\t* pixelsi() {\n\t\tlet ii = 0, c = 0\n\t\tfor( let i = 0 ; i < this.extents[0] ; i ++ ){\n\t\t\tlet d = 0\n\t\t\tfor( let j = 0 ; j < this.extents[1] ; j ++ ){\n\t\t\t\tfor( let k = 0 ; k < this.extents[2] ; k ++ ){\n\t\t\t\t\tyield ii\n\t\t\t\t\tii++\n\t\t\t\t}\n\t\t\t\td += this.Y_STEP\n\t\t\t\tii = c + d\n\t\t\t}\n\t\t\tc += this.X_STEP\n\t\t\tii = c\n\t\t}\n\t}\n\n\t* pixels() {\n\t\tlet ii = 0, c = 0\n\t\tfor( let i = 0 ; i < this.extents[0] ; i ++ ){\n\t\t\tlet d = 0\n\t\t\tfor( let j = 0 ; j < this.extents[1] ; j ++ ){\n\t\t\t\tfor( let k = 0 ; k < this.extents[2] ; k ++ ){\n\t\t\t\t\tif( this._pixels[ii] > 0 ){\n\t\t\t\t\t\tyield [[i,j,k], this._pixels[ii]]\n\t\t\t\t\t}\n\t\t\t\t\tii++\n\t\t\t\t}\n\t\t\t\td += this.Y_STEP\n\t\t\t\tii = c + d\n\t\t\t}\n\t\t\tc += this.X_STEP\n\t\t\tii = c\n\t\t}\n\t}\n\n\tneighi( i, torus = this.torus ){\n\t\tlet p = this.i2p(i)\n\n\t\tlet xx = []\n\t\tfor( let d = 0 ; d <= 2 ; d ++ ){\n\t\t\tif( p[d] == 0 ){\n\t\t\t\tif( torus ){\n\t\t\t\t\txx[d] = [p[d],this.extents[d]-1,p[d]+1]\n\t\t\t\t} else {\n\t\t\t\t\txx[d] = [p[d],p[d]+1]\n\t\t\t\t}\n\t\t\t} else if( p[d] == this.extents[d]-1 ){\n\t\t\t\tif( torus ){\n\t\t\t\t\txx[d] = [p[d],p[d]-1,0]\n\t\t\t\t} else {\n\t\t\t\t\txx[d] = [p[d],p[d]-1]\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\txx[d] = [p[d],p[d]-1,p[d]+1]\n\t\t\t}\n\t\t}\n\t\tlet r = [], first=true\n\t\tfor( let x of xx[0] ){\n\t\t\tfor( let y of xx[1] ){\n\t\t\t\tfor( let z of xx[2] ){\n\t\t\t\t\tif( first ){\n\t\t\t\t\t\tfirst = false \n\t\t\t\t\t} else {\n\t\t\t\t\t\tr.push( this.p2i( [x,y,z] ) )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn r\n\t}\n}\n\nexport default Grid3D \n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/grid/Grid3D.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "class",
    "name": "Grid3D",
    "memberof": "src/grid/Grid3D.js",
    "static": true,
    "longname": "src/grid/Grid3D.js~Grid3D",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/grid/Grid3D.js",
    "importStyle": "Grid3D",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/grid/Grid.js~Grid"
    ]
  },
  {
    "__docId__": 180,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/grid/Grid3D.js~Grid3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid3D.js~Grid3D#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "Z_BITS",
    "memberof": "src/grid/Grid3D.js~Grid3D",
    "static": false,
    "longname": "src/grid/Grid3D.js~Grid3D#Z_BITS",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "Z_MASK",
    "memberof": "src/grid/Grid3D.js~Grid3D",
    "static": false,
    "longname": "src/grid/Grid3D.js~Grid3D#Z_MASK",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "Z_STEP",
    "memberof": "src/grid/Grid3D.js~Grid3D",
    "static": false,
    "longname": "src/grid/Grid3D.js~Grid3D#Z_STEP",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "Y_STEP",
    "memberof": "src/grid/Grid3D.js~Grid3D",
    "static": false,
    "longname": "src/grid/Grid3D.js~Grid3D#Y_STEP",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "X_STEP",
    "memberof": "src/grid/Grid3D.js~Grid3D",
    "static": false,
    "longname": "src/grid/Grid3D.js~Grid3D#X_STEP",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "_pixels",
    "memberof": "src/grid/Grid3D.js~Grid3D",
    "static": false,
    "longname": "src/grid/Grid3D.js~Grid3D#_pixels",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "p2i",
    "memberof": "src/grid/Grid3D.js~Grid3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid3D.js~Grid3D#p2i",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "i2p",
    "memberof": "src/grid/Grid3D.js~Grid3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid3D.js~Grid3D#i2p",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "pixelsi",
    "memberof": "src/grid/Grid3D.js~Grid3D",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid3D.js~Grid3D#pixelsi",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "pixels",
    "memberof": "src/grid/Grid3D.js~Grid3D",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid3D.js~Grid3D#pixels",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "neighi",
    "memberof": "src/grid/Grid3D.js~Grid3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Grid3D.js~Grid3D#neighi",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "torus",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "file",
    "name": "src/grid/GridManipulator.js",
    "content": "/* This class contains methods that should be executed once per monte carlo step.\n   Examples are cell division, cell death etc.\n */\n\nimport PixelsByCell from \"../stats/PixelsByCell.js\"\nimport Centroids from \"../stats/Centroids.js\"\n\nclass GridManipulator {\n\tconstructor( C ){\n\t\tthis.C = C\n\t}\n\t/* Seed a new cell at a random position. Return 0 if failed, ID of new cell otherwise.\n\t * Try a specified number of times, then give up if grid is too full. \n\t * The first cell will always be seeded at the midpoint of the grid. */\n\tseedCell( kind, max_attempts = 10000 ){\n\t\tlet p = this.C.midpoint\n\t\twhile( this.C.pixt( p ) != 0 && max_attempts-- > 0 ){\n\t\t\tfor( let i = 0 ; i < p.length ; i ++ ){\n\t\t\t\tp[i] = this.C.ran(0,this.C.extents[i]-1)\n\t\t\t}\n\t\t}\n\t\tif( this.C.pixt(p) != 0 ){\n\t\t\treturn 0 // failed\n\t\t}\n\t\tconst newid = this.C.makeNewCellID( kind )\n\t\tthis.C.setpix( p, newid )\n\t\treturn newid\n\t}\n\t/* Seed a new cell of celltype \"kind\" onto position \"p\".*/\n\tseedCellAt( kind, p ){\n\t\tconst newid = this.C.makeNewCellID( kind )\n\t\tthis.C.setpix( p, newid )\n\t\treturn newid\n\t}\n\tseedCellsInCircle( kind, n, center, radius, max_attempts = 10000 ){\n\t\tif( !max_attempts ){\n\t\t\tmax_attempts = 10*n\n\t\t}\n\t\tlet C = this.C\n\t\twhile( n > 0 ){\n\t\t\tif( --max_attempts == 0 ){\n\t\t\t\tthrow(\"too many attempts to seed cells!\")\n\t\t\t}\n\t\t\tlet p = center.map( function(i){ return C.ran(Math.ceil(i-radius),Math.floor(i+radius)) } )\n\t\t\tlet d = 0\n\t\t\tfor( let i = 0 ; i < p.length ; i ++ ){\n\t\t\t\td += (p[i]-center[i])*(p[i]-center[i])\n\t\t\t}\n\t\t\tif( d < radius*radius ){\n\t\t\t\tthis.seedCellAt( kind, p )\n\t\t\t\tn--\n\t\t\t}\n\t\t}\n\t}\n\t/* Add an entire plane to an array of pixel coordinates. This array is given \n\tas first argument but can be empty. The plane is specified by setting the x/y/z\n\tcoordinate (coded by coord = 0/1/2 for x/y/z) to a fixed value [coordvalue], while\n\tletting the other coordinates range from their min value 0 to their max value. */\n\tmakePlane ( voxels, coord, coordvalue ){\n\t\tlet x,y,z\n\t\tlet minc = [0,0,0]\n\t\tlet maxc = [0,0,0]\n\t\tfor( let dim = 0; dim < this.C.ndim; dim++ ){\n\t\t\tmaxc[dim] = this.C.extents[dim]-1\n\t\t}\n\t\tminc[coord] = coordvalue\n\t\tmaxc[coord] = coordvalue\n\n\t\t// For every coordinate x,y,z, loop over all possible values from min to max.\n\t\t// one of these loops will have only one iteration because min = max = coordvalue.\n\t\tfor( x = minc[0]; x <= maxc[0]; x++ ){\n\t\t\tfor( y = minc[1]; y<=maxc[1]; y++ ){\n\t\t\t\tfor( z = minc[2]; z<=maxc[2]; z++ ){\n\t\t\t\t\tif( this.C.ndim == 3 ){\n\t\t\t\t\t\tvoxels.push( [x,y,z] )\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//console.log(x,y)\n\t\t\t\t\t\tvoxels.push( [x,y] )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn voxels\n\t}\n\t/* Convert all pixels in a given array to a specific cellkind:\n\t   changes the pixels defined by voxels (array of coordinates p) into\n\t   the given cellkind. */\n\tchangeKind ( voxels, cellkind ){\n\t\t\n\t\tlet newid = this.C.makeNewCellID( cellkind )\n\t\tfor( let p of voxels ){\n\t\t\tthis.C.setpix( p, newid )\n\t\t}\n\t\t\n\t}\n\n\t/* Let cell t divide by splitting it along a line perpendicular to\n\t * its major axis. */\n\tdivideCell( id ){\n\t\tlet C = this.C\n\t\tif( C.ndim != 2 || C.conf.torus ){\n\t\t\tthrow(\"The divideCell methods is only implemented for 2D non-torus lattices yet!\")\n\t\t}\n\t\tlet cp = C.getStat( PixelsByCell )[id], com = C.getStat( Centroids )[id]\n\t\tlet bxx = 0, bxy = 0, byy=0, cx, cy, x2, y2, side, T, D, x0, y0, x1, y1, L2\n\n\t\t\t\n\n\t\t// Loop over the pixels belonging to this cell\n\t\tfor( let j = 0 ; j < cp.length ; j ++ ){\n\t\t\tcx = cp[j][0] - com[0] // x position rel to centroid\n\t\t\tcy = cp[j][1] - com[1] // y position rel to centroid\n\n\t\t\t// sum of squared distances:\n\t\t\tbxx += cx*cx\n\t\t\tbxy += cx*cy\n\t\t\tbyy += cy*cy\n\t\t}\n\n\t\t// This code computes a \"dividing line\", which is perpendicular to the longest\n\t\t// axis of the cell.\n\t\tif( bxy == 0 ){\n\t\t\tx0 = 0\n\t\t\ty0 = 0\n\t\t\tx1 = 1\n\t\t\ty1 = 0\n\t\t} else {\n\t\t\tT = bxx + byy\n\t\t\tD = bxx*byy - bxy*bxy\n\t\t\t//L1 = T/2 + Math.sqrt(T*T/4 - D)\n\t\t\tL2 = T/2 - Math.sqrt(T*T/4 - D)\n\t\t\tx0 = 0\n\t\t\ty0 = 0\n\t\t\tx1 = L2 - byy\n\t\t\ty1 = bxy\n\t\t}\n\n\t\t// create a new ID for the second cell\n\t\tlet nid = C.makeNewCellID( C.cellKind( id ) )\n\n\t\t// Loop over the pixels belonging to this cell\n\t\t//let sidea = 0, sideb = 0\n\t\t//let pix_id = []\n\t\t//let pix_nid = []\n\t\tfor( let j = 0 ; j < cp.length ; j ++ ){\n\t\t\t// coordinates of current cell relative to center of mass\n\t\t\tx2 = cp[j][0]-com[0]\n\t\t\ty2 = cp[j][1]-com[1]\n\n\t\t\t// Depending on which side of the dividing line this pixel is,\n\t\t\t// set it to the new type\n\t\t\tside = (x1 - x0)*(y2 - y0) - (x2 - x0)*(y1 - y0)\n\t\t\tif( side > 0 ){\n\t\t\t\t//sidea ++\n\t\t\t\tC.setpix( cp[j], nid ) \n\t\t\t\t//pix_nid.push( cp[j] )\n\t\t\t} else {\n\t\t\t\t//pix_id.push( cp[j] )\n\t\t\t\t//sideb ++\n\t\t\t}\n\t\t}\n\t\t//cp[id] = pix_id\n\t\t//cp[nid] = pix_nid\n\t\tC.stat_values = {} // remove cached stats or this will crash!!!\n\t\t//console.log( sidea, sideb )\n\t\treturn nid\n\t}\n}\n\n\nexport default GridManipulator \n\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/grid/GridManipulator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 193,
    "kind": "class",
    "name": "GridManipulator",
    "memberof": "src/grid/GridManipulator.js",
    "static": true,
    "longname": "src/grid/GridManipulator.js~GridManipulator",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/grid/GridManipulator.js",
    "importStyle": "GridManipulator",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 194,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/grid/GridManipulator.js~GridManipulator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/GridManipulator.js~GridManipulator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "C",
    "memberof": "src/grid/GridManipulator.js~GridManipulator",
    "static": false,
    "longname": "src/grid/GridManipulator.js~GridManipulator#C",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "seedCell",
    "memberof": "src/grid/GridManipulator.js~GridManipulator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/GridManipulator.js~GridManipulator#seedCell",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "kind",
        "types": [
          "*"
        ]
      },
      {
        "name": "max_attempts",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 10000,
        "defaultValue": "10000"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "seedCellAt",
    "memberof": "src/grid/GridManipulator.js~GridManipulator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/GridManipulator.js~GridManipulator#seedCellAt",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "kind",
        "types": [
          "*"
        ]
      },
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "seedCellsInCircle",
    "memberof": "src/grid/GridManipulator.js~GridManipulator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/GridManipulator.js~GridManipulator#seedCellsInCircle",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "kind",
        "types": [
          "*"
        ]
      },
      {
        "name": "n",
        "types": [
          "*"
        ]
      },
      {
        "name": "center",
        "types": [
          "*"
        ]
      },
      {
        "name": "radius",
        "types": [
          "*"
        ]
      },
      {
        "name": "max_attempts",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 10000,
        "defaultValue": "10000"
      }
    ],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "makePlane",
    "memberof": "src/grid/GridManipulator.js~GridManipulator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/GridManipulator.js~GridManipulator#makePlane",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "voxels",
        "types": [
          "*"
        ]
      },
      {
        "name": "coord",
        "types": [
          "*"
        ]
      },
      {
        "name": "coordvalue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "changeKind",
    "memberof": "src/grid/GridManipulator.js~GridManipulator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/GridManipulator.js~GridManipulator#changeKind",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "voxels",
        "types": [
          "*"
        ]
      },
      {
        "name": "cellkind",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "divideCell",
    "memberof": "src/grid/GridManipulator.js~GridManipulator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/GridManipulator.js~GridManipulator#divideCell",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "src/grid/Margolus2D.js",
    "content": "/** */\n\nimport Grid2D from \"./Grid2D.js\"\n\nclass Margolus2D extends Grid2D {\n\tconstructor( extents, torus=true, datatype=\"Uint16\" ){\n\t\n\t\tif( !torus ){\n\t\t\tthrow( \"Margolus grids must always have torus!\" )\n\t\t}\n\t\tif( ( extents[0] % 2 != 0 ) | ( extents[1] % 2 != 0 ) ){\n\t\t\tthrow( \"Margolus grids must have even numbers of rows and columns!\" )\n\t\t}\n\t\t\n\t\tsuper( extents, torus, datatype )\n\t\tthis.currentpartition = 1\n\t\t\n\t}\n\t\n\t// Switch between the two different partitions of blocks of 4 every \n\t// diffusion step.\n\ttogglePartition(){\n\t\tthis.currentpartition = -this.currentpartition\n\t}\n\t\n\t/* Defining the margolus neighborhood of pixel with coordinates p \n\tAlways return: upper left, upper right, lower right, lower left\n\t*/\n\tmargolusBlockOld( i ) {\n\t\n\t\tlet p = this.i2p( i ), out\n\t\t\n\t\tlet xeven = ( p[0] % 2 == 0 ), yeven = ( p[1] % 2 == 0 )\n\t\n\t\t// square upper left is current x position or one left of it\n\t\t// depending on currentpartition and whether x is even/odd\n\t\t// note that we want l r r l for the correct order\n\t\tif( ( xeven + this.currentpartition > 0 ) != 1 ){\n\t\t\tout = [ i, i+this.Y_STEP, i, i + this.Y_STEP ]\n\t\t} else {\n\t\t\tout = [ i - this.Y_STEP, i, i, i - this.Y_STEP ]\n\t\t}\n\t\t// Adjust y position in the same manner\n\t\tif( ( yeven + this.currentpartition > 0 ) != 1 ){\n\t\t\tout[2] += 1\n\t\t\tout[3] += 1\n\t\t} else {\n\t\t\tout[0] -= 1\n\t\t\tout[1] -= 1\n\t\t}\n\t\t\n\t\t// Now loop over the four coordinates and replace with the \n\t\t// corresponding pixeltypes\n\t\tfor( let j = 0; j < out.length; j++ ){\n\t\t\tout[j] = this._pixels[ out[j] ]\n\t\t}\n\t\treturn out\n\t}\n\t\n\tmargolusBlock( uplefti ){\n\t\n\t\tlet ur = i + this.Y_STEP,lr = i + 1 + this.Y_STEP, ll = i + 1\n\t\t\n\t\t// Correct for torus. Since uplefti is always part of the grid,\n\t\t// we can only cross the right or lower border.\n\t\t\n\t\t// right border\n\t\tif( i >= this.Y_STEP*( this.extents[0] - 1 ) ){\n\t\t\tadd = -this.extents[0] * this.Y_STEP\n\t\t\tur += add; lr += add\n\t\t}\n\t\t\n\t\t// bottom border\n\t\tif( (i+1-this.extents[1]) % this.Y_STEP == 0 ){\n\t\t\tadd = -this.extents[1]\n\t\t\tll += add; lr += add\n\t\t}\n\t\treturn [ i, ur, lr, ll ]\n\t\n\t}\n\tmargolusRotate ( blockarray ){\n\t\tlet lastel = blockarray.pop()\n\t\tblockarray.unshift( lastel )\n\t\treturn blockarray\n\t}\n\t\n\tdoMargolus ( block ){\n\t\n\t\tlet blockarray = []\n\t\tlet blockarray2 = [], pix\n\t\tfor( let i = 0; i < block.length; i++ ){\n\t\t\tpix = this_pixels[ block[j] ]\n\t\t\tblockarray.push( pix )\n\t\t\tif( pix > 0 ){\n\t\t\t\tblockarray2.push( 1 )\n\t\t\t} else {\n\t\t\t\tblockarray2.push( 0 )\n\t\t\t}\n\t\t}\n\t\tlet blockstring = blockarray2.join(\"\")\n\t\t\n\t\tblockarray = this.margolusRotate( blockarray )\n\t\t\n\t\t// Special cases where we need a second rotation:\n\t\t\n\t\tif( blockstring == 11 | blockstring == 1100 | blockstring == 110 | blockstring == 1001 ){\n\t\t\tblockarray = this.margolusRotate( blockarray )\n\t\t}\n\t\t\n\t\tfor( let j = 0; j < block.length; j++ ){\n\t\t\tthis.setpixi( block[j], blockarray[j] )\n\t\t}\n\t\n\t}\n\t\n\t\n\tdiffuseMargolus(){\n\t\t\n\t\tlet i = 0, j = 0\n\t\tif( this.currentpartition < 1 ){\n\t\t\ti = 1, j = 1\n\t\t}\n\t\t\n\t\tfor( i ; i < this.extents[0]; i = i + 2 ){\n\t\t\tfor( j ; j < this.extents[1]; j = j + 2 ){\n\t\t\t\tlet block = this.margolusBlock( this.p2i( [i,j] ) )\n\t\t\t\tthis.doMargolus( block )\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.togglePartition()\n\t\t\n\t}\n\t\n\t\n\t\n\n\n}\n\nexport default Margolus2D \n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/grid/Margolus2D.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "Margolus2D",
    "memberof": "src/grid/Margolus2D.js",
    "static": true,
    "longname": "src/grid/Margolus2D.js~Margolus2D",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/grid/Margolus2D.js",
    "importStyle": "Margolus2D",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/grid/Grid2D.js~Grid2D"
    ]
  },
  {
    "__docId__": 204,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/grid/Margolus2D.js~Margolus2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Margolus2D.js~Margolus2D#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "currentpartition",
    "memberof": "src/grid/Margolus2D.js~Margolus2D",
    "static": false,
    "longname": "src/grid/Margolus2D.js~Margolus2D#currentpartition",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "togglePartition",
    "memberof": "src/grid/Margolus2D.js~Margolus2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Margolus2D.js~Margolus2D#togglePartition",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "margolusBlockOld",
    "memberof": "src/grid/Margolus2D.js~Margolus2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Margolus2D.js~Margolus2D#margolusBlockOld",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "margolusBlock",
    "memberof": "src/grid/Margolus2D.js~Margolus2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Margolus2D.js~Margolus2D#margolusBlock",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "uplefti",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "margolusRotate",
    "memberof": "src/grid/Margolus2D.js~Margolus2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Margolus2D.js~Margolus2D#margolusRotate",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "blockarray",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "doMargolus",
    "memberof": "src/grid/Margolus2D.js~Margolus2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Margolus2D.js~Margolus2D#doMargolus",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "diffuseMargolus",
    "memberof": "src/grid/Margolus2D.js~Margolus2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/grid/Margolus2D.js~Margolus2D#diffuseMargolus",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/hamiltonian/ActivityConstraint.js",
    "content": "/* \n\tImplements the activity constraint of Potts models. \n\tSee also: \n\t\tNiculescu I, Textor J, de Boer RJ (2015) \n \t\tCrawling and Gliding: A Computational Model for Shape-Driven Cell Migration. \n \t\tPLoS Comput Biol 11(10): e1004280. \n \t\thttps://doi.org/10.1371/journal.pcbi.1004280\n */\n\nimport SoftConstraint from \"./SoftConstraint.js\"\n\nclass ActivityConstraint extends SoftConstraint {\n\tconstructor( conf ){\n\t\tsuper( conf )\n\n\t\tthis.cellpixelsact = {} // activity of cellpixels with a non-zero activity\n\t\t\n\t\t// Wrapper: select function to compute activities based on ACT_MEAN in conf\n\t\tif( this.conf.ACT_MEAN == \"arithmetic\" ){\n\t\t\tthis.activityAt = this.activityAtArith\n\t\t} else {\n\t\t\tthis.activityAt = this.activityAtGeom\n\t\t}\n\t\t\n\t}\n\t\n\tconfChecker(){\n\t\tthis.confCheckString( \"ACT_MEAN\" , [ \"geometric\", \"arithmetic\" ] )\n\t\tthis.confCheckCellNonNegative( \"LAMBDA_ACT\" )\n\t\tthis.confCheckCellNonNegative( \"MAX_ACT\" )\n\t}\n\t\n\t/* ======= ACT MODEL ======= */\n\n\t/* Act model : compute local activity values within cell around pixel i.\n\t * Depending on settings in conf, this is an arithmetic (activityAtArith)\n\t * or geometric (activityAtGeom) mean of the activities of the neighbors\n\t * of pixel i.\n\t */\n\t/* Hamiltonian computation */ \n\tdeltaH ( sourcei, targeti, src_type, tgt_type ){\n\n\t\tlet deltaH = 0, maxact, lambdaact\n\t\tconst src_kind = this.C.cellKind( src_type )\n\t\tconst tgt_kind = this.C.cellKind( tgt_type )\n\n\t\t// use parameters for the source cell, unless that is the background.\n\t\t// In that case, use parameters of the target cell.\n\t\tif( src_type != 0 ){\n\t\t\tmaxact = this.conf[\"MAX_ACT\"][src_kind]\n\t\t\tlambdaact = this.conf[\"LAMBDA_ACT\"][src_kind]\n\t\t} else {\n\t\t\t// special case: punishment for a copy attempt from background into\n\t\t\t// an active cell. This effectively means that the active cell retracts,\n\t\t\t// which is different from one cell pushing into another (active) cell.\n\t\t\tmaxact = this.conf[\"MAX_ACT\"][tgt_kind]\n\t\t\tlambdaact = this.conf[\"LAMBDA_ACT\"][tgt_kind]\n\t\t}\n\t\tif( !maxact || !lambdaact ){\n\t\t\treturn 0\n\t\t}\n\n\t\t// compute the Hamiltonian. The activityAt method is a wrapper for either activityAtArith\n\t\t// or activityAtGeom, depending on conf (see constructor).\t\n\t\tdeltaH += lambdaact*(this.activityAt( targeti ) - this.activityAt( sourcei ))/maxact\n\t\treturn deltaH\n\t}\n\n\t/* Activity mean computation methods for arithmetic/geometric mean.\n\tThe method used by activityAt is defined by conf ( see constructor ).*/\n\tactivityAtArith( i ){\n\t\tconst t = this.C.pixti( i )\n\t\t\n\t\t// no activity for background/stroma\n\t\tif( t <= 0 ){ return 0 }\n\t\t\n\t\t// neighborhood pixels\n\t\tconst N = this.C.neighi(i)\n\t\t\n\t\t// r activity summed, nN number of neighbors\n\t\t// we start with the current pixel. \n\t\tlet r = this.pxact(i), nN = 1\n\t\t\n\t\t// loop over neighbor pixels\n\t\tfor( let j = 0 ; j < N.length ; j ++ ){ \n\t\t\tconst tn = this.C.pixti( N[j] ) \n\t\t\t\n\t\t\t// a neighbor only contributes if it belongs to the same cell\n\t\t\tif( tn == t ){\n\t\t\t\tr += this.pxact( N[j] )\n\t\t\t\tnN ++ \n\t\t\t}\n\t\t}\n\n\t\t// average is summed r divided by num neighbors.\n\t\treturn r/nN\n\t}\n\tactivityAtGeom ( i ){\n\t\tconst t = this.C.pixti( i )\n\n\t\t// no activity for background/stroma\n\t\tif( t <= 0 ){ return 0 }\n\t\t\n\t\t//neighborhood pixels\n\t\tconst N = this.C.neighi( i )\n\t\t\n\t\t// r activity product, nN number of neighbors.\n\t\t// we start with the current pixel.\n\t\tlet nN = 1, r = this.pxact( i )\n\n\t\t// loop over neighbor pixels\n\t\tfor( let j = 0 ; j < N.length ; j ++ ){ \n\t\t\tconst tn = this.C.pixti( N[j] ) \n\n\t\t\t// a neighbor only contributes if it belongs to the same cell.\n\t\t\t// if it does and has activity 0, the product will also be zero so\n\t\t\t// we can already return.\n\t\t\tif( tn == t ){\n\t\t\t\tif( this.pxact( N[j] ) == 0 ) return 0\n\t\t\t\tr *= this.pxact( N[j] )\n\t\t\t\tnN ++ \n\t\t\t}\n\t\t}\n\t\t\n\t\t// Geometric mean computation. \n\t\treturn Math.pow(r,1/nN)\n\t}\n\n\n\t/* Current activity (under the Act model) of the pixel with ID i. */\n\tpxact ( i ){\n\t\t// If the pixel is not in the cellpixelsact object, it has activity 0.\n\t\t// Otherwise, its activity is stored in the object.\n\t\treturn this.cellpixelsact[i] || 0\n\t}\n\t\n\t/* eslint-disable no-unused-vars*/\n\tpostSetpixListener( i, t_old, t ){\n\t\t// After setting a pixel, it gets the MAX_ACT value of its cellkind.\n\t\tconst k = this.C.cellKind( t )\n\t\tthis.cellpixelsact[i] = this.conf[\"MAX_ACT\"][k]\n\t}\n\t\n\tpostMCSListener(){\n\t\t// iterate over cellpixelsage and decrease all activities by one.\n\t\tfor( let key in this.cellpixelsact ){\n\t\t\t// activities that reach zero no longer need to be stored.\n\t\t\tif( --this.cellpixelsact[ key ] <= 0 ){\n\t\t\t\tdelete this.cellpixelsact[ key ]\n\t\t\t}\n\t\t}\n\t}\n\n\n}\n\nexport default ActivityConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/ActivityConstraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "class",
    "name": "ActivityConstraint",
    "memberof": "src/hamiltonian/ActivityConstraint.js",
    "static": true,
    "longname": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/ActivityConstraint.js",
    "importStyle": "ActivityConstraint",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/SoftConstraint.js~SoftConstraint"
    ]
  },
  {
    "__docId__": 215,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "cellpixelsact",
    "memberof": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint",
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint#cellpixelsact",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "activityAt",
    "memberof": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint",
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint#activityAt",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "confChecker",
    "memberof": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint#confChecker",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "activityAtArith",
    "memberof": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint#activityAtArith",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "activityAtGeom",
    "memberof": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint#activityAtGeom",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "pxact",
    "memberof": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint#pxact",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "postSetpixListener",
    "memberof": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint#postSetpixListener",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "t_old",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "postMCSListener",
    "memberof": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraint.js~ActivityConstraint#postMCSListener",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "file",
    "name": "src/hamiltonian/ActivityConstraintOld.js",
    "content": "/* \n\tImplements the activity constraint of Potts models. \n\tSee also: \n\t\tNiculescu I, Textor J, de Boer RJ (2015) \n \t\tCrawling and Gliding: A Computational Model for Shape-Driven Cell Migration. \n \t\tPLoS Comput Biol 11(10): e1004280. \n \t\thttps://doi.org/10.1371/journal.pcbi.1004280\n */\n\nimport SoftConstraint from \"./SoftConstraint.js\"\n\nclass ActivityConstraint extends SoftConstraint {\n\tconstructor( conf ){\n\t\tsuper( conf )\n\n\t\tthis.cellpixelsbirth = {} // time the pixel was added to its current cell.\n\t\t\n\t\t// Wrapper: select function to compute activities based on ACT_MEAN in conf\n\t\tif( this.conf.ACT_MEAN == \"arithmetic\" ){\n\t\t\tthis.activityAt = this.activityAtArith\n\t\t} else {\n\t\t\tthis.activityAt = this.activityAtGeom\n\t\t}\n\t\t\n\t}\n\t/* ======= ACT MODEL ======= */\n\n\t/* Act model : compute local activity values within cell around pixel i.\n\t * Depending on settings in conf, this is an arithmetic (activityAtArith)\n\t * or geometric (activityAtGeom) mean of the activities of the neighbors\n\t * of pixel i.\n\t */\n\t/* Hamiltonian computation */ \n\tdeltaH ( sourcei, targeti, src_type, tgt_type ){\n\n\t\tlet deltaH = 0, maxact, lambdaact\n\t\tconst src_kind = this.C.cellKind( src_type )\n\t\tconst tgt_kind = this.C.cellKind( tgt_type )\n\n\t\t// use parameters for the source cell, unless that is the background.\n\t\t// In that case, use parameters of the target cell.\n\t\tif( src_type != 0 ){\n\t\t\tmaxact = this.conf[\"MAX_ACT\"][src_kind]\n\t\t\tlambdaact = this.conf[\"LAMBDA_ACT\"][src_kind]\n\t\t} else {\n\t\t\t// special case: punishment for a copy attempt from background into\n\t\t\t// an active cell. This effectively means that the active cell retracts,\n\t\t\t// which is different from one cell pushing into another (active) cell.\n\t\t\tmaxact = this.conf[\"MAX_ACT\"][tgt_kind]\n\t\t\tlambdaact = this.conf[\"LAMBDA_ACT\"][tgt_kind]\n\t\t}\n\t\tif( maxact == 0 || lambdaact == 0 ){\n\t\t\treturn 0\n\t\t}\n\n\t\t// compute the Hamiltonian. The activityAt method is a wrapper for either activityAtArith\n\t\t// or activityAtGeom, depending on conf (see constructor).\t\n\t\tdeltaH += lambdaact*(this.activityAt( targeti ) - this.activityAt( sourcei ))/maxact\n\t\treturn deltaH\n\t}\n\n\t/* Activity mean computation methods for arithmetic/geometric mean.\n\tThe method used by activityAt is defined by conf ( see constructor ).*/\n\tactivityAtArith( i ){\n\t\tconst t = this.C.pixti( i )\n\t\t\n\t\t// no activity for background/stroma\n\t\tif( t <= 0 ){ return 0 }\n\t\t\n\t\t// neighborhood pixels\n\t\tconst N = this.C.neighi(i)\n\t\t\n\t\t// r activity summed, nN number of neighbors\n\t\t// we start with the current pixel. \n\t\tlet r = this.pxact(i), nN = 1\n\t\t\n\t\t// loop over neighbor pixels\n\t\tfor( let j = 0 ; j < N.length ; j ++ ){ \n\t\t\tconst tn = this.C.pixti( N[j] ) \n\t\t\t\n\t\t\t// a neighbor only contributes if it belongs to the same cell\n\t\t\tif( tn == t ){\n\t\t\t\tr += this.pxact( N[j] )\n\t\t\t\tnN ++ \n\t\t\t}\n\t\t}\n\n\t\t// average is summed r divided by num neighbors.\n\t\treturn r/nN\n\t}\n\tactivityAtGeom ( i ){\n\t\tconst t = this.C.pixti( i )\n\n\t\t// no activity for background/stroma\n\t\tif( t <= 0 ){ return 0 }\n\t\t\n\t\t//neighborhood pixels\n\t\tconst N = this.C.neighi( i )\n\t\t\n\t\t// r activity product, nN number of neighbors.\n\t\t// we start with the current pixel.\n\t\tlet nN = 1, r = this.pxact( i )\n\n\t\t// loop over neighbor pixels\n\t\tfor( let j = 0 ; j < N.length ; j ++ ){ \n\t\t\tconst tn = this.C.pixti( N[j] ) \n\n\t\t\t// a neighbor only contributes if it belongs to the same cell.\n\t\t\t// if it does and has activity 0, the product will also be zero so\n\t\t\t// we can already return.\n\t\t\tif( tn == t ){\n\t\t\t\tif( this.pxact( N[j] ) == 0 ) return 0\n\t\t\t\tr *= this.pxact( N[j] )\n\t\t\t\tnN ++ \n\t\t\t}\n\t\t}\n\t\t\n\t\t// Geometric mean computation. \n\t\treturn Math.pow(r,1/nN)\n\t}\n\n\n\t/* Current activity (under the Act model) of the pixel with ID i. */\n\tpxact ( i ){\n\t\n\t\t// If the pixel is not in the cellpixelsbirth object, it has activity 0.\n\t\t/*if ( !this.cellpixelsbirth[i] ){\n\t\t\treturn 0\n\t\t}*/\n\t\t\n\t\t// cellkind of current pixel\n\t\tconst k = this.C.cellKind( this.C.pixti(i) )\n\t\t\n\t\t// Activity info\n\t\tconst actmax = this.conf[\"MAX_ACT\"][k], age = (this.C.time - this.cellpixelsbirth[i])\n\n\t\treturn (age > actmax) ? 0 : actmax-age\n\t}\n\t/* eslint-disable no-unused-vars*/\n\tpostSetpixListener( i, t_old, t ){\n\t\tthis.cellpixelsbirth[i] = this.C.time\n\t}\n\n\n}\n\nexport default ActivityConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/ActivityConstraintOld.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 227,
    "kind": "class",
    "name": "ActivityConstraint",
    "memberof": "src/hamiltonian/ActivityConstraintOld.js",
    "static": true,
    "longname": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/ActivityConstraintOld.js",
    "importStyle": "ActivityConstraint",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/SoftConstraint.js~SoftConstraint"
    ]
  },
  {
    "__docId__": 228,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "cellpixelsbirth",
    "memberof": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint",
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint#cellpixelsbirth",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "activityAt",
    "memberof": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint",
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint#activityAt",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "activityAtArith",
    "memberof": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint#activityAtArith",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "activityAtGeom",
    "memberof": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint#activityAtGeom",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "pxact",
    "memberof": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint#pxact",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "postSetpixListener",
    "memberof": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityConstraintOld.js~ActivityConstraint#postSetpixListener",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "t_old",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "src/hamiltonian/ActivityMultiBackground.js",
    "content": "\n\nimport SoftConstraint from \"./SoftConstraint.js\"\n\n/**\n * The ActivityMultiBackground constraint implements the activity constraint of Potts models,\n but allows users to specify locations on the grid where LAMBDA_ACT is different. \n\tSee also: \n\t\tNiculescu I, Textor J, de Boer RJ (2015) \n \t\tCrawling and Gliding: A Computational Model for Shape-Driven Cell Migration. \n \t\tPLoS Comput Biol 11(10): e1004280. \n \t\thttps://doi.org/10.1371/journal.pcbi.1004280\n */\nclass ActivityMultiBackground extends SoftConstraint {\n\n\t/** Creates an instance of the ActivityMultiBackground constraint \n\t* @param {object} conf - Configuration object with the parameters.\n\t* ACT_MEAN is a single string determining whether the activity mean should be computed\n\t* using a \"geometric\" or \"arithmetic\" mean. \n\t*/\n\tconstructor( conf ){\n\t\tsuper( conf )\n\n\t\tthis.cellpixelsact = {} // activity of cellpixels with a non-zero activity\n\t\t\n\t\t// Wrapper: select function to compute activities based on ACT_MEAN in conf\n\t\tif( this.conf.ACT_MEAN == \"arithmetic\" ){\n\t\t\tthis.activityAt = this.activityAtArith\n\t\t} else {\n\t\t\tthis.activityAt = this.activityAtGeom\n\t\t}\n\t\t\n\t\t\n\t\tthis.bgvoxels = []\n\t\tthis.setup = false\n\t}\n\t\n\tconfChecker(){\n\t\tthis.confCheckString( \"ACT_MEAN\" , [ \"geometric\", \"arithmetic\" ] )\n\t\t//this.confCheckCellNonNegative( \"LAMBDA_ACT\" )\n\t\tthis.confCheckCellNonNegative( \"MAX_ACT\" )\n\t}\n\t\n\t\t\n\tsetBackgroundVoxels(){\n\t\n\t\tfor( let bgkind = 0; bgkind < this.conf[\"BACKGROUND_VOXELS\"].length; bgkind++ ){\n\t\t\tthis.bgvoxels.push({})\n\t\t\tfor( let v of this.conf[\"BACKGROUND_VOXELS\"][bgkind] ){\n\t\t\t\tthis.bgvoxels[bgkind][ this.C.grid.p2i(v) ] = true\n\t\t\t}\n\t\t}\n\t\tthis.setup = true\n\n\t}\n\t\n\t/* ======= ACT MODEL ======= */\n\n\t/* Act model : compute local activity values within cell around pixel i.\n\t * Depending on settings in conf, this is an arithmetic (activityAtArith)\n\t * or geometric (activityAtGeom) mean of the activities of the neighbors\n\t * of pixel i.\n\t */\n\t/* Hamiltonian computation */ \n\tdeltaH ( sourcei, targeti, src_type, tgt_type ){\n\t\n\t\tif( ! this.setup ){\n\t\t\tthis.setBackgroundVoxels()\n\t\t}\n\n\t\tlet deltaH = 0, maxact, lambdaact\n\t\tconst src_kind = this.C.cellKind( src_type )\n\t\tconst tgt_kind = this.C.cellKind( tgt_type )\n\t\tlet bgindex1 = 0, bgindex2 = 0\n\t\t\n\t\tfor( let bgkind = 0; bgkind < this.bgvoxels.length; bgkind++ ){\n\t\t\tif( sourcei in this.bgvoxels[bgkind] ){\n\t\t\t\tbgindex1 = bgkind\n\t\t\t}\n\t\t\tif( targeti in this.bgvoxels[bgkind] ){\n\t\t\t\tbgindex2 = bgkind\n\t\t\t}\n\t\t}\n\t\t\n\n\t\t// use parameters for the source cell, unless that is the background.\n\t\t// In that case, use parameters of the target cell.\n\t\tif( src_type != 0 ){\n\t\t\tmaxact = this.conf[\"MAX_ACT\"][src_kind]\n\t\t\tlambdaact = this.conf[\"LAMBDA_ACT_MBG\"][src_kind][bgindex1]\n\t\t} else {\n\t\t\t// special case: punishment for a copy attempt from background into\n\t\t\t// an active cell. This effectively means that the active cell retracts,\n\t\t\t// which is different from one cell pushing into another (active) cell.\n\t\t\tmaxact = this.conf[\"MAX_ACT\"][tgt_kind]\n\t\t\tlambdaact = this.conf[\"LAMBDA_ACT_MBG\"][tgt_kind][bgindex2]\n\t\t}\n\t\tif( !maxact || !lambdaact ){\n\t\t\treturn 0\n\t\t}\n\n\t\t// compute the Hamiltonian. The activityAt method is a wrapper for either activityAtArith\n\t\t// or activityAtGeom, depending on conf (see constructor).\t\n\t\tdeltaH += lambdaact*(this.activityAt( targeti ) - this.activityAt( sourcei ))/maxact\n\t\treturn deltaH\n\t}\n\n\t/* Activity mean computation methods for arithmetic/geometric mean.\n\tThe method used by activityAt is defined by conf ( see constructor ).*/\n\tactivityAtArith( i ){\n\t\tconst t = this.C.pixti( i )\n\t\t\n\t\t// no activity for background/stroma\n\t\tif( t <= 0 ){ return 0 }\n\t\t\n\t\t// neighborhood pixels\n\t\tconst N = this.C.neighi(i)\n\t\t\n\t\t// r activity summed, nN number of neighbors\n\t\t// we start with the current pixel. \n\t\tlet r = this.pxact(i), nN = 1\n\t\t\n\t\t// loop over neighbor pixels\n\t\tfor( let j = 0 ; j < N.length ; j ++ ){ \n\t\t\tconst tn = this.C.pixti( N[j] ) \n\t\t\t\n\t\t\t// a neighbor only contributes if it belongs to the same cell\n\t\t\tif( tn == t ){\n\t\t\t\tr += this.pxact( N[j] )\n\t\t\t\tnN ++ \n\t\t\t}\n\t\t}\n\n\t\t// average is summed r divided by num neighbors.\n\t\treturn r/nN\n\t}\n\tactivityAtGeom ( i ){\n\t\tconst t = this.C.pixti( i )\n\n\t\t// no activity for background/stroma\n\t\tif( t <= 0 ){ return 0 }\n\t\t\n\t\t//neighborhood pixels\n\t\tconst N = this.C.neighi( i )\n\t\t\n\t\t// r activity product, nN number of neighbors.\n\t\t// we start with the current pixel.\n\t\tlet nN = 1, r = this.pxact( i )\n\n\t\t// loop over neighbor pixels\n\t\tfor( let j = 0 ; j < N.length ; j ++ ){ \n\t\t\tconst tn = this.C.pixti( N[j] ) \n\n\t\t\t// a neighbor only contributes if it belongs to the same cell.\n\t\t\t// if it does and has activity 0, the product will also be zero so\n\t\t\t// we can already return.\n\t\t\tif( tn == t ){\n\t\t\t\tif( this.pxact( N[j] ) == 0 ) return 0\n\t\t\t\tr *= this.pxact( N[j] )\n\t\t\t\tnN ++ \n\t\t\t}\n\t\t}\n\t\t\n\t\t// Geometric mean computation. \n\t\treturn Math.pow(r,1/nN)\n\t}\n\n\n\t/* Current activity (under the Act model) of the pixel with ID i. */\n\tpxact ( i ){\n\t\t// If the pixel is not in the cellpixelsact object, it has activity 0.\n\t\t// Otherwise, its activity is stored in the object.\n\t\treturn this.cellpixelsact[i] || 0\n\t}\n\t\n\t/* eslint-disable no-unused-vars*/\n\tpostSetpixListener( i, t_old, t ){\n\t\t// After setting a pixel, it gets the MAX_ACT value of its cellkind.\n\t\tconst k = this.C.cellKind( t )\n\t\tthis.cellpixelsact[i] = this.conf[\"MAX_ACT\"][k]\n\t}\n\t\n\tpostMCSListener(){\n\t\t// iterate over cellpixelsage and decrease all activities by one.\n\t\tfor( let key in this.cellpixelsact ){\n\t\t\t// activities that reach zero no longer need to be stored.\n\t\t\tif( --this.cellpixelsact[ key ] <= 0 ){\n\t\t\t\tdelete this.cellpixelsact[ key ]\n\t\t\t}\n\t\t}\n\t}\n\n\n}\n\nexport default ActivityMultiBackground\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/ActivityMultiBackground.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "class",
    "name": "ActivityMultiBackground",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js",
    "static": true,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/ActivityMultiBackground.js",
    "importStyle": "ActivityMultiBackground",
    "description": "The ActivityMultiBackground constraint implements the activity constraint of Potts models,\nbut allows users to specify locations on the grid where LAMBDA_ACT is different. \nSee also: \nNiculescu I, Textor J, de Boer RJ (2015) \nCrawling and Gliding: A Computational Model for Shape-Driven Cell Migration. \nPLoS Comput Biol 11(10): e1004280. \nhttps://doi.org/10.1371/journal.pcbi.1004280",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "src/hamiltonian/SoftConstraint.js~SoftConstraint"
    ]
  },
  {
    "__docId__": 239,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#constructor",
    "access": "public",
    "description": "Creates an instance of the ActivityMultiBackground constraint ",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "Configuration object with the parameters.\nACT_MEAN is a single string determining whether the activity mean should be computed\nusing a \"geometric\" or \"arithmetic\" mean."
      }
    ]
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "cellpixelsact",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#cellpixelsact",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "activityAt",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#activityAt",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "member",
    "name": "bgvoxels",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#bgvoxels",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "setup",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#setup",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "confChecker",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#confChecker",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "setBackgroundVoxels",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#setBackgroundVoxels",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "activityAtArith",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#activityAtArith",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "activityAtGeom",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#activityAtGeom",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "pxact",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#pxact",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "postSetpixListener",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#postSetpixListener",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "t_old",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "postMCSListener",
    "memberof": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ActivityMultiBackground.js~ActivityMultiBackground#postMCSListener",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "src/hamiltonian/Adhesion.js",
    "content": "/** \n * Implements the adhesion constraint of Potts models. \n */\n\nimport SoftConstraint from \"./SoftConstraint.js\"\n\nclass Adhesion extends SoftConstraint {\n\t/* Check if conf parameters are correct format*/\n\tconfChecker(){\n\t\tthis.confCheckCellMatrix(\"J\")\n\t}\n\n\n\t/*  Get adhesion between two cells with type (identity) t1,t2 from \"conf\" using \"this.par\". */\n\tJ( t1, t2 ){\n\t\treturn this.conf[\"J\"][this.C.cellKind(t1)][this.C.cellKind(t2)]\n\t}\n\t/*  Returns the Hamiltonian around pixel p, which has ID (type) tp (surrounding pixels'\n\t *  types are queried). This Hamiltonian only contains the neighbor adhesion terms.\n\t */\n\tH( i, tp ){\n\t\tlet r = 0, tn\n\t\t/* eslint-disable */\n\t\tconst N = this.C.grid.neighi( i )\n\t\tfor( let j = 0 ; j < N.length ; j ++ ){\n\t\t\ttn = this.C.pixti( N[j] )\n\t\t\tif( tn != tp ) r += this.J( tn, tp )\n\t\t}\n\t\treturn r\n\t}\n\tdeltaH( sourcei, targeti, src_type, tgt_type ){\n\t\treturn this.H( targeti, src_type ) - this.H( targeti, tgt_type )\n\t}\n}\n\nexport default Adhesion\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/Adhesion.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "class",
    "name": "Adhesion",
    "memberof": "src/hamiltonian/Adhesion.js",
    "static": true,
    "longname": "src/hamiltonian/Adhesion.js~Adhesion",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/Adhesion.js",
    "importStyle": "Adhesion",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/SoftConstraint.js~SoftConstraint"
    ]
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "confChecker",
    "memberof": "src/hamiltonian/Adhesion.js~Adhesion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Adhesion.js~Adhesion#confChecker",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "J",
    "memberof": "src/hamiltonian/Adhesion.js~Adhesion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Adhesion.js~Adhesion#J",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "t1",
        "types": [
          "*"
        ]
      },
      {
        "name": "t2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "H",
    "memberof": "src/hamiltonian/Adhesion.js~Adhesion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Adhesion.js~Adhesion#H",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "tp",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/Adhesion.js~Adhesion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Adhesion.js~Adhesion#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "file",
    "name": "src/hamiltonian/AdhesionMultiBackground.js",
    "content": "/** \n * Implements the adhesion constraint of Potts models, but allows multiple types of \n background. Only the 0 background is physically present on the grid, but the parameters\n are taken from other background types depending on whether the background type of that\n location is set.\n Adhesion parameters are now in J_MULTI instead of J.\n */\n\nimport SoftConstraint from \"./SoftConstraint.js\"\n\nclass AdhesionMultiBackground extends SoftConstraint {\n\n\tconstructor( conf ){\n\t\n\t\tsuper( conf )\n\t\t\n\t\tthis.bgvoxels = []\n\t\tthis.setup = false\n\t\t\n\t}\n\t\n\tsetBackgroundVoxels(){\n\t\n\t\tfor( let bgkind = 0; bgkind < this.conf[\"BACKGROUND_VOXELS\"].length; bgkind++ ){\n\t\t\tthis.bgvoxels.push({})\n\t\t\tfor( let v of this.conf[\"BACKGROUND_VOXELS\"][bgkind] ){\n\t\t\t\tthis.bgvoxels[bgkind][ this.C.grid.p2i(v) ] = true\n\t\t\t}\n\t\t}\n\t\tthis.setup = true\n\n\t}\n\n\t/* Check if conf parameters are correct format*/\n\tconfChecker(){\n\t\tthis.confCheckCellMatrix(\"J_MULTI\")\n\t}\n\n\n\t/*  Get adhesion between two cells with type (identity) t1,t2 from \"conf\" using \"this.par\". \n\tAdjusted method from the default adhesion constraint to account for multiple backgrounds.\n\ti1 and i2 are the positions of the pixels to assess adhesion from.*/\n\tJ( i1 , i2, t1, t2 ){\n\t\n\t\t// Get cellkinds of the types\n\t\tlet k1 = this.C.cellKind( t1 ), k2 = this.C.cellKind( t2 )\n\t\n\t\t// If one of the types is background, the parameters may change depending on \n\t\t// location\n\t\tif( k1 == 0 ){\n\t\t\tfor( let bgkind = 0; bgkind < this.bgvoxels.length; bgkind++ ){\n\t\t\t\tif( i1 in this.bgvoxels[bgkind] ){\n\t\t\t\t\tk1 = bgkind\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif( k2 == 0 ){\n\t\t\tfor( let bgkind = 0; bgkind < this.bgvoxels.length; bgkind++ ){\n\t\t\t\tif( i2 in this.bgvoxels[bgkind] ){\n\t\t\t\t\tk2 = bgkind\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn this.conf[\"J_MULTI\"][k1][k2]\n\t}\n\tH( i, tp ){\n\t\tlet r = 0, tn\n\t\t/* eslint-disable */\n\t\tconst N = this.C.grid.neighi( i )\n\t\tfor( let j = 0 ; j < N.length ; j ++ ){\n\t\t\ttn = this.C.pixti( N[j] )\n\t\t\tif( tn != tp ){\n\t\t\t\tr += this.J( i, N[j], tn, tp )\n\t\t\t} else if ( tn == 0 ){ // and since tn == tp, tp is also zero\n\t\t\t\tr += this.J( i, N[j], tn, tp )\n\t\t\t}\n\t\t}\n\t\treturn r\n\t}\n\tdeltaH( sourcei, targeti, src_type, tgt_type ){\n\t\tif( ! this.setup ){\n\t\t\tthis.setBackgroundVoxels()\n\t\t}\n\t\treturn this.H( targeti, src_type ) - this.H( targeti, tgt_type )\n\t}\n\t\n}\n\nexport default AdhesionMultiBackground\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/AdhesionMultiBackground.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 261,
    "kind": "class",
    "name": "AdhesionMultiBackground",
    "memberof": "src/hamiltonian/AdhesionMultiBackground.js",
    "static": true,
    "longname": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/AdhesionMultiBackground.js",
    "importStyle": "AdhesionMultiBackground",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/SoftConstraint.js~SoftConstraint"
    ]
  },
  {
    "__docId__": 262,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "bgvoxels",
    "memberof": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground",
    "static": false,
    "longname": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground#bgvoxels",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "setup",
    "memberof": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground",
    "static": false,
    "longname": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground#setup",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "setBackgroundVoxels",
    "memberof": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground#setBackgroundVoxels",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "confChecker",
    "memberof": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground#confChecker",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "J",
    "memberof": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground#J",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "i1",
        "types": [
          "*"
        ]
      },
      {
        "name": "i2",
        "types": [
          "*"
        ]
      },
      {
        "name": "t1",
        "types": [
          "*"
        ]
      },
      {
        "name": "t2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "H",
    "memberof": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground#H",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "tp",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/AdhesionMultiBackground.js~AdhesionMultiBackground#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "file",
    "name": "src/hamiltonian/AttractionPointConstraint.js",
    "content": "\n/* Implements a global bias direction of motion.\n\tThis constraint computes the *unnormalized* dot product \n\tbetween copy attempt vector and target direction vector.\n\n\tSupply the target direction vector in normalized form, or \n\tuse the length of the vector to influence the strength \n\tof this bias.\n\n\tWorks for torus grids, if they are \"big enough\".\n\t*/\n\nimport Constraint from \"./Constraint.js\"\n\nclass AttractionPointConstraint extends Constraint {\n\tget CONSTRAINT_TYPE() {\n\t\treturn \"soft\"\n\t}\n\tdeltaH( src_i, tgt_i, src_type ){\n\t\tlet l = this.conf[\"LAMBDA_ATTRACTIONPOINT\"][this.C.cellKind( src_type )]\n\t\tif( !l ){\n\t\t\treturn 0\n\t\t}\n\t\tlet torus = this.C.conf.torus\n\t\tlet tgt = this.conf[\"ATTRACTIONPOINT\"][this.C.cellKind( src_type )]\n\t\tlet p1 = this.C.grid.i2p( src_i ), p2 = this.C.grid.i2p( tgt_i )\n\t\t// To bias a copy attempt p1 -> p2 in the direction of vector 'dir'.\n\t\tlet r = 0., ldir = 0.\n\t\t// loops over the coordinates x,y,(z)\n\t\tfor( let i = 0; i < p1.length ; i++ ){\n\t\t\tlet dir_i = tgt[i] - p1[i]\n\t\t\tldir += dir_i * dir_i\n\t\t\tlet si = this.C.extents[i]\n\t\t\t// direction of the copy attempt on this coordinate is from p1 to p2\n\t\t\tlet dx = p2[i] - p1[i]\n\t\t\tif( torus ){\n\t\t\t\t// If distance is greater than half the grid size, correct the\n\t\t\t\t// coordinate.\n\t\t\t\tif( dx > si/2 ){\n\t\t\t\t\tdx -= si\n\t\t\t\t} else if( dx < -si/2 ){\n\t\t\t\t\tdx += si\n\t\t\t\t}\n\t\t\t}\n\t\t\t// direction of the gradient\n\t\t\tr += dx * dir_i \n\t\t}\n\t\treturn - r * l / Math.sqrt( ldir )\n\t}\n}\n\nexport default AttractionPointConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/AttractionPointConstraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "class",
    "name": "AttractionPointConstraint",
    "memberof": "src/hamiltonian/AttractionPointConstraint.js",
    "static": true,
    "longname": "src/hamiltonian/AttractionPointConstraint.js~AttractionPointConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/AttractionPointConstraint.js",
    "importStyle": "AttractionPointConstraint",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/Constraint.js~Constraint"
    ]
  },
  {
    "__docId__": 273,
    "kind": "get",
    "name": "CONSTRAINT_TYPE",
    "memberof": "src/hamiltonian/AttractionPointConstraint.js~AttractionPointConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/AttractionPointConstraint.js~AttractionPointConstraint#CONSTRAINT_TYPE",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/AttractionPointConstraint.js~AttractionPointConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/AttractionPointConstraint.js~AttractionPointConstraint#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "src_i",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_i",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "file",
    "name": "src/hamiltonian/AutoAdderConfig.js",
    "content": "/* This class enables automatic addition of Hamiltonian terms to a CPM\n * through their parameter names.\n *\n * For each parameter name, we specify one Hamiltonian term. If the parameter\n * is present, then a new instance of this term is initialized with the CPM's\n * configuration as parameter and added to the CPM. */\n\nimport Adhesion from \"./Adhesion.js\"\nimport VolumeConstraint from \"./VolumeConstraint.js\"\nimport ActivityConstraint from \"./ActivityConstraint.js\"\nimport PerimeterConstraint from \"./PerimeterConstraint.js\"\nimport BarrierConstraint from \"./BarrierConstraint.js\"\n\nlet AutoAdderConfig = {\n\tJ : Adhesion,\n\tLAMBDA_V : VolumeConstraint,\n\tLAMBDA_ACT : ActivityConstraint,\n\tLAMBDA_P : PerimeterConstraint,\n\tIS_BARRIER : BarrierConstraint\n}\n\nexport default AutoAdderConfig\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/AutoAdderConfig.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 276,
    "kind": "variable",
    "name": "AutoAdderConfig",
    "memberof": "src/hamiltonian/AutoAdderConfig.js",
    "static": true,
    "longname": "src/hamiltonian/AutoAdderConfig.js~AutoAdderConfig",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/AutoAdderConfig.js",
    "importStyle": "AutoAdderConfig",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"J\": *, \"LAMBDA_V\": *, \"LAMBDA_ACT\": *, \"LAMBDA_P\": *, \"IS_BARRIER\": *}"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "src/hamiltonian/BarrierConstraint.js",
    "content": "/** \n * Allows a \"barrier\" celltype from and into which copy attempts are forbidden. \n */\n\nimport HardConstraint from \"./HardConstraint.js\"\n\nclass BarrierConstraint extends HardConstraint {\n\tconfChecker(){\n\t\tthis.confCheckCellBoolean( \"IS_BARRIER\" )\n\t}\n\n\tfulfilled( src_i, tgt_i, src_type, tgt_type ){\n\t\n\t\t// Fulfilled = false when either src or tgt pixel is of the barrier cellkind\t\n\t\tif( this.conf[\"IS_BARRIER\"][this.C.cellKind( src_type ) ] ){\n\t\t\treturn false\n\t\t}\n\n\t\tif( this.conf[\"IS_BARRIER\"][this.C.cellKind( tgt_type ) ] ){\n\t\t\treturn false\n\t\t}\n\n\t\treturn true\n\t}\n}\n\nexport default BarrierConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/BarrierConstraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "class",
    "name": "BarrierConstraint",
    "memberof": "src/hamiltonian/BarrierConstraint.js",
    "static": true,
    "longname": "src/hamiltonian/BarrierConstraint.js~BarrierConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/BarrierConstraint.js",
    "importStyle": "BarrierConstraint",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/HardConstraint.js~HardConstraint"
    ]
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "confChecker",
    "memberof": "src/hamiltonian/BarrierConstraint.js~BarrierConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/BarrierConstraint.js~BarrierConstraint#confChecker",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "fulfilled",
    "memberof": "src/hamiltonian/BarrierConstraint.js~BarrierConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/BarrierConstraint.js~BarrierConstraint#fulfilled",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "src_i",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_i",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "file",
    "name": "src/hamiltonian/ChemotaxisConstraint.js",
    "content": "import SoftConstraint from \"./SoftConstraint.js\"\nimport CoarseGrid from \"../grid/CoarseGrid.js\"\n\nclass ChemotaxisConstraint extends SoftConstraint {\n\tset CPM(C){\n\t\tthis.C = C\n\t}\n\tconfChecker(){\n\t\tthis.confCheckCellNonNegative( \"LAMBDA_CH\" )\n\t\tthis.confCheckPresenceOf( \"CH_FIELD\" )\n\t}\n\n\tconstructor( conf ){\n\t\tsuper( conf )\n\t\tthis.conf = conf\n\t\tthis.field = conf.CH_FIELD\n\t\tif( this.field instanceof CoarseGrid ){\n\t\t\tthis.deltaH = this.deltaHCoarse\n\t\t}\n\t}\n\n\tdeltaHCoarse( sourcei, targeti, src_type ){\n\t\tlet sp = this.C.grid.i2p( sourcei ), tp = this.C.grid.i2p( targeti )\n\t\tlet delta = this.field.pixt( tp ) - this.field.pixt( sp )\n\t\tlet lambdachem = this.conf[\"LAMBDA_CH\"][this.C.cellKind(src_type)]\n\t\treturn -delta*lambdachem\n\t}\n\n\tdeltaH( sourcei, targeti, src_type  ){\n\t\tlet delta = this.field.pixt( targeti ) - this.field.pixt( sourcei )\n\t\tlet lambdachem = this.conf[\"LAMBDA_CH\"][this.C.cellKind(src_type)]\n\t\treturn -delta*lambdachem\n\t}\n}\n\nexport default ChemotaxisConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/ChemotaxisConstraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "class",
    "name": "ChemotaxisConstraint",
    "memberof": "src/hamiltonian/ChemotaxisConstraint.js",
    "static": true,
    "longname": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/ChemotaxisConstraint.js",
    "importStyle": "ChemotaxisConstraint",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/SoftConstraint.js~SoftConstraint"
    ]
  },
  {
    "__docId__": 283,
    "kind": "set",
    "name": "CPM",
    "memberof": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint#CPM",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "C",
    "memberof": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint#C",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "confChecker",
    "memberof": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint#confChecker",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 286,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "conf",
    "memberof": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint#conf",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "field",
    "memberof": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint#field",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "deltaHCoarse",
    "memberof": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint#deltaHCoarse",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraint.js~ChemotaxisConstraint#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "file",
    "name": "src/hamiltonian/ChemotaxisConstraintOld.js",
    "content": "/**\n * Implements the chemotaxis constraint of Potts models.\n * At the moment, this only works for 2d-CPMs modeled as a torus\n */\n\n// conf_example = {\n//   // should always be C.grid.field_size.x\n//   FIELD_SIZE: C.grid.field_size.x,\n//   // should me the math variable created by mathjs import\n//   MATHOBJ: math,\n//   // diffusion coefficient in mm^2/second\n//   D: 6.2 * Math.pow(10, -5),\n//   // how many mm is a pixel wide/high\n//   MM_PER_PIXEL: .38/600,\n//   // how many seconds are modeled by a MCS\n//   SECOND_PER_MCS: 1,\n//   // how many diffusion steps are performed per MCS\n//   DIFFUSION_PER_MCS: 10,\n//   // how coarse should the diffusion grid be\n//   // setting this to 10 will result in a 60x60 diffusion grid if the main grid has a resolution of 600x600\n//   RESOLUTION_DECREASE: 10,\n//   // which cell type should secrete the chemokine\n//   SECRETOR: 2,\n//   // how much chemokine should each secreting pixel secrete\n//   SECRETION: 100,\n//   // what percentage of the chemokine should decay after a MCS\n//   // setting this variable to 0 will disable decay, setting it to 1 will remove all chemokine after every MCS\n//   DECAY: .1,\n//   // how sensitive should all cell types be to the chemokine\n//   // use positive values for attraction, and negative values for repulsion\n//   LAMBDA_CHEMOTAXIS: [0,500,0,0,0]\n// }\n\n\nimport SoftConstraint from \"./SoftConstraint.js\"\nimport Grid2D from \"../Grid2D.js\"\nimport math from \"mathjs\"\n\nclass ChemotaxisConstraint extends SoftConstraint {\n\n\tset CPM(C){\n\t\tthis.C = C\n\t\tif( C.ndim > 2 ){ \n\t\t\tthrow(\"only works for 2-dimensional CPMs!\")\n\t\t}\n\t\tif( C.field_size.x != C.field_size.y ){ \n\t\t\tthrow(\"only works for square CPMs!\")\n\t\t}\n\t\tthis.size = C.field_size.x\n\t\tthis.newSize = Math.ceil(this.size/this.resolutionDecrease)\n\t\tthis.initializeField()\n\t\tthis.chemoGrid = new Grid2D([this.size,this.size], C.torus, \"Float32\")\n\t}\n\n\tnmod(x, N) {\n\t\treturn ((x % N) + N) % N\n\t}\n\n\tt21(x,y,N){\n\t\treturn this.nmod(y,N)*N+this.nmod(x,N)\n\t}\n\n\tinitializeField(){\n\t\t// prepare laplacian matrix\n\t\tthis.L = math.multiply( math.identity( (this.newSize)*(this.newSize), (this.newSize)*(this.newSize), \"sparse\" ), -4 )\n\t\tfor( let x = 0 ; x < (this.newSize) ; x ++ ){\n\t\t\tfor( let y = 0 ; y < (this.newSize); y ++ ){\n\t\t\t\tlet i = this.t21(x,y,(this.newSize))\n\t\t\t\tthis.L.set([i,this.t21(this.nmod(x-1,(this.newSize)),y,(this.newSize))],1)\n\t\t\t\tthis.L.set([i,this.t21(this.nmod(x+1,(this.newSize)),y,(this.newSize))],1)\n\t\t\t\tthis.L.set([i,this.t21(x,this.nmod(y-1,(this.newSize)),(this.newSize))],1)\n\t\t\t\tthis.L.set([i,this.t21(x,this.nmod(y+1,(this.newSize)),(this.newSize))],1)\n\t\t\t}\n\t\t}\n\n\t\t// scale matrix to diffusion coefficient & spatiotemporal step\n\t\tthis.A = math.multiply( this.L, this.D * this.dt / this.dx / this.dx )\n\t\tthis.chemokinelevel = math.zeros((this.newSize)*(this.newSize),1)\n\n\t\t// create list for faster interpolation\n\t\tthis.interpolatelist = [[]]\n\t\tfor (var x = 0; x < this.size; x++) {\n\t\t\tthis.interpolatelist.push([])\n\t\t\tfor (var y = 0; y < this.size; y++) {\n\t\t\t\tlet xplus = x/this.resolutionDecrease + 0.001\n\t\t\t\tlet yplus = y/this.resolutionDecrease + 0.001\n\t\t\t\tlet p1 = Math.abs((x/this.resolutionDecrease - math.floor(xplus)) * (y/this.resolutionDecrease - math.floor(yplus)))\n\t\t\t\tlet p2 = Math.abs((x/this.resolutionDecrease - math.floor(xplus)) * (math.ceil(yplus) - y/this.resolutionDecrease))\n\t\t\t\tlet p3 = Math.abs((math.ceil(xplus) - x/this.resolutionDecrease) * (y/this.resolutionDecrease - math.floor(yplus)))\n\t\t\t\tlet p4 = Math.abs((math.ceil(xplus) - x/this.resolutionDecrease) * (math.ceil(yplus) - y/this.resolutionDecrease))\n\t\t\t\tthis.interpolatelist[x].push([p1, p2, p3, p4])\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconstructor( conf ){\n\t\tsuper(conf)\n\t\tthis.conf = conf\n\t\tthis.resolutionDecrease = conf[\"RESOLUTION_DECREASE\"]\n\t\tthis.DPerMCS = conf[\"DIFFUSION_PER_MCS\"]\n\t\tthis.D = conf[\"D\"]\n\t\tthis.D /= this.DPerMCS\n\t\tthis.dx = conf[\"MM_PER_PIXEL\"] * this.resolutionDecrease\n\t\tthis.dt = conf[\"SECOND_PER_MCS\"] / 60\n\t\tthis.secretion = conf[\"SECRETION\"]\n\t\tthis.decay = conf[\"DECAY\"]\n\t}\n\n\t// at every pixel occupied by an infected cell, secrete (secretion rate/(resolutionDecrease^2)) chemokine\n\tproduceChemokine () {\n\t\tfor (var x = 0; x < this.size; x++) {\n\t\t\tfor (var y = 0; y < this.size; y++) {\n\t\t\t\tif (this.C.t2k[this.C.pixti(this.C.grid.p2i([x,y]))] == this.conf[\"SECRETOR\"]) {\n\t\t\t\t\tlet index = [this.t21(math.floor(x/this.resolutionDecrease),math.floor(y/this.resolutionDecrease),(this.newSize)),0]\n\t\t\t\t\tthis.chemokinelevel.set(index, this.chemokinelevel.get(index) + (this.secretion/(this.resolutionDecrease*this.resolutionDecrease)) * this.dt)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// perform diffusion\n\tupdateValues () {\n\t\tthis.chemokinelevel = math.add( math.multiply( this.A, this.chemokinelevel ), this.chemokinelevel )\n\t}\n\n\t// interpolate between the grid points in the diffusion grid to obtain a more accurate chemokine value for the main grid\n\tinterpolate(x, y, c) {\n\t\tlet xplus = x + 0.001\n\t\tlet yplus = y + 0.001\n\t\tlet cx = this.nmod(((xplus) << 0)+1,this.newSize)\n\t\tlet fx = this.nmod((xplus) << 0,this.newSize)\n\t\tlet cy = this.nmod(((yplus) << 0)+1,this.newSize)\n\t\tlet fy = this.nmod((yplus) << 0,this.newSize)\n\t\tlet p1 = c.get([cx, cy]) * this.interpolatelist[x*this.resolutionDecrease][y*this.resolutionDecrease][0]\n\t\tlet p2 = c.get([cx, fy]) * this.interpolatelist[x*this.resolutionDecrease][y*this.resolutionDecrease][1]\n\t\tlet p3 = c.get([fx, cy]) * this.interpolatelist[x*this.resolutionDecrease][y*this.resolutionDecrease][2]\n\t\tlet p4 = c.get([fx, fy]) * this.interpolatelist[x*this.resolutionDecrease][y*this.resolutionDecrease][3]\n\t\treturn (p1+p2+p3+p4)\n\t}\n\n\t// updates the main grid with interpolated values of the chemokine grid\n\tupdateGrid () {\n\t\t// reshapes the lists in matrice for easy matrix interpolation\n\t\tlet chemokineMatrix = math.reshape(this.chemokinelevel, [(this.newSize), (this.newSize)])\n\t\tlet mv = 0.\n\t\tfor (let x = 0; x < this.size; x++) {\n\t\t\tlet scalex = x/this.resolutionDecrease\n\t\t\tfor (let y = 0; y < this.size; y++) {\n\t\t\t\tlet scaley = y/this.resolutionDecrease\n\t\t\t\tlet value = this.interpolate(scalex, scaley, chemokineMatrix)\n\t\t\t\tthis.chemoGrid.setpix( [y,x], value ) \n\t\t\t\tif( value > mv ){\n\t\t\t\t\tmv = value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.maxChemokineValue = mv\n\t\tthis.chemokinelevel = math.reshape(this.chemokinelevel, [(this.newSize)*(this.newSize), 1])\n\t}\n\n\t// removes a percentage of the chemokine\n\tremoveChemokine () {\n\t\tthis.chemokinelevel = math.multiply(this.chemokinelevel, 1 - this.decay * this.dt)\n\t}\n\n\tpostMCSListener(){\n\t\t// Chemokine is produced by all chemokine grid lattice sites\n\t\tthis.produceChemokine()\n\t\t// Every MCS, the chemokine diffuses 10 times\n\t\tfor(let i = 0; i < this.DPerMCS; i++) {\n\t\t\tthis.updateValues()\n\t\t}\n\t\t// Updates the main grid with interpolated values of the chemokine grid\n\t\tthis.updateGrid()\n\t\t// Chemokine decays\n\t\tthis.removeChemokine()\n\t}\n\n\t/* To bias a copy attempt p1 -> p2 in the direction of vector 'dir'.\n\t * This implements a linear gradient rather than a radial one as with pointAttractor. */\n\tlinAttractor ( p1, p2, dir ){\n\t\tlet r = 0., norm1 = 0, norm2 = 0, d1 = 0., d2 = 0.\n\t\t// loops over the coordinates x,y,(z)\n\t\tfor( let i = 0; i < p1.length ; i++ ){\n\t\t\t// direction of the copy attempt on this coordinate is from p1 to p2\n\t\t\td1 = p2[i] - p1[i]\n\t\t\t// direction of the gradient\n\t\t\td2 = dir[i]\n\t\t\tr += d1 * d2\n\t\t\tnorm1 += d1*d1\n\t\t\tnorm2 += d2*d2\n\t\t}\n\t\tif ( norm2 == 0 ) { return 0 }\n\t\treturn r/Math.sqrt(norm1)/Math.sqrt(norm2)\n\t}\n\n\tdeltaH( sourcei, targeti, src_type, tgt_type ){\n\t\t//let sp = this.C.grid.i2p( sourcei ), tp = this.C.grid.i2p( targeti )\n\t\tlet gradientvec2 = \n\t\t\tthis.chemoGrid.gradienti( sourcei )\n\t\tlet bias = \n\t\t\tthis.linAttractor( this.C.grid.i2p(sourcei), this.C.grid.i2p(targeti), gradientvec2 )\n\t\tlet lambdachem\n\t\tif( src_type != 0 ){\n\t\t\tlambdachem = this.conf[\"LAMBDA_CHEMOTAXIS\"][this.C.t2k[src_type]]\n\t\t} else {\n\t\t\tlambdachem = this.conf[\"LAMBDA_CHEMOTAXIS\"][this.C.t2k[tgt_type]]\n\t\t}\n\t\treturn -bias*lambdachem\n\t}\n}\n\nexport default ChemotaxisConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/ChemotaxisConstraintOld.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 293,
    "kind": "class",
    "name": "ChemotaxisConstraint",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js",
    "static": true,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/ChemotaxisConstraintOld.js",
    "importStyle": "ChemotaxisConstraint",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/SoftConstraint.js~SoftConstraint"
    ]
  },
  {
    "__docId__": 294,
    "kind": "set",
    "name": "CPM",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#CPM",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "C",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#C",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "size",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#size",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "newSize",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#newSize",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "chemoGrid",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#chemoGrid",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "nmod",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#nmod",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "N",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "t21",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#t21",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "N",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "initializeField",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#initializeField",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "L",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#L",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "A",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#A",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "chemokinelevel",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#chemokinelevel",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "interpolatelist",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#interpolatelist",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "conf",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#conf",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "resolutionDecrease",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#resolutionDecrease",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "DPerMCS",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#DPerMCS",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "D",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#D",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "dx",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#dx",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "dt",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#dt",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "secretion",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#secretion",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "decay",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#decay",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "produceChemokine",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#produceChemokine",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "updateValues",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#updateValues",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "interpolate",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#interpolate",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "updateGrid",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#updateGrid",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "maxChemokineValue",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#maxChemokineValue",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "removeChemokine",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#removeChemokine",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "postMCSListener",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#postMCSListener",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "linAttractor",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#linAttractor",
    "access": "public",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "params": [
      {
        "name": "p1",
        "types": [
          "*"
        ]
      },
      {
        "name": "p2",
        "types": [
          "*"
        ]
      },
      {
        "name": "dir",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ChemotaxisConstraintOld.js~ChemotaxisConstraint#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "file",
    "name": "src/hamiltonian/Constraint.js",
    "content": "\nclass Constraint {\n\tget CONSTRAINT_TYPE() {\n\t\tthrow(\"You need to implement the 'CONSTRAINT_TYPE' getter for this constraint!\")\n\t}\n\tget parameters(){\n\t\treturn null\n\t}\n\tconstructor( conf ){\n\t\tthis.conf = conf\n\t}\n\tset CPM(C){\n\t\tthis.C = C\n\t\tif( typeof this.confChecker === \"function\" ){\n\t\t\tthis.confChecker()\n\t\t}\n\t}\n\t/* The optional confChecker method should verify that all the required conf parameters\n\tare actually present in the conf object and have the right format.*/\n\tconfChecker( ){\n\t}\n\n\t// Check if the property exists at all\n\tconfCheckPresenceOf( name ){\n\t\tif( !this.conf.hasOwnProperty( name ) ){\n\t\t\tthrow( \"Cannot find parameter \" + name + \" in the conf object!\" )\n\t\t}\n\t\t\n\t}\n\n\tconfCheckTypeOf( name, type ){\n\t\tthis.confCheckPresenceOf( name )\n\t\t// Check if the property has the right type\n\t\tif( !( typeof this.conf[name] === type ) ){\n\t\t\tthrow( \"Conf object parameter \" + name + \" should be a \" + type +\"!\" )\n\t\t}\n\t}\n\n\t/* Helper check function for parameters that should be a single string,\n\twhich can take on one of the values in 'values'*/\n\tconfCheckString( name, values ){\n\t\tthis.confCheckPresenceOf( name )\n\t\tthis.confCheckTypeOf( name, \"string\" )\n\n\t\t// Check if the property has one of the allowed values.\n\t\tlet valueFound = false\n\t\tfor( let v of values ){\n\t\t\tif ( this.conf[name] == v ){\n\t\t\t\tvalueFound = true\n\t\t\t}\n\t\t}\n\t\t\n\t\tif( !valueFound ){\n\t\t\tthrow( \"Conf object parameter \" + name + \" has invalid value \" + this.conf[name] + \n\t\t\t\t\"! Please choose from: \" + values.join( \" / \" ) )\n\t\t}\n\t}\n\t/* Checker for parameters that should be a single number.*/\n\tconfCheckNumber( name ){\n\t\tthis.confCheckTypeOf( name, \"number\" )\n\t}\n\t\n\t/* Checker for parameters that should be a single non-negative number*/\n\tconfCheckSingleNonNegative( name ){\n\t\tthis.confCheckNumber( name )\n\t\tif ( this.conf[name] < 0 ){\n\t\t\tthrow( \"Conf object parameter \" + name + \" should be non-negative!\" )\n\t\t}\n\t}\n\t\n\t/* Helper function. Some parameters need to be specified for each cellkind, \n\tso to check those we first need to know the number of cellkinds.*/\n\tconfCheckCellKinds( n_default ){\n\t\tif( !this.C ){\n\t\t\tthrow(\"confCheck method called before addition to CPM!\")\n\t\t}\n\t\tif( !(\"n_cell_kinds\" in this.C) ){\n\t\t\tthis.C.n_cell_kinds = n_default - 1\n\t\t}\n\t\treturn this.C.n_cell_kinds\n\t}\n\n\tconfCheckArray( name, type ){\n\t\tthis.confCheckPresenceOf( name )\n\t\tlet p = this.conf[name]\n\t\tif( !(p instanceof Array) ){\n\t\t\tthrow( \"Parameter \" + name + \" is not an array!\" )\n\t\t}\n\t\t\n\t\t// Check if the property has the right type\n\t\tlet n_cell_kinds = this.confCheckCellKinds( p.length )\n\t\tif( this.conf[name].length != n_cell_kinds + 1 ){\n\t\t\tthrow( \"Conf object parameter \" + name + \n\t\t\t\" should be an array with an element for each cellkind including background!\" )\n\t\t}\n\t\t\n\t\t// Check if the property has the right value.\n\t\tfor( let e of this.conf[name] ){\n\t\t\tif( ! ( typeof e === type ) ){\n\t\t\t\tthrow( \"Conf object parameter \" + name + \n\t\t\t\t\t\" should be an array with \"+type+\"s!\" )\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Checker for parameters that come in an array with a number for each cellkind. */\n\tconfCheckCellNumbers( name ){\n\t\tthis.confCheckArray( name, \"number\" )\n\t}\n\t\n\t/* Same as confCheckCellNumbers, but now numbers should also not be negative*/\n\tconfCheckCellNonNegative( name ){\n\t\tthis.confCheckCellNumbers( name )\n\t\tfor( let e of this.conf[name] ){\n\t\t\tif( e < 0 ){\n\t\t\t\tthrow( \"Elements of parameter \" + name + \" should be non-negative!\" )\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/* Same as confCheckCellNonNegative, but now numbers should be between 0 and 1*/\n\tconfCheckCellProbability( name ){\n\t\tthis.confCheckCellNumbers( name )\n\t\tfor( let e of this.conf[name] ){\n\t\t\tif( e < 0 ){\n\t\t\t\tthrow( \"Elements of parameter \" + name + \" should be between 0 and 1!\" )\n\t\t\t}\n\t\t\tif( e > 1 ){\n\t\t\t\tthrow( \"Elements of parameter \" + name + \" should be between 0 and 1!\" )\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/* Same as confCheckCellNumbers, but now values should be boolean */\n\tconfCheckCellBoolean( name ){\n\t\tthis.confCheckArray( name, \"boolean\" )\n\t}\n\t\n\t/* Now the format should be a 'matrix' with rows and columns of numbers for each cellkind. */\n\tconfCheckCellMatrix( name, type=\"number\" ){\n\t\tthis.confCheckPresenceOf( name )\n\t\tlet p = this.conf[name]\n\t\tif( !(p instanceof Array) ){\n\t\t\tthrow( \"Parameter \" + name + \" is not an array!\" )\n\t\t}\n\n\t\t// Check if the property has the right type\n\t\tlet n_cell_kinds = this.confCheckCellKinds( p.length )\n\t\tif( !( p.length == n_cell_kinds + 1 ) ){\n\t\t\tthrow( \"Conf object parameter \" + name + \n\t\t\t\" must be an array with a sub-array for each cellkind including background!\" )\n\t\t}\n\t\t\n\t\tfor( let e of this.conf[name] ){\n\t\t\tif( ! ( e.length == n_cell_kinds + 1 ) ){\n\t\t\t\tthrow( \"Sub-arrays of \" + name + \n\t\t\t\t\" must have an element for each cellkind including background!\" )\n\t\t\t}\n\t\t\tfor( let ee of e ){\n\t\t\t\tif( !(typeof ee === type ) ){\n\t\t\t\t\tthrow(\"Elements in conf parameter \" + name + \" must all be of type \" + type + \"!\" )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default Constraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/Constraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 329,
    "kind": "class",
    "name": "Constraint",
    "memberof": "src/hamiltonian/Constraint.js",
    "static": true,
    "longname": "src/hamiltonian/Constraint.js~Constraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/Constraint.js",
    "importStyle": "Constraint",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 330,
    "kind": "get",
    "name": "CONSTRAINT_TYPE",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#CONSTRAINT_TYPE",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": null
  },
  {
    "__docId__": 331,
    "kind": "get",
    "name": "parameters",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#parameters",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "conf",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#conf",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "set",
    "name": "CPM",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#CPM",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "C",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#C",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "confChecker",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confChecker",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "confCheckPresenceOf",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confCheckPresenceOf",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "confCheckTypeOf",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confCheckTypeOf",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "confCheckString",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confCheckString",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "confCheckNumber",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confCheckNumber",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "confCheckSingleNonNegative",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confCheckSingleNonNegative",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "confCheckCellKinds",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confCheckCellKinds",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "n_default",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "confCheckArray",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confCheckArray",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "confCheckCellNumbers",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confCheckCellNumbers",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "confCheckCellNonNegative",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confCheckCellNonNegative",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "confCheckCellProbability",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confCheckCellProbability",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "confCheckCellBoolean",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confCheckCellBoolean",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "confCheckCellMatrix",
    "memberof": "src/hamiltonian/Constraint.js~Constraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/Constraint.js~Constraint#confCheckCellMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "number",
        "defaultValue": "number"
      }
    ],
    "return": null
  },
  {
    "__docId__": 349,
    "kind": "file",
    "name": "src/hamiltonian/HardConstraint.js",
    "content": "import Constraint from \"./Constraint.js\"\n\nclass HardConstraint extends Constraint {\n\tget CONSTRAINT_TYPE() {\n\t\treturn \"hard\"\n\t}\n\t/*constructor( conf ){\n\t\tthis.conf = conf\n\t}*/\n\tset CPM(C){\n\t\tthis.C = C\n\t}\n\t// eslint-disable-next-line no-unused-vars\n\tfulfilled( src_i, tgt_i, src_type, tgt_type ){\n\t\tthrow(\"You need to implement the 'fulfilled' method for this constraint!\")\n\t}\n}\n\nexport default HardConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/HardConstraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 350,
    "kind": "class",
    "name": "HardConstraint",
    "memberof": "src/hamiltonian/HardConstraint.js",
    "static": true,
    "longname": "src/hamiltonian/HardConstraint.js~HardConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/HardConstraint.js",
    "importStyle": "HardConstraint",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/Constraint.js~Constraint"
    ]
  },
  {
    "__docId__": 351,
    "kind": "get",
    "name": "CONSTRAINT_TYPE",
    "memberof": "src/hamiltonian/HardConstraint.js~HardConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/HardConstraint.js~HardConstraint#CONSTRAINT_TYPE",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "set",
    "name": "CPM",
    "memberof": "src/hamiltonian/HardConstraint.js~HardConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/HardConstraint.js~HardConstraint#CPM",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 353,
    "kind": "member",
    "name": "C",
    "memberof": "src/hamiltonian/HardConstraint.js~HardConstraint",
    "static": false,
    "longname": "src/hamiltonian/HardConstraint.js~HardConstraint#C",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "fulfilled",
    "memberof": "src/hamiltonian/HardConstraint.js~HardConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/HardConstraint.js~HardConstraint#fulfilled",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "src_i",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_i",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 355,
    "kind": "file",
    "name": "src/hamiltonian/HardVolumeRangeConstraint.js",
    "content": "/** \n * Forbids that cells exceed or fall below a certain size range. \n */\n\nimport HardConstraint from \"./HardConstraint.js\"\n\nclass HardVolumeRangeConstraint extends HardConstraint {\n\n\tconfChecker(){\n\t\tthis.confCheckCellNonNegative( \"LAMBDA_VRANGE_MAX\" )\n\t\tthis.confCheckCellNonNegative( \"LAMBDA_VRANGE_MIN\" )\n\t}\n\n\tfulfilled( src_i, tgt_i, src_type, tgt_type ){\n\t\t// volume gain of src cell\n\t\tif( src_type != 0 && this.C.getVolume(src_type) + 1 > \n\t\t\tthis.conf[\"LAMBDA_VRANGE_MAX\"][this.C.cellKind(src_type)] ){\n\t\t\treturn false\n\t\t}\n\t\t// volume loss of tgt cell\n\t\tif( tgt_type != 0 && this.C.getVolume(tgt_type) - 1 < \n\t\t\tthis.conf[\"LAMBDA_VRANGE_MIN\"][this.C.cellKind(tgt_type)] ){\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n}\n\nexport default HardVolumeRangeConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/HardVolumeRangeConstraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 356,
    "kind": "class",
    "name": "HardVolumeRangeConstraint",
    "memberof": "src/hamiltonian/HardVolumeRangeConstraint.js",
    "static": true,
    "longname": "src/hamiltonian/HardVolumeRangeConstraint.js~HardVolumeRangeConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/HardVolumeRangeConstraint.js",
    "importStyle": "HardVolumeRangeConstraint",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/HardConstraint.js~HardConstraint"
    ]
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "confChecker",
    "memberof": "src/hamiltonian/HardVolumeRangeConstraint.js~HardVolumeRangeConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/HardVolumeRangeConstraint.js~HardVolumeRangeConstraint#confChecker",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "fulfilled",
    "memberof": "src/hamiltonian/HardVolumeRangeConstraint.js~HardVolumeRangeConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/HardVolumeRangeConstraint.js~HardVolumeRangeConstraint#fulfilled",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "src_i",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_i",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "file",
    "name": "src/hamiltonian/PerimeterConstraint.js",
    "content": "/** \n * Implements the adhesion constraint of Potts models. \n */\n\nimport SoftConstraint from \"./SoftConstraint.js\"\n\nclass PerimeterConstraint extends SoftConstraint {\n\tconstructor( conf ){\n\t\tsuper( conf )\n\t\tthis.cellperimeters = {}\n\t}\n\tconfChecker(){\n\t\tthis.confCheckCellNonNegative( \"LAMBDA_P\" )\n\t\tthis.confCheckCellNonNegative( \"P\" )\n\t}\n\t\n\tpostSetpixListener( i, t_old, t_new ){\n\t\tif( t_old == t_new ){ return }\n\t\tconst Ni = this.C.neighi( i )\n\t\tlet n_new = 0, n_old = 0\n\t\tfor( let i = 0 ; i < Ni.length ; i ++  ){\n\t\t\tconst nt = this.C.pixti(Ni[i])\n\t\t\tif( nt != t_new ){\n\t\t\t\tn_new ++ \n\t\t\t}\n\t\t\tif( nt != t_old ){\n\t\t\t\tn_old ++\n\t\t\t}\n\t\t\tif( nt != 0 ){\n\t\t\t\tif( nt == t_old ){\n\t\t\t\t\tthis.cellperimeters[nt] ++\n\t\t\t\t}\n\t\t\t\tif( nt == t_new ){\n\t\t\t\t\tthis.cellperimeters[nt] --\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif( t_old != 0 ){\n\t\t\tthis.cellperimeters[t_old] -= n_old\n\t\t}\n\t\tif( t_new != 0 ){\n\t\t\tif( !(t_new in this.cellperimeters) ){\n\t\t\t\tthis.cellperimeters[t_new] = 0\n\t\t\t}\n\t\t\tthis.cellperimeters[t_new] += n_new\n\t\t}\n\t}\n\tdeltaH( sourcei, targeti, src_type, tgt_type ){\n\t\tif( src_type == tgt_type ){\n\t\t\treturn 0\n\t\t}\n\t\tconst ts = this.C.cellKind(src_type)\n\t\tconst ls = this.conf[\"LAMBDA_P\"][ts]\n\t\tconst tt = this.C.cellKind(tgt_type)\n\t\tconst lt = this.conf[\"LAMBDA_P\"][tt]\n\t\tif( !(ls>0) && !(lt>0) ){\n\t\t\treturn 0\n\t\t}\n\t\tconst Ni = this.C.neighi( targeti )\n\t\tlet pchange = {}\n\t\tpchange[src_type] = 0; pchange[tgt_type] = 0\n\t\tfor( let i = 0 ; i < Ni.length ; i ++  ){\n\t\t\tconst nt = this.C.pixti(Ni[i])\n\t\t\tif( nt != src_type ){\n\t\t\t\tpchange[src_type]++ \n\t\t\t}\n\t\t\tif( nt != tgt_type ){\n\t\t\t\tpchange[tgt_type]--\n\t\t\t}\n\t\t\tif( nt == tgt_type ){\n\t\t\t\tpchange[nt] ++\n\t\t\t}\n\t\t\tif( nt == src_type ){\n\t\t\t\tpchange[nt] --\n\t\t\t}\n\t\t}\n\t\tlet r = 0.0\n\t\tif( ls > 0 ){\n\t\t\tconst pt = this.conf[\"P\"][ts],\n\t\t\t\tps = this.cellperimeters[src_type]\n\t\t\tconst hnew = (ps+pchange[src_type])-pt,\n\t\t\t\thold = ps-pt\n\t\t\tr += ls*((hnew*hnew)-(hold*hold))\n\t\t}\n\t\tif( lt > 0 ){\n\t\t\tconst pt = this.conf[\"P\"][tt],\n\t\t\t\tps = this.cellperimeters[tgt_type]\n\t\t\tconst hnew = (ps+pchange[tgt_type])-pt,\n\t\t\t\thold = ps-pt\n\t\t\tr += lt*((hnew*hnew)-(hold*hold))\n\t\t}\n\t\t// eslint-disable-next-line\n\t\t//console.log( r )\n\t\treturn r\n\t}\n}\n\nexport default PerimeterConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/PerimeterConstraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 360,
    "kind": "class",
    "name": "PerimeterConstraint",
    "memberof": "src/hamiltonian/PerimeterConstraint.js",
    "static": true,
    "longname": "src/hamiltonian/PerimeterConstraint.js~PerimeterConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/PerimeterConstraint.js",
    "importStyle": "PerimeterConstraint",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/SoftConstraint.js~SoftConstraint"
    ]
  },
  {
    "__docId__": 361,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/hamiltonian/PerimeterConstraint.js~PerimeterConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PerimeterConstraint.js~PerimeterConstraint#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "cellperimeters",
    "memberof": "src/hamiltonian/PerimeterConstraint.js~PerimeterConstraint",
    "static": false,
    "longname": "src/hamiltonian/PerimeterConstraint.js~PerimeterConstraint#cellperimeters",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "confChecker",
    "memberof": "src/hamiltonian/PerimeterConstraint.js~PerimeterConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PerimeterConstraint.js~PerimeterConstraint#confChecker",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "postSetpixListener",
    "memberof": "src/hamiltonian/PerimeterConstraint.js~PerimeterConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PerimeterConstraint.js~PerimeterConstraint#postSetpixListener",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "t_old",
        "types": [
          "*"
        ]
      },
      {
        "name": "t_new",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/PerimeterConstraint.js~PerimeterConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PerimeterConstraint.js~PerimeterConstraint#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "file",
    "name": "src/hamiltonian/PersistenceConstraint.js",
    "content": "/**\n * This is a constraint in which each cell has a preferred direction of migration. \n * This direction is only dependent on the cell, not on the specific pixel of a cell.\n */\n\nimport SoftConstraint from \"./SoftConstraint.js\"\nimport Centroids from \"../stats/Centroids.js\"\nimport CentroidsWithTorusCorrection from \"../stats/CentroidsWithTorusCorrection.js\"\n\nclass PersistenceConstraint extends SoftConstraint {\n\tconstructor( conf ){\n\t\tsuper( conf )\n\t\tthis.cellcentroidlists = {}\n\t\tthis.celldirections = {}\n\t}\n\tset CPM(C){\n\t\tthis.halfsize = new Array(C.ndim).fill(0)\n\t\tthis.C = C\n\t\tfor( let i = 0 ; i < C.ndim ; i ++ ){\n\t\t\tthis.halfsize[i] = C.extents[i]/2\n\t\t}\n\n\t}\n\tconfChecker(){\n\t\tthis.confCheckCellNonNegative( \"LAMBDA_DIR\" )\n\t}\n\t\n\tdeltaH ( sourcei, targeti, src_type ) {\n\t\tif( src_type == 0 || !(src_type in this.celldirections) ) return 0\n\t\tlet b = this.celldirections[src_type]\n\t\tlet p1 = this.C.grid.i2p(sourcei), p2 = this.C.grid.i2p(targeti)\n\t\tlet a = []\n\t\tfor( let i = 0 ; i < p1.length ; i ++ ){\n\t\t\ta[i] = p2[i]-p1[i]\n\t\t\tif( a[i] > this.halfsize[i] ){\n\t\t\t\ta[i] -= this.C.extents[i]\n\t\t\t} else if( a[i] < -this.halfsize[i] ){\n\t\t\t\ta[i] += this.C.extents[i]\n\t\t\t}\n\t\t}\n\t\tlet dp = 0\n\t\tfor( let i = 0 ; i < a.length ; i ++ ){\n\t\t\tdp += a[i]*b[i]\n\t\t}\n\t\treturn - dp\n\t}\n\tnormalize( a ){\n\t\tlet norm = 0\n\t\tfor( let i = 0 ; i < a.length ; i ++ ){\n\t\t\tnorm += a[i]*a[i]\n\t\t}\n\t\tnorm = Math.sqrt(norm)\n\t\tfor( let i = 0 ; i < a.length ; i ++ ){\n\t\t\ta[i] /= norm\n\t\t}\n\t}\n\t// this function samples a random number from a normal distribution\n\tsampleNorm (mu=0, sigma=1) {\n\t\tlet u1 = this.C.random()\n\t\tlet u2 = this.C.random()\n\t\tlet z0 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(Math.PI*2 * u2)\n\t\treturn z0 * sigma + mu\n\t}\n\t// this function samples a random direction vector with length 1\n\trandDir (n=3) {\n\t\tlet dir = []\n\t\twhile(n-- > 0){\n\t\t\tdir.push(this.sampleNorm())\n\t\t}\n\t\tthis.normalize(dir)\n\t\treturn dir\n\t}\n\tsetDirection( t, dx ){\n\t\tthis.celldirections[t] = dx\n\t}\n\tpostMCSListener(){\n\t\tlet centroids\n\t\tif( this.C.conf.torus ){\n\t\t\tcentroids = this.C.getStat( CentroidsWithTorusCorrection )\n\t\t} else {\n\t\t\tcentroids = this.C.getStat( Centroids )\n\t\t}\n\t\tfor( let t of this.C.cellIDs() ){\n\t\t\tconst k = this.C.cellKind(t)\n\t\t\tlet ld = this.conf[\"LAMBDA_DIR\"][k]\n\t\t\tlet dt = this.conf[\"DELTA_T\"] && this.conf[\"DELTA_T\"][k] ? \n\t\t\t\tthis.conf[\"DELTA_T\"][k] : 10\n\t\t\tif( ld == 0 ){\n\t\t\t\tdelete this.cellcentroidlists[t]\n\t\t\t\tdelete this.celldirections[t]\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif( !(t in this.cellcentroidlists ) ){\n\t\t\t\tthis.cellcentroidlists[t] = []\n\t\t\t\tthis.celldirections[t] = this.randDir(this.C.ndim)\n\t\t\t}\n\n\t\t\tlet ci = centroids[t]\n\t\t\tthis.cellcentroidlists[t].unshift(ci)\n\t\t\tif( this.cellcentroidlists[t].length >= dt ){\n\t\t\t\t// note, dt could change during execution\n\t\t\t\tlet l\n\t\t\t\twhile( this.cellcentroidlists[t].length >= dt ){\n\t\t\t\t\tl = this.cellcentroidlists[t].pop()\n\t\t\t\t}\n\t\t\t\tlet dx = []\n\t\t\t\tfor( let j = 0 ; j < l.length ; j ++ ){\n\t\t\t\t\tdx[j] = ci[j] - l[j]\n\t\t\t\t\tif( dx[j] > this.halfsize[j] ){\n\t\t\t\t\t\tdx[j] -= this.C.extents[j]\n\t\t\t\t\t} else if( dx[j] < -this.halfsize[j] ){\n\t\t\t\t\t\tdx[j] += this.C.extents[j]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// apply angular diffusion to target direction if needed\n\t\t\t\tlet per = this.conf[\"PERSIST\"][k]\n\t\t\t\tif( per < 1 ){\n\t\t\t\t\tthis.normalize(dx)\n\t\t\t\t\tthis.normalize(this.celldirections[t])\n\t\t\t\t\tfor( let j = 0 ; j < dx.length ; j ++ ){\n\t\t\t\t\t\tdx[j] = (1-per)*dx[j] + per*this.celldirections[t][j]\n\t\t\t\t\t}\n\t\t\t\t\tthis.normalize(dx)\n\t\t\t\t\tfor( let j = 0 ; j < dx.length ; j ++ ){\n\t\t\t\t\t\tdx[j] *= ld\n\t\t\t\t\t}\n\t\t\t\t\tthis.celldirections[t] = dx\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default PersistenceConstraint \n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/PersistenceConstraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 367,
    "kind": "class",
    "name": "PersistenceConstraint",
    "memberof": "src/hamiltonian/PersistenceConstraint.js",
    "static": true,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/PersistenceConstraint.js",
    "importStyle": "PersistenceConstraint",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/SoftConstraint.js~SoftConstraint"
    ]
  },
  {
    "__docId__": 368,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 369,
    "kind": "member",
    "name": "cellcentroidlists",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#cellcentroidlists",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "celldirections",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#celldirections",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "set",
    "name": "CPM",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#CPM",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "halfsize",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#halfsize",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "C",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#C",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "confChecker",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#confChecker",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "normalize",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#normalize",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "sampleNorm",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#sampleNorm",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "mu",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "sigma",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "randDir",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#randDir",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 3,
        "defaultValue": "3"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "setDirection",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#setDirection",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "dx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "postMCSListener",
    "memberof": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PersistenceConstraint.js~PersistenceConstraint#postMCSListener",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 381,
    "kind": "file",
    "name": "src/hamiltonian/PreferredDirectionConstraint.js",
    "content": "\n/* Implements a global bias direction of motion.\n\tThis constraint computes the *unnormalized* dot product \n\tbetween copy attempt vector and target direction vector.\n\n\tSupply the target direction vector in normalized form, or \n\tuse the length of the vector to influence the strength \n\tof this bias.\n\n\tWorks for torus grids, if they are \"big enough\".\n\t*/\n\nimport Constraint from \"./Constraint.js\"\n\nclass PreferredDirectionConstraint extends Constraint {\n\tget CONSTRAINT_TYPE() {\n\t\treturn \"soft\"\n\t}\n\tdeltaH( src_i, tgt_i, src_type ){\n\t\tlet l = this.conf[\"LAMBDA_DIR\"][this.C.cellKind( src_type )]\n\t\tif( !l ){\n\t\t\treturn 0\n\t\t}\n\t\tlet torus = this.C.conf.torus\n\t\tlet dir = this.conf[\"DIR\"][this.C.cellKind( src_type )]\n\t\tlet p1 = this.C.grid.i2p( src_i ), p2 = this.C.grid.i2p( tgt_i )\n\t\t// To bias a copy attempt p1 -> p2 in the direction of vector 'dir'.\n\t\tlet r = 0.\n\t\t// loops over the coordinates x,y,(z)\n\t\tfor( let i = 0; i < p1.length ; i++ ){\n\t\t\tlet si = this.C.extents[i]\n\t\t\t// direction of the copy attempt on this coordinate is from p1 to p2\n\t\t\tlet dx = p2[i] - p1[i]\n\t\t\tif( torus ){\n\t\t\t\t// If distance is greater than half the grid size, correct the\n\t\t\t\t// coordinate.\n\t\t\t\tif( dx > si/2 ){\n\t\t\t\t\tdx -= si\n\t\t\t\t} else if( dx < -si/2 ){\n\t\t\t\t\tdx += si\n\t\t\t\t}\n\t\t\t}\n\t\t\t// direction of the gradient\n\t\t\tr += dx * dir[i] \n\t\t}\n\t\treturn - r * l\n\t}\n}\n\nexport default PreferredDirectionConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/PreferredDirectionConstraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 382,
    "kind": "class",
    "name": "PreferredDirectionConstraint",
    "memberof": "src/hamiltonian/PreferredDirectionConstraint.js",
    "static": true,
    "longname": "src/hamiltonian/PreferredDirectionConstraint.js~PreferredDirectionConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/PreferredDirectionConstraint.js",
    "importStyle": "PreferredDirectionConstraint",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/Constraint.js~Constraint"
    ]
  },
  {
    "__docId__": 383,
    "kind": "get",
    "name": "CONSTRAINT_TYPE",
    "memberof": "src/hamiltonian/PreferredDirectionConstraint.js~PreferredDirectionConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PreferredDirectionConstraint.js~PreferredDirectionConstraint#CONSTRAINT_TYPE",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/PreferredDirectionConstraint.js~PreferredDirectionConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/PreferredDirectionConstraint.js~PreferredDirectionConstraint#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "src_i",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_i",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "file",
    "name": "src/hamiltonian/ProtrusionConstraint.js",
    "content": "/* \n\ttodo:\n\t- what about the potential when a focal point detaches?\n\t- keep track of the focal points with a postsetpixlistener.\n\t- add new focal points if a cell has too few.\n */\n\nimport SoftConstraint from \"./SoftConstraint.js\"\n\nclass ProtrusionConstraint extends SoftConstraint {\n\tconstructor( conf ){\n\t\tsuper( conf )\n\n\t\tthis.focalpoints = {} // track all the cell's focal points\n\t\t\n\t}\n\t\n\tconfChecker(){\n\t\tthis.confCheckCellNonNegative( \"P_DETACH\" )\n\t\tthis.confCheckCellNonNegative( \"G_PROTRUSION\" )\n\t}\n\t\n\tisFocalPoint( i ){\n\t\treturn ( i in this.focalpoints )\n\t}\n\t\n\tG( kind ){\n\t\treturn this.conf[\"G_PROTRUSION\"][kind]\n\t}\n\t\n\tdistance( p1, p2 ){\n\t\tlet dim = p1.length\n\t\tlet distance = 0\n\t\tfor( let d = 0; d < dim; d++ ){\n\t\t\tdistance += ( p1[d] - p2[d] )*( p1[d] - p2[d] )\n\t\t}\n\t\treturn Math.sqrt( distance )\n\t}\n\t\n\tgetCentroid( cellid ){\n\t\tlet centroids = this.C.getStat( CentroidsWithTorusCorrection )\n\t\treturn centroids[cellid] \n\t}\n\t\n\t/* ======= Protrusion constraint ======= */\n\n\t/* Hamiltonian computation */ \n\tdeltaH ( sourcei, targeti, src_type, tgt_type ){\n\n\t\tlet deltaH = 0\n\t\tconst src_kind = this.C.cellKind( src_type )\n\t\tconst tgt_kind = this.C.cellKind( tgt_type )\n\t\t\n\t\t// Penalty P_detach if a focal point detaches (if the copy goes into\n\t\t// a focal point)\n\t\tif( this.isFocalPoint( targeti ) ){\n\t\t\tdeltaH += this.conf[\"P_DETACH\"][tgt_kind]\n\t\t}\n\t\t\n\t\t// If the source is a focal point, this means the focal point will move.\n\t\t// This will change its distance to the center of mass of the cell, and thus\n\t\t// the potential in H. Update it accordingly. \n\t\tif( this.isFocalPoint( sourcei ) ){\n\t\t\tlet centroid = this.getCentroid( src_type )\n\t\t\n\t\t\tlet sourcep = this.C.grid.i2p( sourcei )\n\t\t\tlet targetp = this.C.grid.i2p( targeti )\n\t\t\n\t\t\tlet H_before = this.G( src_kind ) / this.distance( sourcep, centroid )\n\t\t\tlet H_after = this.G( src_kind ) / this.distance( targetp, centroid )\n\t\t\t\n\t\t\tdeltaH += H_after - H_before\n\t\t\t\n\t\t}\n\t\t\n\t\treturn deltaH\n\t}\n\n\t/* eslint-disable no-unused-vars*/\n\tpostSetpixListener( i, t_old, t ){\n\t\t\n\t}\n\n}\n\nexport default ProtrusionConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/ProtrusionConstraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 386,
    "kind": "class",
    "name": "ProtrusionConstraint",
    "memberof": "src/hamiltonian/ProtrusionConstraint.js",
    "static": true,
    "longname": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/ProtrusionConstraint.js",
    "importStyle": "ProtrusionConstraint",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/SoftConstraint.js~SoftConstraint"
    ]
  },
  {
    "__docId__": 387,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "focalpoints",
    "memberof": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint",
    "static": false,
    "longname": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint#focalpoints",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "confChecker",
    "memberof": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint#confChecker",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "isFocalPoint",
    "memberof": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint#isFocalPoint",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "G",
    "memberof": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint#G",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "kind",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "distance",
    "memberof": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint#distance",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "p1",
        "types": [
          "*"
        ]
      },
      {
        "name": "p2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "getCentroid",
    "memberof": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint#getCentroid",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "cellid",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "postSetpixListener",
    "memberof": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/ProtrusionConstraint.js~ProtrusionConstraint#postSetpixListener",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "t_old",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 396,
    "kind": "file",
    "name": "src/hamiltonian/SoftConstraint.js",
    "content": "\nimport Constraint from \"./Constraint.js\"\n\nclass SoftConstraint extends Constraint {\n\tget CONSTRAINT_TYPE() {\n\t\treturn \"soft\"\n\t}\n\t// eslint-disable-next-line no-unused-vars\n\tdeltaH( src_i, tgt_i, src_type, tgt_type ){\n\t\tthrow(\"You need to implement the 'deltaH' method for this constraint!\")\n\t}\n}\n\nexport default SoftConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/SoftConstraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 397,
    "kind": "class",
    "name": "SoftConstraint",
    "memberof": "src/hamiltonian/SoftConstraint.js",
    "static": true,
    "longname": "src/hamiltonian/SoftConstraint.js~SoftConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/SoftConstraint.js",
    "importStyle": "SoftConstraint",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/Constraint.js~Constraint"
    ]
  },
  {
    "__docId__": 398,
    "kind": "get",
    "name": "CONSTRAINT_TYPE",
    "memberof": "src/hamiltonian/SoftConstraint.js~SoftConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/SoftConstraint.js~SoftConstraint#CONSTRAINT_TYPE",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/SoftConstraint.js~SoftConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/SoftConstraint.js~SoftConstraint#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "src_i",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_i",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 400,
    "kind": "file",
    "name": "src/hamiltonian/TestLogger.js",
    "content": "/** \n * Forbids that cells exceed or fall below a certain size range. \n */\n\nimport HardConstraint from \"./HardConstraint.js\"\n\nclass HardVolumeRangeConstraint extends HardConstraint {\t\n\tget CONSTRAINT_TYPE() {\n\t\treturn \"none\"\n\t}\n\t/* eslint-disable */\n\tsetpixListener( i, t_old, t ){\n\t\tconsole.log( i, t_old, t )\n\t}\n\tafterMCSListener( ){\n\t\tconsole.log( \"the time is now: \", this.C.time )\n\t}\n}\n\nexport default HardVolumeRangeConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/TestLogger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 401,
    "kind": "class",
    "name": "HardVolumeRangeConstraint",
    "memberof": "src/hamiltonian/TestLogger.js",
    "static": true,
    "longname": "src/hamiltonian/TestLogger.js~HardVolumeRangeConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/TestLogger.js",
    "importStyle": "HardVolumeRangeConstraint",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/HardConstraint.js~HardConstraint"
    ]
  },
  {
    "__docId__": 402,
    "kind": "get",
    "name": "CONSTRAINT_TYPE",
    "memberof": "src/hamiltonian/TestLogger.js~HardVolumeRangeConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/TestLogger.js~HardVolumeRangeConstraint#CONSTRAINT_TYPE",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "setpixListener",
    "memberof": "src/hamiltonian/TestLogger.js~HardVolumeRangeConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/TestLogger.js~HardVolumeRangeConstraint#setpixListener",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "t_old",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "afterMCSListener",
    "memberof": "src/hamiltonian/TestLogger.js~HardVolumeRangeConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/TestLogger.js~HardVolumeRangeConstraint#afterMCSListener",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 405,
    "kind": "file",
    "name": "src/hamiltonian/VolumeConstraint.js",
    "content": "/** \n * Implements the adhesion constraint of Potts models. \n */\n\nimport SoftConstraint from \"./SoftConstraint.js\"\n\nclass VolumeConstraint extends SoftConstraint {\n\tconfChecker(){\n\t\tthis.confCheckCellNonNegative( \"LAMBDA_V\" )\n\t\tthis.confCheckCellNonNegative( \"V\" )\n\t}\n\n\tdeltaH( sourcei, targeti, src_type, tgt_type ){\n\t\t// volume gain of src cell\n\t\tlet deltaH = this.volconstraint( 1, src_type ) - \n\t\t\tthis.volconstraint( 0, src_type )\n\t\t// volume loss of tgt cell\n\t\tdeltaH += this.volconstraint( -1, tgt_type ) - \n\t\t\tthis.volconstraint( 0, tgt_type )\n\t\treturn deltaH\n\t}\n\t/* ======= VOLUME ======= */\n\n\t/* The volume constraint term of the Hamiltonian for the cell with id t.\n\t   Use vgain=0 for energy of current volume, vgain=1 for energy if cell gains\n\t   a pixel, and vgain = -1 for energy if cell loses a pixel. \n\t*/\n\tvolconstraint ( vgain, t ){\n\t\tconst k = this.C.cellKind(t), l = this.conf[\"LAMBDA_V\"][k]\n\t\t// the background \"cell\" has no volume constraint.\n\t\tif( t == 0 || l == 0 ) return 0\n\t\tconst vdiff = this.conf[\"V\"][k] - (this.C.getVolume(t) + vgain)\n\t\treturn l*vdiff*vdiff\n\t}\n}\n\nexport default VolumeConstraint\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/hamiltonian/VolumeConstraint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 406,
    "kind": "class",
    "name": "VolumeConstraint",
    "memberof": "src/hamiltonian/VolumeConstraint.js",
    "static": true,
    "longname": "src/hamiltonian/VolumeConstraint.js~VolumeConstraint",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/hamiltonian/VolumeConstraint.js",
    "importStyle": "VolumeConstraint",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/hamiltonian/SoftConstraint.js~SoftConstraint"
    ]
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "confChecker",
    "memberof": "src/hamiltonian/VolumeConstraint.js~VolumeConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/VolumeConstraint.js~VolumeConstraint#confChecker",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/hamiltonian/VolumeConstraint.js~VolumeConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/VolumeConstraint.js~VolumeConstraint#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "volconstraint",
    "memberof": "src/hamiltonian/VolumeConstraint.js~VolumeConstraint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hamiltonian/VolumeConstraint.js~VolumeConstraint#volconstraint",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "vgain",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "file",
    "name": "src/models/CA.js",
    "content": "/** The core CPM class. Can be used for two- or \n * three-dimensional simulations. \n*/\n\n\"use strict\"\n\nimport GridBasedModel from \"./GridBasedModel.js\"\n\nclass CA extends GridBasedModel {\n\tconstructor( extents, conf ){\n\t\tsuper( extents, conf )\n\t\tthis.updateRule = conf[\"UPDATE_RULE\"].bind(this)\n\t}\n\n\ttimeStep(){\n\t\tthis.grid.applyLocally( this.updateRule )\n\t\tthis.stat_values = {}\n\t}\n}\n\nexport default CA\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/models/CA.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 411,
    "kind": "class",
    "name": "CA",
    "memberof": "src/models/CA.js",
    "static": true,
    "longname": "src/models/CA.js~CA",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/models/CA.js",
    "importStyle": "CA",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/models/GridBasedModel.js~GridBasedModel"
    ]
  },
  {
    "__docId__": 412,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/models/CA.js~CA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CA.js~CA#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "updateRule",
    "memberof": "src/models/CA.js~CA",
    "static": false,
    "longname": "src/models/CA.js~CA#updateRule",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "timeStep",
    "memberof": "src/models/CA.js~CA",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CA.js~CA#timeStep",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "stat_values",
    "memberof": "src/models/CA.js~CA",
    "static": false,
    "longname": "src/models/CA.js~CA#stat_values",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "file",
    "name": "src/models/CPM.js",
    "content": "/** The core CPM class. Can be used for two- or \n * three-dimensional simulations. \n*/\n\n\"use strict\"\n\nimport GridBasedModel from \"./GridBasedModel.js\"\nimport DiceSet from \"../DiceSet.js\"\n\nimport AutoAdderConfig from \"../hamiltonian/AutoAdderConfig.js\"\n\nclass CPM extends GridBasedModel {\n\tconstructor( field_size, conf ){\n\t\tsuper( field_size, conf )\n\n\t\t// CPM specific stuff here\n\t\tthis.nr_cells = 0\t\t\t\t// number of cells currently in the grid\n\t\t// track border pixels for speed (see also the DiceSet data structure)\n\t\tthis.borderpixels = new DiceSet( this.mt )\n\n\t\t// Attributes per cell:\n\t\tthis.t2k = []\t// celltype (\"kind\"). Example: this.t2k[1] is the celltype of cell 1.\n\t\tthis.t2k[0] = 0\t// Background cell; there is just one cell of this type.\n\n\t\tthis.soft_constraints = []\n\t\tthis.soft_constraints_indices = {}\n\t\tthis.hard_constraints = []\n\t\tthis.hard_constraints_indices ={}\n\t\tthis.post_setpix_listeners = []\n\t\tthis.post_mcs_listeners = []\n\t\tthis._neighbours = new Uint16Array(this.grid.p2i(field_size))\n\n\t\tfor( let x of Object.keys( conf ) ){\n\t\t\tif( x in AutoAdderConfig ){\n\t\t\t\tthis.add( new AutoAdderConfig[x]( conf ) )\n\t\t\t}\n\t\t}\n\t}\n\n\tneigh(p, torus=this.conf.torus){\n\t\tlet g = this.grid\n\t\treturn g.neighi( g.p2i(p), torus ).map( function(i){ return g.i2p(i) } )\n\t}\n\n\t* cellPixels() {\n\t\tfor( let p of this.grid.pixels() ){\n\t\t\tif( p[1] != 0 ){\n\t\t\t\tyield p\n\t\t\t}\n\t\t}\n\t}\n\n\t* cellBorderPixels() {\n\t\tfor( let i of this.borderpixels.elements ){\n\t\t\tconst t = this.pixti(i)\n\t\t\tif( t != 0 ){\n\t\t\t\tyield [this.grid.i2p(i),t]\n\t\t\t}\n\t\t}\n\t}\n\n\t* cellBorderPixelIndices() {\n\t\tfor( let i of this.borderpixels.elements ){\n\t\t\tconst t = this.pixti(i)\n\t\t\tif( t != 0 ){\n\t\t\t\tyield [i,t]\n\t\t\t}\n\t\t}\n\t}\n\n\n\tadd( t ){\n\t\tlet tname = t.constructor.name, i \n\t\tif( t.CONSTRAINT_TYPE ){\n\t\t\tswitch( t.CONSTRAINT_TYPE ){\n\t\t\t\n\t\t\tcase \"soft\": \n\t\t\t\t// Add constraint to the array of soft constraints\n\t\t\t\ti = this.soft_constraints.push( t )\n\t\t\t\t\n\t\t\t\t// Write this index to an array in the \n\t\t\t\t// this.soft_constraints_indices object, for lookup later. \n\t\t\t\tif( !this.soft_constraints_indices.hasOwnProperty(tname) ){\n\t\t\t\t\tthis.soft_constraints_indices[tname] = []\n\t\t\t\t}\n\t\t\t\tthis.soft_constraints_indices[tname].push( i-1 )\n\t\t\t\tbreak\n\t\t\t\t\n\t\t\tcase \"hard\": \n\t\t\t\t// Add constraint to the array of soft constraints\n\t\t\t\ti = this.hard_constraints.push( t )\n\t\t\t\t\n\t\t\t\t// Write this index to an array in the \n\t\t\t\t// this.soft_constraints_indices object, for lookup later. \n\t\t\t\tif( !this.hard_constraints_indices.hasOwnProperty(tname) ){\n\t\t\t\t\tthis.hard_constraints_indices[tname] = []\n\t\t\t\t}\n\t\t\t\tthis.hard_constraints_indices[tname].push( i-1 )\t\t\t\t\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif( typeof t[\"postSetpixListener\"] === \"function\" ){\n\t\t\tthis.post_setpix_listeners.push( t.postSetpixListener.bind(t) )\n\t\t}\n\t\tif( typeof t[\"postMCSListener\"] === \"function\" ){\n\t\t\tthis.post_mcs_listeners.push( t.postMCSListener.bind(t) )\n\t\t}\n\t\tt.CPM = this\n\t\tif( typeof t[\"postAdd\"] === \"function\" ){\n\t\t\tt.postAdd()\n\t\t}\n\t}\n\t\n\tgetConstraint( constraintname, num ){\n\t\n\t\tif( !num ){\n\t\t\tnum = 0\n\t\t}\n\t\tlet i\n\t\t\n\t\tif( this.hard_constraints_indices.hasOwnProperty( constraintname ) ){\n\t\t\ti = this.hard_constraints_indices[constraintname][num]\n\t\t\treturn this.hard_constraints[i]\n\t\t} else if ( this.soft_constraints_indices.hasOwnProperty( constraintname ) ){\n\t\t\ti = this.soft_constraints_indices[constraintname][num]\n\t\t\treturn this.soft_constraints[i]\n\t\t} else {\n\t\t\tthrow(\"No constraint of name \" + \" exists in this CPM!\")\n\t\t}\t\n\t\n\t}\n\n\t/* Get celltype/identity (pixt) or cellkind (pixk) of the cell at coordinates p or index i. */\n\tpixt( p ){\n\t\treturn this.grid.pixti( this.grid.p2i(p) )\n\t}\n\n\t/* Get volume, or cellkind of the cell with type (identity) t */ \n\tgetVolume( t ){\n\t\treturn this.cellvolume[t]\n\t}\n\n\tcellKind( t ){\n\t\treturn this.t2k[ t ]\n\t}\n\n\t/* Assign the cell with type (identity) t to kind k.*/\n\tsetCellKind( t, k ){\n\t\tthis.t2k[ t ] = k\n\t}\n\t\n\t/* ------------- MATH HELPER FUNCTIONS --------------- */\n\trandom (){\n\t\treturn this.mt.rnd()\n\t}\n\t/* Random integer number between incl_min and incl_max */\n\tran (incl_min, incl_max) {\n\t\treturn Math.floor(this.random() * (1.0 + incl_max - incl_min)) + incl_min\n\t}\n\t\n\t/* ------------- COMPUTING THE HAMILTONIAN --------------- */\n\n\n\t/* ======= ADHESION ======= */\n\n\t// returns both change in hamiltonian for all registered soft constraints\n\tdeltaH ( sourcei, targeti, src_type, tgt_type ){\n\t\tlet r = 0.0\n\t\tfor( let t of this.soft_constraints ){\n\t\t\tr += t.deltaH( sourcei, targeti, src_type, tgt_type )\n\t\t}\n\t\treturn r\n\t}\n\t/* ------------- COPY ATTEMPTS --------------- */\n\n\t/* \tSimulate one time step, i.e., a Monte Carlo step\n\t  \t(a number of copy attempts depending on grid size):\n\t\t1) Randomly sample one of the border pixels for the copy attempt.\n\t\t2) Compute the change in Hamiltonian for the suggested copy attempt.\n\t\t3) With a probability depending on this change, decline or accept the \n\t\t   copy attempt and update the grid accordingly. \n\n\t\tTODO it is quite confusing that the \"borderpixels\" array also\n\t\tcontains border pixels of the background.\n\t*/\n\tmonteCarloStep () {\n\t\tthis.timeStep()\n\t}\n\ttimeStep (){\n\t\tlet delta_t = 0.0\n\t\t// this loop tracks the number of copy attempts until one MCS is completed.\n\t\twhile( delta_t < 1.0 ){\n\t\t\t// This is the expected time (in MCS) you would expect it to take to\n\t\t\t// randomly draw another border pixel.\n\t\t\tdelta_t += 1./(this.borderpixels.length)\n\n\t\t\t// sample a random pixel that borders at least 1 cell of another type,\n\t\t\t// and pick a random neighbour of tha pixel\n\t\t\tconst tgt_i = this.borderpixels.sample()\n\t\t\tconst Ni = this.grid.neighi( tgt_i )\n\t\t\tconst src_i = Ni[this.ran(0,Ni.length-1)]\n\t\t\n\t\t\tconst src_type = this.grid.pixti( src_i )\n\t\t\tconst tgt_type = this.grid.pixti( tgt_i )\n\n\t\t\t// only compute the Hamiltonian if source and target belong to a different cell,\n\t\t\t// and do not allow a copy attempt into the stroma. Only continue if the copy attempt\n\t\t\t// would result in a viable cell.\n\t\t\tif( tgt_type != src_type ){\n\t\t\t\tlet ok = true\n\t\t\t\tfor( let h of this.hard_constraints ){\n\t\t\t\t\tif( !h.fulfilled( src_i, tgt_i, src_type, tgt_type ) ){\n\t\t\t\t\t\tok = false; break\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( ok ){\n\t\t\t\t\tconst hamiltonian = this.deltaH( src_i, tgt_i, src_type, tgt_type )\n\t\t\t\t\t// probabilistic success of copy attempt \n\t\t\t\t\tif( this.docopy( hamiltonian ) ){\n\t\t\t\t\t\tthis.setpixi( tgt_i, src_type )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t\tthis.time++ // update time with one MCS.\n\t\tthis.stat_values = {} // invalidate stat value cache\n\t\tfor( let l of this.post_mcs_listeners ){\n\t\t\tl()\n\t\t}\n\t}\t\n\n\t/* Determine whether copy attempt will succeed depending on deltaH (stochastic). */\n\tdocopy ( deltaH ){\n\t\tif( deltaH < 0 ) return true\n\t\treturn this.random() < Math.exp( -deltaH / this.conf.T )\n\t}\n\t/* Change the pixel at position p (coordinates) into cellid t. \n\tUpdate cell perimeters with Pup (optional parameter).*/\n\tsetpixi ( i, t ){\t\t\n\t\tconst t_old = this.grid.pixti(i)\n\t\tif( t_old > 0 ){\n\t\t\t// also update volume of the old cell\n\t\t\t// (unless it is background/stroma)\n\t\t\tthis.cellvolume[t_old] --\n\t\t\t\n\t\t\t// if this was the last pixel belonging to this cell, \n\t\t\t// remove the cell altogether.\n\t\t\tif( this.cellvolume[t_old] == 0 ){\n\t\t\t\tdelete this.cellvolume[t_old]\n\t\t\t\tdelete this.t2k[t_old]\n\t\t\t}\n\t\t}\n\t\t// update volume of the new cell and cellid of the pixel.\n\t\tthis.grid.setpixi(i,t)\n\t\tif( t > 0 ){\n\t\t\tthis.cellvolume[t] ++\n\t\t}\n\t\tthis.updateborderneari( i, t_old, t )\n\t\t//this.stat_values = {} // invalidate stat value cache\n\t\tfor( let l of this.post_setpix_listeners ){\n\t\t\tl( i, t_old, t )\n\t\t}\n\t}\n\n\t/* Update border elements after a successful copy attempt. */\n\tupdateborderneari ( i, t_old, t_new ){\n\t\tif( t_old == t_new ) return\n\t\tconst Ni = this.grid.neighi( i )\n\t\tconst wasborder = this._neighbours[i] > 0 \n\t\tthis._neighbours[i] = 0\n\t\tfor( let ni of Ni  ){\n\t\t\tconst nt = this.grid.pixti(ni)\n\t\t\tif( nt != t_new ){\n\t\t\t\tthis._neighbours[i] ++ \n\t\t\t}\n\t\t\tif( nt == t_old ){\n\t\t\t\tif( this._neighbours[ni] ++ == 0 ){\n\t\t\t\t\tthis.borderpixels.insert( ni )\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( nt == t_new ){\n\t\t\t\tif( --this._neighbours[ni] == 0 ){\n\t\t\t\t\tthis.borderpixels.remove( ni )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif( !wasborder && this._neighbours[i] > 0 ){\n\t\t\tthis.borderpixels.insert( i )\n\t\t}\n\t\tif( wasborder &&  this._neighbours[i] == 0 ){\n\t\t\tthis.borderpixels.remove( i )\n\t\t}\n\t}\n\n\t/* ------------- MANIPULATING CELLS ON THE GRID --------------- */\n\n\t/* Initiate a new cellid for a cell of celltype \"kind\", and create elements\n\t   for this cell in the relevant arrays (cellvolume, cellperimeter, t2k).*/\n\tmakeNewCellID ( kind ){\n\t\tconst newid = ++ this.nr_cells\n\t\tthis.cellvolume[newid] = 0\n\t\tthis.setCellKind( newid, kind )\n\t\treturn newid\n\t}\n\n}\n\nexport default CPM\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/models/CPM.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 417,
    "kind": "class",
    "name": "CPM",
    "memberof": "src/models/CPM.js",
    "static": true,
    "longname": "src/models/CPM.js~CPM",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/models/CPM.js",
    "importStyle": "CPM",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/models/GridBasedModel.js~GridBasedModel"
    ]
  },
  {
    "__docId__": 418,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "nr_cells",
    "memberof": "src/models/CPM.js~CPM",
    "static": false,
    "longname": "src/models/CPM.js~CPM#nr_cells",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "borderpixels",
    "memberof": "src/models/CPM.js~CPM",
    "static": false,
    "longname": "src/models/CPM.js~CPM#borderpixels",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "t2k",
    "memberof": "src/models/CPM.js~CPM",
    "static": false,
    "longname": "src/models/CPM.js~CPM#t2k",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "soft_constraints",
    "memberof": "src/models/CPM.js~CPM",
    "static": false,
    "longname": "src/models/CPM.js~CPM#soft_constraints",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "member",
    "name": "soft_constraints_indices",
    "memberof": "src/models/CPM.js~CPM",
    "static": false,
    "longname": "src/models/CPM.js~CPM#soft_constraints_indices",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "hard_constraints",
    "memberof": "src/models/CPM.js~CPM",
    "static": false,
    "longname": "src/models/CPM.js~CPM#hard_constraints",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "member",
    "name": "hard_constraints_indices",
    "memberof": "src/models/CPM.js~CPM",
    "static": false,
    "longname": "src/models/CPM.js~CPM#hard_constraints_indices",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "post_setpix_listeners",
    "memberof": "src/models/CPM.js~CPM",
    "static": false,
    "longname": "src/models/CPM.js~CPM#post_setpix_listeners",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "post_mcs_listeners",
    "memberof": "src/models/CPM.js~CPM",
    "static": false,
    "longname": "src/models/CPM.js~CPM#post_mcs_listeners",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "_neighbours",
    "memberof": "src/models/CPM.js~CPM",
    "static": false,
    "longname": "src/models/CPM.js~CPM#_neighbours",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "neigh",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#neigh",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "torus",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "cellPixels",
    "memberof": "src/models/CPM.js~CPM",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#cellPixels",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "cellBorderPixels",
    "memberof": "src/models/CPM.js~CPM",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#cellBorderPixels",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "cellBorderPixelIndices",
    "memberof": "src/models/CPM.js~CPM",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#cellBorderPixelIndices",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "add",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#add",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "getConstraint",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#getConstraint",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "constraintname",
        "types": [
          "*"
        ]
      },
      {
        "name": "num",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "pixt",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#pixt",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "getVolume",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#getVolume",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "cellKind",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#cellKind",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "setCellKind",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#setCellKind",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "k",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "random",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#random",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "ran",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#ran",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "params": [
      {
        "name": "incl_min",
        "types": [
          "*"
        ]
      },
      {
        "name": "incl_max",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "deltaH",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#deltaH",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "sourcei",
        "types": [
          "*"
        ]
      },
      {
        "name": "targeti",
        "types": [
          "*"
        ]
      },
      {
        "name": "src_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "tgt_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "monteCarloStep",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#monteCarloStep",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "timeStep",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#timeStep",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 444,
    "kind": "member",
    "name": "stat_values",
    "memberof": "src/models/CPM.js~CPM",
    "static": false,
    "longname": "src/models/CPM.js~CPM#stat_values",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "docopy",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#docopy",
    "access": "public",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "params": [
      {
        "name": "deltaH",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "setpixi",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#setpixi",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "updateborderneari",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#updateborderneari",
    "access": "public",
    "description": null,
    "lineNumber": 266,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "t_old",
        "types": [
          "*"
        ]
      },
      {
        "name": "t_new",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "makeNewCellID",
    "memberof": "src/models/CPM.js~CPM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/CPM.js~CPM#makeNewCellID",
    "access": "public",
    "description": null,
    "lineNumber": 300,
    "undocument": true,
    "params": [
      {
        "name": "kind",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "file",
    "name": "src/models/GridBasedModel.js",
    "content": "/** The core CPM class. Can be used for two- or \n * three-dimensional simulations. \n*/\n\n\"use strict\"\n\nimport MersenneTwister from \"mersennetwister\"\nimport Grid2D from \"../grid/Grid2D.js\"\nimport Grid3D from \"../grid/Grid3D.js\"\n\nclass GridBasedModel {\n\n\tconstructor( extents, conf ){\n\t\tlet seed = conf.seed || Math.floor(Math.random()*Number.MAX_SAFE_INTEGER)\n\t\tthis.mt = new MersenneTwister( seed )\n\t\tif( !(\"torus\" in conf) ){\n\t\t\tconf[\"torus\"] = true\n\t\t}\n\n\t\t// Attributes based on input parameters\n\t\tthis.ndim = extents.length // grid dimensions (2 or 3)\n\t\tif( this.ndim != 2 && this.ndim != 3 ){\n\t\t\tthrow(\"only 2D and 3D models are implemented!\")\n\t\t}\n\t\tthis.conf = conf // input parameter settings; see documentation.\n\n\t\t// Some functions/attributes depend on ndim:\n\t\tif( this.ndim == 2 ){\n\t\t\tthis.grid = new Grid2D(extents,conf.torus)\n\t\t} else {\n\t\t\tthis.grid = new Grid3D(extents,conf.torus)\n\t\t}\n\t\t// Pull up some things from the grid object so we don't have to access it\n\t\t// from the outside\n\t\tthis.midpoint = this.grid.midpoint\n\t\tthis.field_size = this.grid.field_size\n\t\tthis.pixels = this.grid.pixels.bind(this.grid)\n\t\tthis.pixti = this.grid.pixti.bind(this.grid)\n\t\tthis.neighi = this.grid.neighi.bind(this.grid)\n\t\tthis.extents = this.grid.extents\n\n\t\tthis.cellvolume = []\n\t\tthis.time = 0\n\n\t\tthis.stats = []\n\t\tthis.stat_values = {}\n\t}\n\n\tcellKind( t ){\n\t\treturn t \n\t}\n\n\t* cellIDs() {\n\t\tyield* Object.keys( this.cellvolume )\n\t}\n\n\t/* Get neighbourhood of position p */\n\tneigh(p, torus=this.conf.torus){\n\t\tlet g = this.grid\n\t\treturn g.neighi( g.p2i(p), torus ).map( function(i){ return g.i2p(i) } )\n\t}\n\n\t/* Get celltype/identity (pixt) or cellkind (pixk) of the cell at coordinates p or index i. */\n\tpixt( p ){\n\t\treturn this.grid.pixti( this.grid.p2i(p) )\n\t}\n\n\t/* Change the pixel at position p (coordinates) into cellid t. \n\t\tThis standard implementation also keeps track of cell volumes\n\t\tfor all nonzero cell IDs. Subclasses may want to do more, \n\t\tsuch as also keeping track of perimeters or even centroids.\n\t\tIn that case, this method needs to be overridden. */\n\tsetpixi ( i, t ){\t\t\n\t\tconst t_old = this.grid.pixti(i)\n\t\tif( t_old > 0 ){\n\t\t\t// also update volume of the old cell\n\t\t\tthis.cellvolume[t_old] --\n\t\t\t// if this was the last pixel belonging to this cell, \n\t\t\t// remove the cell altogether.\n\t\t\tif( this.cellvolume[t_old] == 0 ){\n\t\t\t\tdelete this.cellvolume[t_old]\n\t\t\t}\n\t\t}\n\t\t// update volume of the new cell and cellid of the pixel.\n\t\tthis.grid.setpixi( i, t )\n\t\tif( t > 0 ){\n\t\t\tif( !this.cellvolume[t] ){\n\t\t\t\tthis.cellvolume[t] = 1\n\t\t\t} else {\n\t\t\t\tthis.cellvolume[t] ++\n\t\t\t}\n\t\t}\n\t}\n\n\tsetpix ( p, t ){\n\t\tthis.setpixi( this.grid.p2i(p), t )\n\t}\n\n\t/* ------------- MATH HELPER FUNCTIONS --------------- */\n\trandom (){\n\t\treturn this.mt.rnd()\n\t}\n\n\t/* Random integer number between incl_min and incl_max */\n\tran (incl_min, incl_max) {\n\t\treturn Math.floor(this.random() * (1.0 + incl_max - incl_min)) + incl_min\n\t}\n\n\tgetStat( s ){\n\t\t/* Instantiate stats class if it doesn't exist yet and bind to this model */\n\t\tif( !(s.name in this.stats) ){\n\t\t\tlet t = new s()\n\t\t\tthis.stats[s.name] = t\n\t\t\tt.model = this\n\t\t\t\n\t\t}\n\t\t/* Cache stat value if it hasn't been done yet */\n\t\tif( !(s.name in this.stat_values) ){\n\t\t\tthis.stat_values[s.name] = this.stats[s.name].compute()\n\t\t}\n\t\t/* Return cached value */\n\t\treturn this.stat_values[s.name]\n\t}\n\t\n\t/* ------------- COMPUTING THE HAMILTONIAN --------------- */\n\t\n\ttimeStep (){\n\t\tthrow(\"implemented in subclasses\")\n\t}\n}\n\nexport default GridBasedModel \n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/models/GridBasedModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 450,
    "kind": "class",
    "name": "GridBasedModel",
    "memberof": "src/models/GridBasedModel.js",
    "static": true,
    "longname": "src/models/GridBasedModel.js~GridBasedModel",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/models/GridBasedModel.js",
    "importStyle": "GridBasedModel",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 451,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 452,
    "kind": "member",
    "name": "mt",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#mt",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "member",
    "name": "ndim",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#ndim",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "member",
    "name": "conf",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#conf",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "member",
    "name": "grid",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#grid",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "member",
    "name": "midpoint",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#midpoint",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "member",
    "name": "field_size",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#field_size",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "member",
    "name": "pixels",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#pixels",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 460,
    "kind": "member",
    "name": "pixti",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#pixti",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "member",
    "name": "neighi",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#neighi",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "member",
    "name": "extents",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#extents",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "member",
    "name": "cellvolume",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#cellvolume",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "member",
    "name": "time",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#time",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "member",
    "name": "stats",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#stats",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "member",
    "name": "stat_values",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#stat_values",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "cellKind",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#cellKind",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "cellIDs",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#cellIDs",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "neigh",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#neigh",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "torus",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "pixt",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#pixt",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "setpixi",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#setpixi",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "setpix",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#setpix",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "random",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#random",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "ran",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#ran",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "incl_min",
        "types": [
          "*"
        ]
      },
      {
        "name": "incl_max",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "getStat",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#getStat",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "timeStep",
    "memberof": "src/models/GridBasedModel.js~GridBasedModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/GridBasedModel.js~GridBasedModel#timeStep",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 477,
    "kind": "file",
    "name": "src/simulation/Simulation.js",
    "content": "import CPM from \"../models/CPM.js\"\nimport Canvas from \"../Canvas.js\"\nimport GridManipulator from \"../grid/GridManipulator.js\"\nimport CentroidsWithTorusCorrection from \"../stats/CentroidsWithTorusCorrection.js\"\n\nclass Simulation {\n\tconstructor( config, custommethods ){\n\t\n\t\tcustommethods = custommethods || {}\n\t\n\t\t// overwrite default method if methods are supplied in custommethods\n\t\t// these can be initializeGrid(), drawCanvas(), logStats(),\n\t\t// postMCSListener().\n\t\tfor( let m of Object.keys( custommethods ) ){\n\t\t\tthis[m] = custommethods[m]\n\t\t}\n\t\t\n\t\n\t\t// Configuration of the simulation environment\n\t\tthis.conf = config.simsettings\n\t\tthis.imgrate = this.conf[\"IMGFRAMERATE\"] || 1\n\t\tthis.lograte = this.conf[\"LOGRATE\"] || 1\n\t\t\n\t\t// See if code is run in browser or via node, which will be used\n\t\t// below to determine what the output should be.\n\t\tif( typeof window !== \"undefined\" && typeof window.document !== \"undefined\" ){\n\t\t\tthis.mode = \"browser\"\n\t\t} else {\n\t\t\tthis.mode = \"node\"\n\t\t}\n\t\t\n\t\t// Log stats or not\n\t\tthis.logstats = this.conf[\"STATSOUT\"] || { browser: false, node: true }\n\t\tthis.logstats = this.logstats[this.mode]\n\t\t\n\t\t// Saving images\n\t\tthis.saveimg = this.conf[\"SAVEIMG\"] || false\n\t\tthis.savepath = this.conf[\"SAVEPATH\"] || \"undefined\"\n\t\t\n\t\tif( this.saveimg && this.savepath === \"undefined\" ){\n\t\t\tthrow( \"You need to specify the SAVEPATH option in the configuration object of your simulation!\")\n\t\t}\n\t\t\n\t\t// Save the time of the simulation.\n\t\tthis.time = 0\n\t\tthis.running = true\n\t\t\n\t\t// Make CPM object and add constraints\n\t\tthis.C = new CPM( config.field_size, config.conf )\n\t\t\t\t\n\t\t// To add canvas / gridmanipulator automatically when required. This will set\n\t\t// their values in helpClasses to 'true', so they don't have to be added again.\n\t\tthis.helpClasses = { gm: false, canvas: false }\n\t\t\n\t\t// Initialize the grid and run the burnin.\n\t\tthis.initializeGrid()\n\t\tthis.runBurnin()\n\t\t\n\t}\n\n\t// Add GridManipulator/Canvas objects when required.\n\taddGridManipulator(){\n\t\tthis.gm = new GridManipulator( this.C )\n\t\tthis.helpClasses[ \"gm\" ] = true\n\t}\n\taddCanvas(){\n\t\tlet zoom = this.conf.zoom || 2\n\t\tthis.Cim = new Canvas( this.C, {zoom:zoom} )\n\t\tthis.helpClasses[ \"canvas\" ] = true\n\t}\n\t\n\t// Method to initialize the Grid should be implemented in each simulation.\n\tinitializeGrid(){\n\t\n\t\t// add the initializer if not already there\n\t\tif( !this.helpClasses[\"gm\"] ){ this.addGridManipulator() }\n\t\n\t\tlet nrcells = this.conf[\"NRCELLS\"], cellkind, i\n\t\t\n\t\t// Seed the right number of cells for each cellkind\n\t\tfor( cellkind = 0; cellkind < nrcells.length; cellkind ++ ){\n\t\t\t\n\t\t\tfor( i = 0; i < nrcells[cellkind]; i++ ){\n\t\t\t\t// first cell always at the midpoint. Any other cells\n\t\t\t\t// randomly.\t\t\t\t\n\t\t\t\tif( i == 0 ){\n\t\t\t\t\tthis.gm.seedCellAt( cellkind+1, this.C.midpoint )\n\t\t\t\t} else {\n\t\t\t\t\tthis.gm.seedCell( cellkind+1 )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t}\n\t\n\trunBurnin(){\n\t\t// Simulate the burnin phase\n\t\tlet burnin = this.conf[\"BURNIN\"] || 0\n\t\tfor( let i = 0; i < burnin; i++ ){\n\t\t\tthis.C.monteCarloStep()\n\t\t}\n\t}\n\n\t\n\t// draw the canvas\n\tdrawCanvas(){\n\t\n\t\t// Add the canvas if required\n\t\tif( !this.helpClasses[\"canvas\"] ){ this.addCanvas() }\n\t\n\t\t// Clear canvas and draw stroma border\n\t\tthis.Cim.clear( this.conf[\"CANVASCOLOR\"] )\n\t\t\n\t\t\n\n\t\t// Draw each cellkind appropriately\n\t\tlet cellcolor=this.conf[\"CELLCOLOR\"], actcolor=this.conf[\"ACTCOLOR\"], \n\t\t\tnrcells=this.conf[\"NRCELLS\"], cellkind, cellborders = this.conf[\"SHOWBORDERS\"]\n\t\tfor( cellkind = 0; cellkind < nrcells.length; cellkind ++ ){\n\t\t\n\t\t\t// draw the cells of each kind in the right color\n\t\t\tif( cellcolor[ cellkind ] != -1 ){\n\t\t\t\tthis.Cim.drawCells( cellkind+1, cellcolor[cellkind] )\n\t\t\t}\n\t\t\t\n\t\t\t// Draw borders if required\n\t\t\tif(  cellborders[ cellkind  ]  ){\n\t\t\t\tlet bordercol = \"000000\"\n\t\t\t\tif( this.conf.hasOwnProperty(\"BORDERCOL\") ){\n\t\t\t\t\tbordercol = this.conf[\"BORDERCOL\"][cellkind]\n\t\t\t\t}\n\t\t\t\tthis.Cim.drawOnCellBorders( cellkind+1, bordercol )\n\t\t\t}\n\t\t\t\n\t\t\t// if there is an activity constraint, draw activity values depending on color.\n\t\t\tif( this.C.conf[\"LAMBDA_ACT\"] !== undefined && this.C.conf[\"LAMBDA_ACT\"][ cellkind + 1 ] > 0 ){ //this.constraints.hasOwnProperty( \"ActivityConstraint\" ) ){\n\t\t\t\tif( actcolor[ cellkind ] ){\n\t\t\t\t\tthis.Cim.drawActivityValues( cellkind + 1 )//, this.constraints[\"ActivityConstraint\"] )\n\t\t\t\t}\t\t\t\n\t\t\t}\n\n\t\t}\n\t\t\n\t}\n\t\n\t// Computing and logging stats\n\tlogStats(){\n\t\t\n\t\t// compute centroids for all cells\n\t\tlet allcentroids = this.C.getStat( CentroidsWithTorusCorrection )\n\t\t\n\t\tfor( let cid of this.C.cellIDs() ){\n\t\t\n\t\t\tlet thecentroid = allcentroids[cid]\n\t\t\t\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log( this.time + \"\\t\" + cid + \"\\t\" + \n\t\t\t\tthis.C.cellKind(cid) + \"\\t\" + thecentroid.join(\"\\t\") )\n\t\t\t\n\t\t}\n\n\t}\n\t\n\t// Listener for something that needs to be done after every monte carlo step.\n\tpostMCSListener(){\n\t\n\t}\n\t\n\t// Function for creating outputs\n\tcreateOutputs(){\n\t\t// Draw the canvas every IMGFRAMERATE steps\n\t\tif( this.imgrate > 0 && this.time % this.imgrate == 0 ){\n\t\t\t\n\t\t\tif( this.mode == \"browser\" ){\n\t\t\t\tthis.drawCanvas()\n\t\t\t}\n\t\t\t\n\t\t\t// Save the image if required and if we're in node (not possible in browser)\n\t\t\tif( this.mode == \"node\" && this.saveimg ){\n\t\t\t\tthis.drawCanvas()\n\t\t\t\tlet outpath = this.conf[\"SAVEPATH\"], expname = this.conf[\"EXPNAME\"] || \"mysim\"\n\t\t\t\tthis.Cim.writePNG( outpath +\"/\" + expname + \"-t\"+this.time+\".png\" )\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Log stats every LOGRATE steps\n\t\tif( this.logstats && this.time % this.lograte == 0 ){\n\t\t\tthis.logStats()\n\t\t}\n\t}\n\t\n\t// Run a montecarlostep and produce outputs if required.\n\tstep(){\n\t\tif( this.running ){\n\t\t\tthis.C.monteCarloStep()\n\t\t\tthis.postMCSListener()\n\t\t\tthis.createOutputs()\n\t\t\tthis.time++\n\t\t}\n\t}\n\t\n\t// toggle running\n\ttoggleRunning(){\n\t\tthis.running = !this.running\n\t}\n\t\n\t// Run the entire simulation.\n\trun(){\n\t\twhile( this.time < this.conf[\"RUNTIME\"] ){\n\t\t\n\t\t\tthis.step()\n\t\t\t\n\t\t}\n\t}\n\t\n}\n\n\nexport default Simulation",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/simulation/Simulation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 478,
    "kind": "class",
    "name": "Simulation",
    "memberof": "src/simulation/Simulation.js",
    "static": true,
    "longname": "src/simulation/Simulation.js~Simulation",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/simulation/Simulation.js",
    "importStyle": "Simulation",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 479,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 480,
    "kind": "member",
    "name": "[m]",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#[m]",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "member",
    "name": "conf",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#conf",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "member",
    "name": "imgrate",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#imgrate",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "member",
    "name": "lograte",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#lograte",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "member",
    "name": "mode",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#mode",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "member",
    "name": "logstats",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#logstats",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "member",
    "name": "saveimg",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#saveimg",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "member",
    "name": "savepath",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#savepath",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 490,
    "kind": "member",
    "name": "time",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#time",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "running",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#running",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "member",
    "name": "C",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#C",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 493,
    "kind": "member",
    "name": "helpClasses",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#helpClasses",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "{\"gm\": *, \"canvas\": *}"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "addGridManipulator",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#addGridManipulator",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 495,
    "kind": "member",
    "name": "gm",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#gm",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "addCanvas",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#addCanvas",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 497,
    "kind": "member",
    "name": "Cim",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#Cim",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "initializeGrid",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#initializeGrid",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "runBurnin",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#runBurnin",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "drawCanvas",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#drawCanvas",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "logStats",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#logStats",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "postMCSListener",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#postMCSListener",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "createOutputs",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#createOutputs",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "step",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#step",
    "access": "public",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "toggleRunning",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#toggleRunning",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "run",
    "memberof": "src/simulation/Simulation.js~Simulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simulation/Simulation.js~Simulation#run",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 508,
    "kind": "file",
    "name": "src/stats/Centroids.js",
    "content": "/*\tComputes the centroid of a cell. When the cell resides on a torus, the\n\tcentroid may be well outside the cell, and other stats may be preferable. \n*/\n\nimport Stat from \"./Stat.js\"\nimport PixelsByCell from \"./PixelsByCell.js\"\n\nclass Centroids extends Stat {\n\tset model( M ){\n\t\tthis.M = M\n\t\t// Half the grid dimensions; if pixels with the same cellid are further apart,\n\t\t// we assume they are on the border of the grid and that we need to correct\n\t\t// their positions to compute the centroid.\n\t\tthis.halfsize = new Array( this.M.ndim).fill(0)\n\t\tfor( let i = 0 ; i < this.M.ndim ; i ++ ){\n\t\t\tthis.halfsize[i] = this.M.extents[i]/2\n\t\t}\n\t}\n\tconstructor( conf ){\n\t\tsuper(conf)\n\t}\n\t/* Compute the centroid of a specific cell with id = <cellid>. \n\tThe cellpixels object is given as an argument so that it only has to be requested\n\tonce for all cells together. */\n\tcomputeCentroidOfCell( cellid, cellpixels  ){\n\t\n\t\t//let cellpixels = this.M.getStat( PixelsByCell ) \n\t\n\t\tconst pixels = cellpixels[ cellid ]\n\t\t\n\t\t// cvec will contain the x, y, (z) coordinate of the centroid.\n\t\t// Loop over the dimensions to compute each element separately.\n\t\tlet cvec = new Array(this.M.ndim).fill(0)\n\t\tfor( let dim = 0 ; dim < this.M.ndim ; dim ++ ){\n\t\t\t\n\t\t\tlet mi = 0.\n\t\t\t// Loop over the pixels;\n\t\t\t// compute mean position per dimension with online algorithm\n\t\t\tfor( let j = 0 ; j < pixels.length ; j ++ ){\n\t\t\t\t// Check distance of current pixel to the accumulated mean in this dim.\n\t\t\t\t// Check if this distance is greater than half the grid size in this\n\t\t\t\t// dimension; if so, this indicates that the cell has moved to the\n\t\t\t\t// other end of the grid because of the torus. Note that this only\n\t\t\t\t// holds AFTER the first pixel (so for j > 0), when we actually have\n\t\t\t\t// an idea of where the cell is.\n\t\t\t\tlet dx = pixels[j][dim] - mi\n\t\t\t\t// Update the mean with the appropriate weight. \n\t\t\t\tmi += dx/(j+1)\n\t\t\t}\t\t\t\n\t\t\t// Set the mean position in the cvec vector.\n\t\t\tcvec[dim] = mi\n\t\t}\n\t\treturn cvec\n\t\t\n\t}\n\t\t\n\t/* Compute centroids for all cells on the grid, returning an object with a key\n\tfor each cellid and as \"value\" the array with coordinates of the centroid. */\n\tcompute(){\n\t\t// Get object with arrays of pixels for each cell on the grid, and get\n\t\t// the array for the current cell.\n\t\tlet cellpixels = this.M.getStat( PixelsByCell ) \n\t\t\n\t\t// Create an object for the centroids. Add the centroid array for each cell.\n\t\tlet centroids = {}\n\t\tfor( let cid of this.M.cellIDs() ){\n\t\t\tcentroids[cid] = this.computeCentroidOfCell( cid, cellpixels )\n\t\t}\n\t\treturn centroids\n\t}\n}\n\nexport default Centroids\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/stats/Centroids.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 509,
    "kind": "class",
    "name": "Centroids",
    "memberof": "src/stats/Centroids.js",
    "static": true,
    "longname": "src/stats/Centroids.js~Centroids",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/stats/Centroids.js",
    "importStyle": "Centroids",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/stats/Stat.js~Stat"
    ]
  },
  {
    "__docId__": 510,
    "kind": "set",
    "name": "model",
    "memberof": "src/stats/Centroids.js~Centroids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/Centroids.js~Centroids#model",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 511,
    "kind": "member",
    "name": "M",
    "memberof": "src/stats/Centroids.js~Centroids",
    "static": false,
    "longname": "src/stats/Centroids.js~Centroids#M",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "halfsize",
    "memberof": "src/stats/Centroids.js~Centroids",
    "static": false,
    "longname": "src/stats/Centroids.js~Centroids#halfsize",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stats/Centroids.js~Centroids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/Centroids.js~Centroids#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "computeCentroidOfCell",
    "memberof": "src/stats/Centroids.js~Centroids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/Centroids.js~Centroids#computeCentroidOfCell",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "cellid",
        "types": [
          "*"
        ]
      },
      {
        "name": "cellpixels",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "compute",
    "memberof": "src/stats/Centroids.js~Centroids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/Centroids.js~Centroids#compute",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 516,
    "kind": "file",
    "name": "src/stats/CentroidsWithTorusCorrection.js",
    "content": "/*\tComputes the centroid of a cell when grid has a torus. \n\tAssumption: cell pixels never extend for more than half the size of the grid. \n*/\n\nimport Stat from \"./Stat.js\"\nimport PixelsByCell from \"./PixelsByCell.js\"\n\nclass CentroidsWithTorusCorrection extends Stat {\n\tset model( M ){\n\t\tthis.M = M\n\t\t// Half the grid dimensions; if pixels with the same cellid are further apart,\n\t\t// we assume they are on the border of the grid and that we need to correct\n\t\t// their positions to compute the centroid.\n\t\tthis.halfsize = new Array( this.M.ndim).fill(0)\n\t\tfor( let i = 0 ; i < this.M.ndim ; i ++ ){\n\t\t\tthis.halfsize[i] = this.M.extents[i]/2\n\t\t}\n\t}\n\tconstructor( conf ){\n\t\tsuper(conf)\n\t}\n\t\t\n\t/* Compute the centroid of a specific cell with id = <cellid>. \n\tThe cellpixels object is given as an argument so that it only has to be requested\n\tonce for all cells together. */\n\tcomputeCentroidOfCell( cellid, cellpixels  ){\n\t\n\t\t//let cellpixels = this.M.getStat( PixelsByCell ) \n\t\n\t\tconst pixels = cellpixels[ cellid ]\n\t\t\n\t\t// cvec will contain the x, y, (z) coordinate of the centroid.\n\t\t// Loop over the dimensions to compute each element separately.\n\t\tlet cvec = new Array(this.M.ndim).fill(0)\n\t\tfor( let dim = 0 ; dim < this.M.ndim ; dim ++ ){\n\t\t\t\n\t\t\tlet mi = 0.\n\t\t\tconst hsi = this.halfsize[dim], si = this.M.extents[dim]\n\t\t\t\n\t\t\t// Loop over the pixels;\n\t\t\t// compute mean position per dimension with online algorithm\n\t\t\tfor( let j = 0 ; j < pixels.length ; j ++ ){\n\t\t\t\t\n\t\t\t\t// Check distance of current pixel to the accumulated mean in this dim.\n\t\t\t\t// Check if this distance is greater than half the grid size in this\n\t\t\t\t// dimension; if so, this indicates that the cell has moved to the\n\t\t\t\t// other end of the grid because of the torus. Note that this only\n\t\t\t\t// holds AFTER the first pixel (so for j > 0), when we actually have\n\t\t\t\t// an idea of where the cell is.\n\t\t\t\tlet dx = pixels[j][dim] - mi\n\t\t\t\tif( j > 0 ){\n\t\t\t\t\t// If distance is greater than half the grid size, correct the\n\t\t\t\t\t// coordinate.\n\t\t\t\t\tif( dx > hsi ){\n\t\t\t\t\t\tdx -= si\n\t\t\t\t\t} else if( dx < -hsi ){\n\t\t\t\t\t\tdx += si\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Update the mean with the appropriate weight. \n\t\t\t\tmi += dx/(j+1)\n\t\t\t}\n\t\t\t\n\t\t\t// Correct the final position so that it falls in the current grid.\n\t\t\t// (Because of the torus, it can happen to get a centroid at eg x = -1. )\n\t\t\tif( mi < 0 ){\n\t\t\t\tmi += si\n\t\t\t} else if( mi > si ){\n\t\t\t\tmi -= si\n\t\t\t}\n\t\t\t\n\t\t\t// Set the mean position in the cvec vector.\n\t\t\tcvec[dim] = mi\n\t\t}\n\t\treturn cvec\n\t\t\n\t}\n\t\t\n\t/* Compute centroids for all cells on the grid, returning an object with a key\n\tfor each cellid and as \"value\" the array with coordinates of the centroid. */\n\tcompute(){\n\t\t// Get object with arrays of pixels for each cell on the grid, and get\n\t\t// the array for the current cell.\n\t\tlet cellpixels = this.M.getStat( PixelsByCell ) \n\t\t\n\t\t// Create an object for the centroids. Add the centroid array for each cell.\n\t\tlet centroids = {}\n\t\tfor( let cid of this.M.cellIDs() ){\n\t\t\tcentroids[cid] = this.computeCentroidOfCell( cid, cellpixels )\n\t\t}\n\t\t\n\t\treturn centroids\n\t\t\n\t}\n}\n\nexport default CentroidsWithTorusCorrection\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/stats/CentroidsWithTorusCorrection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 517,
    "kind": "class",
    "name": "CentroidsWithTorusCorrection",
    "memberof": "src/stats/CentroidsWithTorusCorrection.js",
    "static": true,
    "longname": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/stats/CentroidsWithTorusCorrection.js",
    "importStyle": "CentroidsWithTorusCorrection",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/stats/Stat.js~Stat"
    ]
  },
  {
    "__docId__": 518,
    "kind": "set",
    "name": "model",
    "memberof": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection#model",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 519,
    "kind": "member",
    "name": "M",
    "memberof": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection",
    "static": false,
    "longname": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection#M",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 520,
    "kind": "member",
    "name": "halfsize",
    "memberof": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection",
    "static": false,
    "longname": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection#halfsize",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "computeCentroidOfCell",
    "memberof": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection#computeCentroidOfCell",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "cellid",
        "types": [
          "*"
        ]
      },
      {
        "name": "cellpixels",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "compute",
    "memberof": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/CentroidsWithTorusCorrection.js~CentroidsWithTorusCorrection#compute",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 524,
    "kind": "file",
    "name": "src/stats/PixelsByCell.js",
    "content": "/* \t\n\tCreates an object with the cellpixels of each cell on the grid. \n\tKeys are the cellIDs of all cells on the grid, corresponding values are arrays\n\tcontaining the pixels belonging to that cell. Each element of that array contains\n\tthe coordinate array p = [x,y] for that pixel.\n*/\nimport Stat from \"./Stat.js\"\n\nclass PixelsByCell extends Stat {\n\n\tcompute(){\n\t\t// initialize the object\n\t\tlet cellpixels = { }\n\t\t// The this.M.pixels() iterator returns coordinates and cellid for all \n\t\t// non-background pixels on the grid. See the appropriate Grid class for\n\t\t// its implementation.\n\t\tfor( let [p,i] of this.M.pixels() ){\n\t\t\tif( !cellpixels[i] ){\n\t\t\t\tcellpixels[i] = [p]\n\t\t\t} else {\n\t\t\t\tcellpixels[i].push( p )\n\t\t\t}\n\t\t}\n\t\treturn cellpixels\n\t}\n}\n\nexport default PixelsByCell\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/stats/PixelsByCell.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 525,
    "kind": "class",
    "name": "PixelsByCell",
    "memberof": "src/stats/PixelsByCell.js",
    "static": true,
    "longname": "src/stats/PixelsByCell.js~PixelsByCell",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/stats/PixelsByCell.js",
    "importStyle": "PixelsByCell",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/stats/Stat.js~Stat"
    ]
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "compute",
    "memberof": "src/stats/PixelsByCell.js~PixelsByCell",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/PixelsByCell.js~PixelsByCell#compute",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 527,
    "kind": "file",
    "name": "src/stats/PostMCSStats.js",
    "content": "\nclass PostMCSStats {\n\tconstructor( conf ){\n\t\tthis.conf = {\n\t\t\ttrackpixels: true\n\t\t}\n\t\tObject.assign( this.conf, conf )\n\t}\n\tset CPM( C ){\n\t\tthis.C = C\n\t\tthis.halfsize = new Array(C.ndim).fill(0)\n\t\tfor( let i = 0 ; i < C.ndim ; i ++ ){\n\t\t\tthis.halfsize[i] = C.extents[i]/2\n\t\t}\n\t}\n\tpostMCSListener(){\n\t\tif( this.conf.trackpixels ){\n\t\t\tthis.cellpixels = {}\n\t\t\tfor( let i of this.C.cellIDs() ){\n\t\t\t\tthis.cellpixels[i] = []\n\t\t\t}\n\t\t\tfor( let [p,i] of this.C.cellPixels() ){\n\t\t\t\tthis.cellpixels[i].push( p )\n\t\t\t}\n\t\t}\n\t}\n\t/* Return an array with the pixel coordinates of each connected\n\t * component for the cell with type t\n\t *\n\t * TODO this function appears to be extremely slow. \n\t * Avoid calling this at all costs \n\t * if possible. */\n\tconnectedComponentsOfCell( t, torus ){\n\t\tlet visited = {}, k=0, pixels = [], C = this.C\n\t\tlet labelComponent = function(seed, k){\n\t\t\tlet q = [seed]\n\t\t\tvisited[q[0]] = 1\n\t\t\tpixels[k] = []\n\t\t\twhile( q.length > 0 ){\n\t\t\t\tlet e = q.pop()\n\t\t\t\tpixels[k].push( C.grid.i2p(e) )\n\t\t\t\tlet ne = C.grid.neighi( e, torus )\n\t\t\t\tfor( let i = 0 ; i < ne.length ; i ++ ){\n\t\t\t\t\tif( C.pixti( ne[i] ) == t &&\n\t\t\t\t\t\t!(ne[i] in visited) ){\n\t\t\t\t\t\tq.push(ne[i])\n\t\t\t\t\t\tvisited[ne[i]]=1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor( let i = 0 ; i < this.cellpixels[t].length ; i ++ ){\n\t\t\tlet pi = this.C.grid.p2i( this.cellpixels[t][i] )\n\t\t\tif( !(pi in visited) ){\n\t\t\t\tlabelComponent( pi, k )\n\t\t\t\tk++\n\t\t\t}\n\t\t}\n\t\treturn pixels\n\t}\n\t/* converts an array of pixel coordinates to its centroid.\n\tIncludes a correction for pixels that are \"too far apart\", such\n\t   that meaningful centroids will be computed if the cell resides on \n\t a torus grid. */\n\tpixelsToCentroid( pixels ){\n\t\tlet cvec = new Array(this.C.ndim).fill(0)\n\t\tfor( let dim = 0 ; dim < this.C.ndim ; dim ++ ){\n\t\t\tlet mi = 0.\n\t\t\t// compute mean per dimension with online algorithm\n\t\t\tfor( let j = 0 ; j < pixels.length ; j ++ ){\n\t\t\t\tlet dx = pixels[j][dim] - mi\n\t\t\t\tmi += dx/(j+1)\n\t\t\t}\n\t\t\tcvec[dim] = mi\n\t\t}\n\t\treturn cvec\n\t}\n\t/*\n\t * Computes a simple cell centroid.\n\t */\n\tcentroid( t ){\n\t\treturn this.pixelsToCentroid( this.cellpixels[t] )\n\t}\n\n\t/*\n\t * Computes the centroid of a cell when grid has a torus.\n\t * Assumption: cell pixels never extend for more than half the\n\t * size of the grid.\n\t */\n\tcentroidWithTorusCorrection( t ){\n\t\tconst pixels = this.cellpixels[t]\n\t\tlet cvec = new Array(this.C.ndim).fill(0)\n\t\tfor( let dim = 0 ; dim < this.C.ndim ; dim ++ ){\n\t\t\tlet mi = 0.\n\t\t\tconst hsi = this.halfsize[dim], si = this.C.extents[dim]\n\t\t\t// compute mean per dimension with online algorithm\n\t\t\tfor( let j = 0 ; j < pixels.length ; j ++ ){\n\t\t\t\tlet dx = pixels[j][dim] - mi\n\t\t\t\tif( j > 0 ){\n\t\t\t\t\tif( dx > hsi ){\n\t\t\t\t\t\tdx -= si\n\t\t\t\t\t} else if( dx < -hsi ){\n\t\t\t\t\t\tdx += si\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmi += dx/(j+1)\n\t\t\t}\n\t\t\tif( mi < 0 ){\n\t\t\t\tmi += si\n\t\t\t} else if( mi > si ){\n\t\t\t\tmi -= si\n\t\t\t}\n\t\t\tcvec[dim] = mi\n\t\t}\n\t\treturn cvec\n\t}\n\n\n\t/*\n\t * Computes the centroid of a cell when grid has a torus.\n\t * This is an older, slower implementation based on connected\n\t * components. */\n\tcentroidWithTorusSlow( t ){\n\t\t// get the connected components and the pixels in it\n\t\tlet ccpixels = this.connectedComponentsOfCell( t, false )\n\t\n\t\tif( ccpixels.length == 0 ){\n\t\t\treturn (void 0)\n\t\t}\n\n\t\t// centroid of the first component\n\t\tlet centroid0 = this.pixelsToCentroid( ccpixels[ 0 ] )\n\n\t\t// loop over the connected components to compute a weighted sum of their \n\t\t// centroids.\n\t\tlet n = 0, \n\t\t\tcentroid = new Array(this.C.ndim).fill(0)\n\t\tconst fs = this.C.extents\n\t\tfor( let j = 0; j < ccpixels.length ; j++ ){\n\t\t\tlet centroidc, nc, d\n\t\t\tcentroidc = this.pixelsToCentroid( ccpixels[ j ] )\n\t\t\tnc = ccpixels[ j ].length\n\t\t\tn += nc\n\n\n\t\t\t// compute weighted sum. \n\t\t\tfor( d = 0; d < this.C.ndim; d++ ){\n\t\t\t\t// If centroid is more than half the field size away\n\t\t\t\t// from the first centroid0, it crosses the border, so we \n\t\t\t\t// first correct its coordinates.\n\t\t\t\tif( centroidc[d] - centroid0[d] > fs[d]/2 ){\n\t\t\t\t\tcentroidc[d] -= fs[d]\n\t\t\t\t} else if( centroidc[d] - centroid0[d] < -fs[d]/2 ){\n\t\t\t\t\tcentroidc[d] += fs[d]\n\t\t\t\t}\n\t\t\t\tcentroid[d] += centroidc[d] * nc\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t// divide by the total n to get the mean\n\t\tfor( let d = 0; d < this.C.ndim; d++ ){\n\t\t\tcentroid[d] /= n\n\t\t\twhile( centroid[d] < 0 ){\n\t\t\t\tcentroid[d] += fs[d]\n\t\t\t}\n\t\t\twhile( centroid[d] > fs[d] ){\n\t\t\t\tcentroid[d] -= fs[d]\n\t\t\t}\n\t\t}\n\n\t\treturn centroid\t\t\n\t}\n}\n\nexport default  PostMCSStats \n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/stats/PostMCSStats.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 528,
    "kind": "class",
    "name": "PostMCSStats",
    "memberof": "src/stats/PostMCSStats.js",
    "static": true,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/stats/PostMCSStats.js",
    "importStyle": "PostMCSStats",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 529,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stats/PostMCSStats.js~PostMCSStats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 530,
    "kind": "member",
    "name": "conf",
    "memberof": "src/stats/PostMCSStats.js~PostMCSStats",
    "static": false,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats#conf",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"trackpixels\": boolean}"
      ]
    }
  },
  {
    "__docId__": 531,
    "kind": "set",
    "name": "CPM",
    "memberof": "src/stats/PostMCSStats.js~PostMCSStats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats#CPM",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 532,
    "kind": "member",
    "name": "C",
    "memberof": "src/stats/PostMCSStats.js~PostMCSStats",
    "static": false,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats#C",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "member",
    "name": "halfsize",
    "memberof": "src/stats/PostMCSStats.js~PostMCSStats",
    "static": false,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats#halfsize",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "postMCSListener",
    "memberof": "src/stats/PostMCSStats.js~PostMCSStats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats#postMCSListener",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 535,
    "kind": "member",
    "name": "cellpixels",
    "memberof": "src/stats/PostMCSStats.js~PostMCSStats",
    "static": false,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats#cellpixels",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "connectedComponentsOfCell",
    "memberof": "src/stats/PostMCSStats.js~PostMCSStats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats#connectedComponentsOfCell",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "torus",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "pixelsToCentroid",
    "memberof": "src/stats/PostMCSStats.js~PostMCSStats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats#pixelsToCentroid",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "pixels",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "centroid",
    "memberof": "src/stats/PostMCSStats.js~PostMCSStats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats#centroid",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "method",
    "name": "centroidWithTorusCorrection",
    "memberof": "src/stats/PostMCSStats.js~PostMCSStats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats#centroidWithTorusCorrection",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 540,
    "kind": "method",
    "name": "centroidWithTorusSlow",
    "memberof": "src/stats/PostMCSStats.js~PostMCSStats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/PostMCSStats.js~PostMCSStats#centroidWithTorusSlow",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 541,
    "kind": "file",
    "name": "src/stats/Stat.js",
    "content": "\nclass Stat {\n\t// Although Stats do have a 'conf' object, they should not \n\t// really be configurable in the sense that they should always\n\t// provide an expected output. The 'conf' object is mainly intended\n\t// to provide an option to configure logging / debugging output. That\n\t// is not implemented yet.\n\tconstructor( conf ){\n\t\tthis.conf = conf || {}\n\t}\n\tset model( M ){\n\t\tthis.M = M\n\t}\n\tcompute(){\n\t\tthrow(\"compute method not implemented for subclass of Stat\")\n\t}\n}\n\nexport default Stat\n\n\n",
    "static": true,
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/src/stats/Stat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 542,
    "kind": "class",
    "name": "Stat",
    "memberof": "src/stats/Stat.js",
    "static": true,
    "longname": "src/stats/Stat.js~Stat",
    "access": "public",
    "export": true,
    "importPath": "cpmjs/src/stats/Stat.js",
    "importStyle": "Stat",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 543,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stats/Stat.js~Stat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/Stat.js~Stat#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 544,
    "kind": "member",
    "name": "conf",
    "memberof": "src/stats/Stat.js~Stat",
    "static": false,
    "longname": "src/stats/Stat.js~Stat#conf",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 545,
    "kind": "set",
    "name": "model",
    "memberof": "src/stats/Stat.js~Stat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/Stat.js~Stat#model",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 546,
    "kind": "member",
    "name": "M",
    "memberof": "src/stats/Stat.js~Stat",
    "static": false,
    "longname": "src/stats/Stat.js~Stat#M",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "compute",
    "memberof": "src/stats/Stat.js~Stat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stats/Stat.js~Stat#compute",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "# cpm\nCellular Potts Model implementation\n\nImplements a simple Cellular Potts Model in javascript. Code includes the extension for cell migration published in \n\nIoana Niculescu, Johannes Textor, Rob J. de Boer:\n__Crawling and Gliding: A Computational Model for Shape-Driven Cell Migration__\nPLoS Computational Biology 11(10): e1004280\nhttp://dx.doi.org/10.1371/journal.pcbi.1004280\n\n# How it works\n\nThis code has been ported over from our older \"cpm\" repository. This is now an ES6 module, which is compiled trough \"rollup\" for use in the browser. See the Makefile.\n\n## Browser examples\n\nWe have the following examples for web-browser CPMs:\n\n* [A simple Ising model](examples/basic-potts-model.html)\n\n## Node examples\n\nTBD\n",
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n\t\"name\": \"cpmjs\",\n\t\"version\": \"0.9.1\",\n\t\"dependencies\": {\n\t\t\"braces\": \"^3.0.2\",\n\t\t\"canvas\": \"^2.0.1\",\n\t\t\"esdoc\": \"^1.1.0\",\n\t\t\"esdoc-standard-plugin\": \"^1.0.0\",\n\t\t\"fs\": \"0.0.1-security\",\n\t\t\"mathjs\": \"^5.8.0\",\n\t\t\"mersennetwister\": \"^0.2.3\",\n\t\t\"rollup\": \"^1.2.3\",\n\t\t\"rollup-plugin-eslint\": \"^5.0.0\",\n\t\t\"websocket\": \"^1.0.28\"\n\t},\n\t\"devDependencies\": {\n\t\t\"rollup-plugin-commonjs\": \"^9.2.0\",\n\t\t\"rollup-plugin-node-resolve\": \"^4.0.0\"\n\t}\n}\n",
    "longname": "/Users/ingewortel/Documents/projects/Github/cpmjs-dev/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]